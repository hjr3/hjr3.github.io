<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:activity="http://activitystrea.ms/spec/1.0/"
  xml:lang="en"
>
    <title>Herman J. Radtke III</title>
    <link href="https://hermanradtke.com/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://hermanradtke.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-05-07T00:00:00+00:00</updated>
    <id>https://hermanradtke.com/atom.xml</id>
    
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Automating JIRA-Friendly Branch Names with Jujutsu</title>
        <published>2025-05-07T00:00:00+00:00</published>
        <updated>2025-05-07T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/automating-jira-friendly-branch-names-with-jujutsu/" type="text/html"/>
        <id>https://hermanradtke.com/automating-jira-friendly-branch-names-with-jujutsu/</id>
        
        <summary type="html">&lt;p&gt;My current $JOB uses JIRA to manage issues and Github as the forge. I use Jujutsu and create remote branches using &lt;code&gt;jj git push -c @&lt;&#x2F;code&gt;. However, the Engineering Standard at work requires that the branch be named in an identifiable way. In practice, every branch is the slug of the commit description. After doing creating a jj bookmark manually a few times, I decided to automate it.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;My current $JOB uses JIRA to manage issues and Github as the forge. I use Jujutsu and create remote branches using &lt;code&gt;jj git push -c @&lt;&#x2F;code&gt;. However, the Engineering Standard at work requires that the branch be named in an identifiable way. In practice, every branch is the slug of the commit description. After doing creating a jj bookmark manually a few times, I decided to automate it.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;My commit message usually looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;feat(JIRA-12345): a short description
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;a longer body with more detail about the change
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case, I want a bookmark named &lt;code&gt;feat-ENG-12345-a-short-description&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I created an jj alias to get the commit description:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# $HOME&#x2F;.config&#x2F;jj&#x2F;config.toml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[aliases]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# print first line of current revision
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fl &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--no-graph&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-r&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--template&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description.first_line()&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To slugify this, I found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Mayeu&#x2F;slugify&#x2F;blob&#x2F;9ba3fee8063cac2803a8c41f335f3cce6b8d3474&#x2F;slugify&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;Mayeu&#x2F;slugify&lt;&#x2F;a&gt;. This is a simple bash script. I looked at Rust options that wrapped the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;slug&quot;&gt;slug&lt;&#x2F;a&gt; crate, but they did not accept &lt;code&gt;stdin&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I then added a function to &lt;code&gt;.zshrc&lt;&#x2F;code&gt; to create the bookmark:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;jbm&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jj&lt;&#x2F;span&gt;&lt;span&gt; bookmark create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -r&lt;&#x2F;span&gt;&lt;span&gt; @ $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jj&lt;&#x2F;span&gt;&lt;span&gt; fl | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&#x2F;bin&#x2F;slugify &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sed &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s&#x2F;eng&#x2F;ENG&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now my workflow is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jbm&lt;&#x2F;code&gt; to create the bookmark&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;jj git push --allow-new&lt;&#x2F;code&gt; to push the branch&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Manage Dotfiles with Jujutsu</title>
        <published>2024-09-28T00:00:00+00:00</published>
        <updated>2024-09-28T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/manage-dotfiles-with-jujutsu/" type="text/html"/>
        <id>https://hermanradtke.com/manage-dotfiles-with-jujutsu/</id>
        
        <summary type="html">&lt;p&gt;My dotfiles setup is very simple: I version control my &lt;code&gt;$HOME&lt;&#x2F;code&gt; directory using git. I ignore everything by default to avoid accidentally adding files I do not want to track. This avoids the need for any scripts or frameworks. Lately, I have been using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;martinvonz&#x2F;jj&quot;&gt;Jujutsu&lt;&#x2F;a&gt; for more personal projects and decided to use &lt;code&gt;jj&lt;&#x2F;code&gt; to manage my dotfiles.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;My dotfiles setup is very simple: I version control my &lt;code&gt;$HOME&lt;&#x2F;code&gt; directory using git. I ignore everything by default to avoid accidentally adding files I do not want to track. This avoids the need for any scripts or frameworks. Lately, I have been using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;martinvonz&#x2F;jj&quot;&gt;Jujutsu&lt;&#x2F;a&gt; for more personal projects and decided to use &lt;code&gt;jj&lt;&#x2F;code&gt; to manage my dotfiles.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I am using jj version &lt;code&gt;0.21.0&lt;&#x2F;code&gt; at the time of this writing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;migration&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#migration&quot; aria-label=&quot;Anchor link for: migration&quot;&gt;Migration&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The migration was fairly straight-forward. Before doing anything, I made sure all my changes were tracked and push to github. I also made sure I had a working backup.&lt;&#x2F;p&gt;
&lt;p&gt;For my work laptop, I chose to colocate git and jj together. This will allow me to fall back to git commands in a pinch.&lt;&#x2F;p&gt;
&lt;p&gt;Steps:&lt;&#x2F;p&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;&lt;code&gt;cd $HOME&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Colocate git and jj - &lt;code&gt;jj git init --colocate&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Track my branch on github - &lt;code&gt;jj branch track main@origin&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For my personal laptop, I decided to force myself to only use jj.&lt;&#x2F;p&gt;
&lt;p&gt;Steps:&lt;&#x2F;p&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;&lt;code&gt;cd $HOME&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Remove the &lt;code&gt;.git&lt;&#x2F;code&gt; directory - &lt;code&gt;rm -fr .git&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Initialize Jujutsu - &lt;code&gt;jj git init&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;This will create an empty commit based on root. We will fix this in a minute.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Add github as a remote - &lt;code&gt;jj git remote add origin git@github.com:hjr3&#x2F;dotfiles.git&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Fetch the latest changes - &lt;code&gt;jj git fetch&lt;&#x2F;code&gt; or &lt;code&gt;jj git fetch --remote origin&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Track my branch on github - &lt;code&gt;jj branch track main@origin&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Move the empty commit - &lt;code&gt;jj rebase -d main@origin&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Moving the empty commit will change the repo from this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;◆  ppxsuksz herman@hermanradtke.com 2024-09-28 09:48:15 main 7962ecfe
&lt;&#x2F;span&gt;&lt;span&gt;│  Add instructions to set up jj
&lt;&#x2F;span&gt;&lt;span&gt;~  (elided revisions)
&lt;&#x2F;span&gt;&lt;span&gt;│ @  porzoswr herman@hermanradtke.com 2024-09-28 10:19:32 79747d01
&lt;&#x2F;span&gt;&lt;span&gt;├─╯  (no description set)
&lt;&#x2F;span&gt;&lt;span&gt;◆  zzzzzzzz root() 00000000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;@  porzoswr herman@hermanradtke.com 2024-09-28 10:22:39 d396a016
&lt;&#x2F;span&gt;&lt;span&gt;│  (empty) (no description set)
&lt;&#x2F;span&gt;&lt;span&gt;◆  ppxsuksz herman@hermanradtke.com 2024-09-28 09:48:15 main 7962ecfe
&lt;&#x2F;span&gt;&lt;span&gt;│  Add instructions to set up jj
&lt;&#x2F;span&gt;&lt;span&gt;~
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;no-more-forcibly-adding-changes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#no-more-forcibly-adding-changes&quot; aria-label=&quot;Anchor link for: no-more-forcibly-adding-changes&quot;&gt;No More Forcibly Adding Changes&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My workflow did slightly change. My &lt;code&gt;.gitignore&lt;&#x2F;code&gt; file used to be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# Ignore everything
&lt;&#x2F;span&gt;&lt;span&gt;*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and I would use forcibly add changes using&lt;code&gt;git add -f &amp;lt;pathspec&amp;gt;...&lt;&#x2F;code&gt;. There is no concept of &lt;code&gt;git add&lt;&#x2F;code&gt; in &lt;code&gt;jj&lt;&#x2F;code&gt; though.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, I explicitly added my files to &lt;code&gt;.gitignore&lt;&#x2F;code&gt;. I ran &lt;code&gt;git ls-tree -r main --name-only&lt;&#x2F;code&gt; to find all files being tracked by git in my &lt;code&gt;main&lt;&#x2F;code&gt; branch. Then I used the &lt;code&gt;!&lt;&#x2F;code&gt; operator in &lt;code&gt;.gitignore&lt;&#x2F;code&gt; to opt them in. Now, my &lt;code&gt;.gitignore&lt;&#x2F;code&gt; file looks something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# Ignore everything
&lt;&#x2F;span&gt;&lt;span&gt;*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Manually add files we want to track
&lt;&#x2F;span&gt;&lt;span&gt;!.gitignore
&lt;&#x2F;span&gt;&lt;span&gt;!.ssh&#x2F;config
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These changes are compatible with git and I can easily revert back to my old workflow if I decided to stop using jj.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;docs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#docs&quot; aria-label=&quot;Anchor link for: docs&quot;&gt;Docs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I primarily used two sources of documentation to figure this all out:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The excellent &lt;a href=&quot;https:&#x2F;&#x2F;steveklabnik.github.io&#x2F;jujutsu-tutorial&#x2F;&quot;&gt;Jujutsu Tutorial&lt;&#x2F;a&gt; by Steve Klabnik&lt;&#x2F;li&gt;
&lt;li&gt;The Jujutsu Git Comparison &lt;a href=&quot;https:&#x2F;&#x2F;martinvonz.github.io&#x2F;jj&#x2F;latest&#x2F;git-comparison&#x2F;#command-equivalence-table&quot;&gt;Command equivalance table&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Why Your Rails-like Framework Is Not Widely Used</title>
        <published>2024-09-21T00:00:00+00:00</published>
        <updated>2024-09-21T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/why-your-rails-like-framework-is-not-widely-used/" type="text/html"/>
        <id>https://hermanradtke.com/why-your-rails-like-framework-is-not-widely-used/</id>
        
        <summary type="html">&lt;p&gt;Ruby on Rails defined the ethos of the web development community for many years. I have observed people trying to replicate &quot;Rails&quot; in other languages with very mixed results. I consider Laravel, ASP.NET and Phoenix successful rails-like frameworks. Python already has Django. Sadly Java, Kotlin, Scala, Node.js, Go and Rust all lack a widely adopted rails-like experience.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;Ruby on Rails defined the ethos of the web development community for many years. I have observed people trying to replicate &quot;Rails&quot; in other languages with very mixed results. I consider Laravel, ASP.NET and Phoenix successful rails-like frameworks. Python already has Django. Sadly Java, Kotlin, Scala, Node.js, Go and Rust all lack a widely adopted rails-like experience.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I believe Ruby on Rails was successful because the creator had strong opinions and  expressed those options as conventions in the framework. In 2003, Rails was in stark contrast to the configuration-heavy frameworks that tried to be everything to everyone.&lt;&#x2F;p&gt;
&lt;p&gt;When recently evaluating some frameworks that claim to be &quot;Ruby on Rails&quot;-like, I noticed responses from the framework creator(s) like:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;we decided to not decide&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;up to each individual to make a choice&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Look, people giving away their code for free can do whatever they want. However, if your goal is to create a modern rails-like framework this is counter-productive. Rails means the framework author has &lt;em&gt;strong opinions expressed as conventions&lt;&#x2F;em&gt; so developers using the framework do not have to make a bunch of upfront decisions before they can get started.&lt;&#x2F;p&gt;
&lt;p&gt;I think the fear is that our strong opinion will not hold up over time and we made the wrong decision. A developer is going to argue with us about it. Here is the thing: a developer that chooses to argue with you about a decision you made was never going to use your framework anyways. Block them. Maintain a learning mindset and remember that it is ok to be wrong on the internet. Also, saying &quot;no&quot; is a decision that is perfectly acceptable.&lt;&#x2F;p&gt;
&lt;p&gt;So, in the spirit of strong opinions and being wrong, below are my thoughts on what will make a modern rails-like framework successful.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;auto-increment-keys-should-not-be-ids&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#auto-increment-keys-should-not-be-ids&quot; aria-label=&quot;Anchor link for: auto-increment-keys-should-not-be-ids&quot;&gt;Auto-increment Keys Should Not Be IDs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Rails-like frameworks make heavy use of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Object%E2%80%93relational_mapping&quot;&gt;ORMs&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;www.martinfowler.com&#x2F;eaaCatalog&#x2F;activeRecord.html&quot;&gt;ActiveRecord&lt;&#x2F;a&gt; pattern, which almost always means there is an auto-incrementing primary key for each database table. That was a fine default when Ruby on Rails was created in 2003 considering &lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc4122&quot;&gt;uuids were proposed in 2005&lt;&#x2F;a&gt;, but we know better now. Letting a user enumerate all the keys in a table is a bad idea. Even if we properly secure our API, auto-increment keys still leak information. Seeing &lt;code&gt;&#x2F;orders&#x2F;43534&lt;&#x2F;code&gt; tells me a lot. And no, starting the order id from some number greater than 1 is not a solution.&lt;&#x2F;p&gt;
&lt;p&gt;Use a uuid. I am not going to argue about performance. &lt;a href=&quot;https:&#x2F;&#x2F;ardentperf.com&#x2F;2024&#x2F;02&#x2F;03&#x2F;uuid-benchmark-war&#x2F;&quot;&gt;Uuids are pretty fast&lt;&#x2F;a&gt;, your database probably fits in RAM and if you do need to scale the database then something like a uuid affords us horizontal scaling options that are very hard to do with an auto-increment primary key.&lt;&#x2F;p&gt;
&lt;p&gt;If someone makes a strong case for the primary key being a ulid, nanoid or some other format then that works for me too. I also don&#x27;t care if the decision is to create every table with an internal id that auto-increments and an external id that is a unique value. Maybe there is an even better solution I have not thought of. Great! I only care that the rails-like framework has decided, by default, the public API uses an id that is safe to share.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;api-first&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#api-first&quot; aria-label=&quot;Anchor link for: api-first&quot;&gt;API First&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A rails-like framework typically uses the model–view–controller (MVC) pattern. One big impediment to establishing conventions is that the &quot;view&quot; has been in a constant state of flux for years as the frontend ecosystem for web development has been fragmented with no clear winner. To make matters worse, the frontend space is much more diverse than it was in 2003. We now have mobile apps, TUIs, IoT, VR and many more interfaces. These frontends often have their own development stories that are not easily integrated with. The common denominator to all of these frontend interfaces is that they need an API. It is also exceedingly common to build APIs that are only called by other APIs. Focus on APIs first and worry about the view layer later.&lt;&#x2F;p&gt;
&lt;p&gt;Being API first is only part of the decision. We have multiple protocols to choose from: REST, GraphQL, gRPC and many more. We need a protocol that can be used for both public and private APIs. We know that public GraphQL APIs have adoption issues. Even &lt;a href=&quot;https:&#x2F;&#x2F;github.blog&#x2F;changelog&#x2F;2022-08-18-deprecation-notice-graphql-for-packages&#x2F;&quot;&gt;Github failed to convince developers to use their GraphQL API&lt;&#x2F;a&gt;. So, GraphQL is out. We also know that gRPC makes heavy use of HTTP&#x2F;2 but &lt;a href=&quot;https:&#x2F;&#x2F;w3techs.com&#x2F;technologies&#x2F;details&#x2F;ce-http2&quot;&gt;the majority of websites still use HTTP&#x2F;1.1&lt;&#x2F;a&gt;. That being said, &lt;a href=&quot;https:&#x2F;&#x2F;caniuse.com&#x2F;?search=HTTP%2F2&quot;&gt;96% of browser support HTTP&#x2F;2&lt;&#x2F;a&gt; so gRPC could be a viable option. I think the main reason to continue to use a RESTful API is that every frontend supports RESTful APIs but not every frontend has the tooling to support gRPC.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;restful-api-specification&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#restful-api-specification&quot; aria-label=&quot;Anchor link for: restful-api-specification&quot;&gt;RESTful API Specification&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If a modern rails-like framework is API first, then it must have an API specification. This specification should be able to generate great looking documentation as well. GraphQL and gRPC are both schema-first, but the typical RESTful API is woefully under-specified.&lt;&#x2F;p&gt;
&lt;p&gt;We can fix this by having the rails-like framework automatically create an OpenAPI specification that can be shared with others and&#x2F;or used to create nice looking documentation. The OpenAPI spec should be generated from the code. I think &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oxidecomputer&#x2F;dropshot&quot;&gt;dropshot&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fastapi&#x2F;fastapi?tab=readme-ov-file#interactive-api-docs&quot;&gt;fastapi&lt;&#x2F;a&gt; do a good job in this area. I am bearish on spec-first API development, but I am only too happy to be proven wrong.&lt;&#x2F;p&gt;
&lt;p&gt;Is OpenAPI perfect? No. Is there a viable alternative? No. Is the OpenAPI specification much better than doing nothing? Yes.&lt;&#x2F;p&gt;
&lt;p&gt;I considered &lt;a href=&quot;https:&#x2F;&#x2F;raml.org&#x2F;&quot;&gt;RAML&lt;&#x2F;a&gt; as an alternative but Salesforce owns it and we should only consider open specifications.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;models-from-upstream-apis&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#models-from-upstream-apis&quot; aria-label=&quot;Anchor link for: models-from-upstream-apis&quot;&gt;Models From Upstream APIs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Scientifically poll developers and ask them what types of projects they dislike the most. I would bet a crisp $100 bill that &quot;third-party integrations&quot; is in the top 3. Why? A mentioned above, &lt;em&gt;the typical RESTful API is woefully under-specified.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Most frameworks models tightly couple their models to the database. Here is an idea: &lt;em&gt;consume an OpenAPI spec to codegen the models&lt;&#x2F;em&gt;. Now, our rails-like framework can both generate and consume OpenAPI spec. This means we can now easily compose applications built with this rails-like framework. Think of the flywheel! The more applications using this API first rails-like framework, the easier it is for developers to do integrations. Internal teams would quickly see this benefit. Imagine SaaS companies using it as a value proposition: &quot;our API is generated by rails-like framework and works seamlessly when consumed by that same rails-like framework&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;This approach also requires better tooling. Most API codegen tools produce low-quality code. My guess is that these tools try to handle every use case an OpenAPI document could have. Better tooling can be made by having strong opinions on what to support. For example, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oxidecomputer&#x2F;progenitor&quot;&gt;progenitor&lt;&#x2F;a&gt; is purpose-built to codegen OpenAPI documents from the aforementioned &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oxidecomputer&#x2F;dropshot&quot;&gt;dropshot&lt;&#x2F;a&gt; framework.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;feature-first-structure&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#feature-first-structure&quot; aria-label=&quot;Anchor link for: feature-first-structure&quot;&gt;Feature First Structure&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Most frameworks use a layer-first structure. Our controllers, models and views are grouped together.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;src&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── controllers&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── models&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;└── views&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As the application grows in size, developers will accidentally couple the layers together making your &lt;a href=&quot;https:&#x2F;&#x2F;www.cortex.io&#x2F;post&#x2F;monoliths-vs-microservices-whats-the-difference&quot;&gt;monolithic application is difficult to scale&lt;&#x2F;a&gt; and harder to refactor. Before we start arguing about monoliths vs micro-services, I want to suggest that we can start with a better default for our project structure: feature first.&lt;&#x2F;p&gt;
&lt;p&gt;A feature-first structure might look something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;src&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;└── features&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    ├── feature1&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    ├── feature2&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    └── feature3&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The controllers, models and views are grouped together by feature. The &lt;a href=&quot;https:&#x2F;&#x2F;codewithandrea.com&#x2F;articles&#x2F;flutter-project-structure&#x2F;&quot;&gt;flutter community&lt;&#x2F;a&gt; is one group that is making feature-first a convention.&lt;&#x2F;p&gt;
&lt;p&gt;Now, a feature first structure is no silver bullet. It is basically domain driven design and people make design mistakes all the time. I believe the upsides outweigh the downsides though. A feature first structure makes it harder to create accidental coupling. And when coupling is inevitably introduced, feature first makes it easier to refactor the code to remove that coupling. Finally, if you go &lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;bliki&#x2F;MonolithFirst.html&quot;&gt;monolith first&lt;&#x2F;a&gt; a feature first structure makes it easier to extract parts of the monolith into separate services should scaling become an issue.&lt;&#x2F;p&gt;
&lt;p&gt;A feature-first approach would almost certainly necessitate examples that show developers how to handle cross cutting concerns, such as authentication. These guides would focus on encouraging simple, local solutions that work for the feature, without forcing generalized abstractions that might not stand the test of time. Developers would grow comfortable with duplicating some code in order to avoid early abstractions. Avoiding premature generalization ensures that the development process stays agile and adaptable, even as the application grows. This approach also empowers teams to revisit abstractions when the patterns and needs become clearer, rather than guessing early and facing rigid, difficult-to-change systems down the road.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;make-decisions-for-modern-application-development&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#make-decisions-for-modern-application-development&quot; aria-label=&quot;Anchor link for: make-decisions-for-modern-application-development&quot;&gt;Make Decisions for Modern Application Development&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A rails-like framework will almost certainly not be successful by simply cloning Ruby on Rails conventions as-is. Application development in 2003 was very different from application development today. Framework authors wanting adoption must establish new conventions that allow developers to get up and running quickly without making many decisions about setup while also avoiding common maintenance pitfalls.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Stream a Body With Trailers in hyper 1.0 and axum 0.7</title>
        <published>2024-04-22T00:00:00+00:00</published>
        <updated>2024-04-22T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/streaming-body-trailing-headers-hyper-1-0-and-axum-0-7/" type="text/html"/>
        <id>https://hermanradtke.com/streaming-body-trailing-headers-hyper-1-0-and-axum-0-7/</id>
        
        <summary type="html">&lt;p&gt;Hyper supports sending HTTP&#x2F;1.1 Chunked Trailer Fields as of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&#x2F;releases&#x2F;tag&#x2F;v1.1.0&quot;&gt;v1.1.0&lt;&#x2F;a&gt;. The &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;http-body&quot;&gt;http-body&lt;&#x2F;a&gt; is now at &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;http-body&#x2F;1.0.0&#x2F;http_body&#x2F;&quot;&gt;v1.0&lt;&#x2F;a&gt; as well and uses frames to allow a stream to return data and trailers.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;Hyper supports sending HTTP&#x2F;1.1 Chunked Trailer Fields as of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&#x2F;releases&#x2F;tag&#x2F;v1.1.0&quot;&gt;v1.1.0&lt;&#x2F;a&gt;. The &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;http-body&quot;&gt;http-body&lt;&#x2F;a&gt; is now at &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;http-body&#x2F;1.0.0&#x2F;http_body&#x2F;&quot;&gt;v1.0&lt;&#x2F;a&gt; as well and uses frames to allow a stream to return data and trailers.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;We were able to write trailer fields in &lt;a href=&quot;&#x2F;streaming-body-trailing-headers-axum-0-6&#x2F;&quot;&gt;Stream a Body With Trailers in axum 0.6&lt;&#x2F;a&gt; by using HTTP&#x2F;2 and writing our own custom body implementation. The hyper ecosystem has expanded trailer support which makes it easier to send trailer fields on both HTTP&#x2F;1.1 and HTTP&#x2F;2 without writing a custom body.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;set-up&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#set-up&quot; aria-label=&quot;Anchor link for: set-up&quot;&gt;Set up&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We start with the basic &lt;a href=&quot;https:&#x2F;&#x2F;hyper.rs&#x2F;guides&#x2F;1&#x2F;server&#x2F;hello-world&#x2F;&quot;&gt;Hello, World!&lt;&#x2F;a&gt; server from the hyper guide. As of this writing, the guide basically implements this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&#x2F;blob&#x2F;226305d0fc78ab780aa5a1084e013a3b0a39e4d8&#x2F;examples&#x2F;hello.rs&quot;&gt;example&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Cargo.toml&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[package]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hyper-send-trailers&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2021&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hyper &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;full&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;full&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http-body-util &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hyper-util &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;full&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;src&#x2F;main.rs&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::convert::Infallible;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::net::SocketAddr;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;http_body_util::Full;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;hyper::body::Bytes;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;hyper::server::conn::http1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;hyper::service::service_fn;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;hyper::{Request, Response};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;hyper_util::rt::TokioIo;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::net::TcpListener;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;(_: Request&amp;lt;hyper::body::Incoming&amp;gt;) -&amp;gt; Result&amp;lt;Response&amp;lt;Full&amp;lt;Bytes&amp;gt;&amp;gt;, Infallible&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(Response::new(Full::new(Bytes::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, World!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error + Send + Sync&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; addr = SocketAddr::from(([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3000&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; listener = TcpListener::bind(addr).await?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(stream, _) = listener.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;accept&lt;&#x2F;span&gt;&lt;span&gt;().await?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; io = TokioIo::new(stream);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        tokio::task::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Err(err) = http1::Builder::new()
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;serve_connection&lt;&#x2F;span&gt;&lt;span&gt;(io, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;service_fn&lt;&#x2F;span&gt;&lt;span&gt;(hello))
&lt;&#x2F;span&gt;&lt;span&gt;                .await
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                eprintln!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error serving connection: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, err);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can now verify our server working:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo run
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.12s
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target&#x2F;debug&#x2F;hyper-send-trailers
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl --raw http:&#x2F;&#x2F;localhost:3000&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;Hello, World!%
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;send-trailer-as-part-of-a-stream&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#send-trailer-as-part-of-a-stream&quot; aria-label=&quot;Anchor link for: send-trailer-as-part-of-a-stream&quot;&gt;Send Trailer As Part of a Stream&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We will now replace the &lt;code&gt;hello&lt;&#x2F;code&gt; handler with one that is both a streaming response and that includes a trailer field after the stream is finished.&lt;&#x2F;p&gt;
&lt;p&gt;First, add tokio-stream as a dependency:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo add tokio-stream
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We then need to modify our imports:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-use http_body_util::Full;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-use hyper::body::Bytes;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+use http_body_util::StreamBody;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+use hyper::body::{Bytes, Frame};
&lt;&#x2F;span&gt;&lt;span&gt; use hyper::server::conn::http1;
&lt;&#x2F;span&gt;&lt;span&gt; use hyper::service::service_fn;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-use hyper::{Request, Response};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+use hyper::{HeaderMap, Request, Response, StatusCode};
&lt;&#x2F;span&gt;&lt;span&gt; use hyper_util::rt::TokioIo;
&lt;&#x2F;span&gt;&lt;span&gt; use tokio::net::TcpListener;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+use tokio::sync::mpsc;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+use tokio_stream::wrappers::ReceiverStream;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are replacing the &lt;code&gt;Full&lt;&#x2F;code&gt; body implementation with the &lt;code&gt;StreamBody&lt;&#x2F;code&gt; implementation. We also need to import the &lt;code&gt;Frame&lt;&#x2F;code&gt; type from the body to inform hyper what kind of streaming data is being sent. Last, we import &lt;code&gt;tokio::sync::mpsc&lt;&#x2F;code&gt; to send data across tasks and &lt;code&gt;tokio_stream::wrappers::ReceiverStream&lt;&#x2F;code&gt; in order to stream the output received from the task.&lt;&#x2F;p&gt;
&lt;p&gt;Our handler will now look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Data = Result&amp;lt;Frame&amp;lt;Bytes&amp;gt;, Infallible&amp;gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ResponseBody = StreamBody&amp;lt;ReceiverStream&amp;lt;Data&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;(_: Request&amp;lt;hyper::body::Incoming&amp;gt;) -&amp;gt; Result&amp;lt;Response&amp;lt;ResponseBody&amp;gt;, Infallible&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx, rx) = mpsc::channel::&amp;lt;Data&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; some async task
&lt;&#x2F;span&gt;&lt;span&gt;    tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; some expensive operations
&lt;&#x2F;span&gt;&lt;span&gt;        tx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(Ok(Frame::data(Bytes::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))))
&lt;&#x2F;span&gt;&lt;span&gt;            .await
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        tokio::time::sleep(std::time::Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;        tx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(Ok(Frame::data(Bytes::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))))
&lt;&#x2F;span&gt;&lt;span&gt;            .await
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; headers based off expensive operation
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; headers = HeaderMap::new();
&lt;&#x2F;span&gt;&lt;span&gt;        headers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chunky-trailer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        tx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(Ok(Frame::trailers(headers))).await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream = ReceiverStream::new(rx);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; body = StreamBody::new(stream);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(Response::builder()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;(StatusCode::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;OK&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Trailer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chunky-trailer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; trailers must be declared
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;(body)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The types get complicated, so I chose to use some type aliases to make it easier to understand. The &lt;code&gt;Data&lt;&#x2F;code&gt; type is the data being produced by our task and will be sent over the &lt;code&gt;mpsc::channel&lt;&#x2F;code&gt;. The &lt;code&gt;ResponseBody&lt;&#x2F;code&gt; type is our stream of &lt;code&gt;Data&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We create a bounded &lt;code&gt;mpsc::channel&lt;&#x2F;code&gt; to send data from a task we will spawn to the response. We spawn a task, which represents any data we want to stream. For this example, I am sending &lt;code&gt;hello...&lt;&#x2F;code&gt;, sleeping for 2 seconds and then sending &lt;code&gt;world&lt;&#x2F;code&gt;. We use &lt;code&gt;Frame::data&lt;&#x2F;code&gt; to tell hyper that these bytes are the chunked body. Once we are finished sending data, we can include trailer fields. I am sending back a header map containing a single trailer. We use &lt;code&gt;Frame::trailers&lt;&#x2F;code&gt; to tell hyper that these headers are the trailer fields.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;tokio_stream&lt;&#x2F;code&gt; crate allows us to convert the receiving side of the &lt;code&gt;mpsc::channel&lt;&#x2F;code&gt; into a stream. We then create a &lt;code&gt;StreamBody&lt;&#x2F;code&gt;, which implements the &lt;code&gt;Body&lt;&#x2F;code&gt; trait hyper requires, from the receiving stream.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we build our response. Hyper strictly follows the HTTP&#x2F;1.1 spec and will only include chunked trailer fields that are specfied in the &lt;code&gt;Trailer&lt;&#x2F;code&gt; response header.We can use curl to verify that our trailer header is sent.&lt;&#x2F;p&gt;
&lt;p&gt;That is it! We can use curl to verify that our trailer header is sent:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl --raw -H &amp;quot;TE: trailers&amp;quot; http:&#x2F;&#x2F;localhost:3000&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;8
&lt;&#x2F;span&gt;&lt;span&gt;hello...
&lt;&#x2F;span&gt;&lt;span&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;world
&lt;&#x2F;span&gt;&lt;span&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;chunky-trailer: foo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use the &lt;code&gt;--raw&lt;&#x2F;code&gt; flag to see the individual chunks and trailer fields returned from our server. The &lt;code&gt;TE: trailers&lt;&#x2F;code&gt; header is how the client informs the server that it is willing to recieve headers and is required in order for hyper to send the trailer fields.&lt;&#x2F;p&gt;
&lt;p&gt;You can find the complete source code at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;axum-trailers&#x2F;tree&#x2F;hyper-send-trailers&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;axum-trailers&#x2F;tree&#x2F;hyper-send-trailers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-axum-and-intoresponse&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#using-axum-and-intoresponse&quot; aria-label=&quot;Anchor link for: using-axum-and-intoresponse&quot;&gt;Using axum and IntoResponse&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Using axum provides us with a really nice quality of life improvement: &lt;code&gt;IntoResponse&lt;&#x2F;code&gt;. This trait allows us to omit a lot of the complicated types that start showing up when we have complex &lt;code&gt;Body&lt;&#x2F;code&gt; implementations and are using futures.&lt;&#x2F;p&gt;
&lt;p&gt;We can change our &lt;code&gt;hello&lt;&#x2F;code&gt; handler from&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;(_: Request&amp;lt;hyper::body::Incoming&amp;gt;) -&amp;gt; Result&amp;lt;Response&amp;lt;ResponseBody&amp;gt;, Infallible&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl IntoResponse
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which is much easier to work with, especially when we start dealing with futures.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trailer-field-without-streams&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#trailer-field-without-streams&quot; aria-label=&quot;Anchor link for: trailer-field-without-streams&quot;&gt;Trailer Field Without Streams&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Suppose we want to send a trailer field without a stream. We can wrap our &lt;code&gt;Body&lt;&#x2F;code&gt; implementation with an adapter that allows us to send trailer fields using a future. I am going to use axum for this example to avoid any complex types.&lt;&#x2F;p&gt;
&lt;p&gt;We need to import &lt;code&gt;BodyExt&lt;&#x2F;code&gt; from the &lt;code&gt;http_body_util&lt;&#x2F;code&gt; crate. This trait allows us to call &lt;code&gt;with_trailers&lt;&#x2F;code&gt; on a type that implements &lt;code&gt;Body&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-use http_body_util::StreamBody;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+use http_body_util::{BodyExt, StreamBody};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, we can use &lt;code&gt;with_trailers&lt;&#x2F;code&gt; to create a future that returns a header map:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; body = body.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_trailers&lt;&#x2F;span&gt;&lt;span&gt;(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; headers = HeaderMap::new();
&lt;&#x2F;span&gt;&lt;span&gt;    headers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;trailer2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    Some(Ok(headers))
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, remember to update the &lt;code&gt;Trailer&lt;&#x2F;code&gt; field to specify the &lt;code&gt;trailer2&lt;&#x2F;code&gt; header:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;.status(StatusCode::OK)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-.header(&amp;quot;Trailer&amp;quot;, &amp;quot;chunky-trailer&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+.header(&amp;quot;Trailer&amp;quot;, &amp;quot;chunky-trailer, trailer2&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;.body(body)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we send a client request, we will get back both headers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;one as part of our stream&lt;&#x2F;li&gt;
&lt;li&gt;a second one that comes from a separate future&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl --raw -H &amp;quot;TE: trailers&amp;quot; http:&#x2F;&#x2F;localhost:3000&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;8
&lt;&#x2F;span&gt;&lt;span&gt;hello...
&lt;&#x2F;span&gt;&lt;span&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;world
&lt;&#x2F;span&gt;&lt;span&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;chunky-trailer: foo
&lt;&#x2F;span&gt;&lt;span&gt;trailer2: bar
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can find the complete source code at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;axum-trailers&#x2F;tree&#x2F;axum-0-7&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;axum-trailers&#x2F;tree&#x2F;axum-0-7&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Developer Experience: Fast Startup Is Not The Only Speed Metric</title>
        <published>2024-01-14T00:00:00+00:00</published>
        <updated>2024-01-14T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/developer-experience-fast-startup-is-not-the-only-speed-metric/" type="text/html"/>
        <id>https://hermanradtke.com/developer-experience-fast-startup-is-not-the-only-speed-metric/</id>
        
        <summary type="html">&lt;p&gt;I was reading &lt;a href=&quot;https:&#x2F;&#x2F;registerspill.thorstenball.com&#x2F;p&#x2F;how-fast-is-your-shell&quot;&gt;How fast is your shell?&lt;&#x2F;a&gt; and it got me thinking about the difference types of speed developers prioritize. A lot of articles and advice focus on initial startup, which can be thought of as &lt;em&gt;acceleration&lt;&#x2F;em&gt;. We should also consider, what happens after we are done accelerating, how easy it is to maintain our velocity.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;I was reading &lt;a href=&quot;https:&#x2F;&#x2F;registerspill.thorstenball.com&#x2F;p&#x2F;how-fast-is-your-shell&quot;&gt;How fast is your shell?&lt;&#x2F;a&gt; and it got me thinking about the difference types of speed developers prioritize. A lot of articles and advice focus on initial startup, which can be thought of as &lt;em&gt;acceleration&lt;&#x2F;em&gt;. We should also consider, what happens after we are done accelerating, how easy it is to maintain our velocity.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Look, I am biased towards fast startup times. Here is my zsh startup time:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ time zsh -i -c exit
&lt;&#x2F;span&gt;&lt;span&gt;zsh -i -c exit  0.04s user 0.02s system 94% cpu 0.063 total
&lt;&#x2F;span&gt;&lt;span&gt;$ time zsh -i -c exit
&lt;&#x2F;span&gt;&lt;span&gt;zsh -i -c exit  0.04s user 0.02s system 95% cpu 0.066 total
&lt;&#x2F;span&gt;&lt;span&gt;$ time zsh -i -c exit
&lt;&#x2F;span&gt;&lt;span&gt;zsh -i -c exit  0.04s user 0.02s system 93% cpu 0.067 total
&lt;&#x2F;span&gt;&lt;span&gt;$ time zsh -i -c exit
&lt;&#x2F;span&gt;&lt;span&gt;zsh -i -c exit  0.04s user 0.02s system 94% cpu 0.069 total
&lt;&#x2F;span&gt;&lt;span&gt;$ time zsh -i -c exit
&lt;&#x2F;span&gt;&lt;span&gt;zsh -i -c exit  0.04s user 0.02s system 93% cpu 0.065 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I am open and close my my shell quite often. As a result, my shell configuration is fairly minimal. I generally omit features, like custom completions, to achieve this. This is not the only way people work.&lt;&#x2F;p&gt;
&lt;p&gt;When I pair with some of my colleagues, I observe that they have a different style of working. They open VS Code and then open a single shell within the VS Code UI. They usually leave VS Code open all day and use that one shell. The initial startup time of VS Code and the the shell within VS Code is not that important to them. What is important to them is how easily they can maintain their productivity level of the course of the day.&lt;&#x2F;p&gt;
&lt;p&gt;People that have a long-loved shell, are probably better off adding additional functionality, such as custom completions. These additional features help maintain their productivity velocity. My suggestions to them about improving their shell startup time will often seem unimportantto them. They are optimizing for a different outcome than I am.&lt;&#x2F;p&gt;
&lt;p&gt;A while back, I switched from vim to neovim. Prior to the switch, I kept my vim configuration pretty minimal to avoid slowing down vim&#x27;s startup time. I sacraficed some of the more advanced, heavier plugins as a result. I was fine with this trade-off. Neovim makes it much easier to lazy-load plugins, which allows me to maintain a fast startup time while also providing me access to features, such as languages servers.&lt;&#x2F;p&gt;
&lt;p&gt;I am not lazy loading anything in zsh. Maybe I should? I found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;qoomon&#x2F;zsh-lazyload&quot;&gt;zsh-lazyload&lt;&#x2F;a&gt; from a quick Google search, but I have not looked into it closer. I know fish has &lt;a href=&quot;https:&#x2F;&#x2F;fishshell.com&#x2F;docs&#x2F;current&#x2F;tutorial.html#autoloading-functions&quot;&gt;autoloading function&lt;&#x2F;a&gt; which is basically lazy loading. The downside of lazy loading approaches is the additional complexity. I will only consider lazy loading things in my shell if it is relatively straight-forward and a first-class concern of the shell.&lt;&#x2F;p&gt;
&lt;p&gt;I like the &lt;a href=&quot;https:&#x2F;&#x2F;registerspill.thorstenball.com&#x2F;p&#x2F;how-fast-is-your-shell&quot;&gt;How fast is your shell?&lt;&#x2F;a&gt; article because it matches my own development style. I also try to keep in mind that others have styles of working that require a different set of optimizations. Ideally, we can be creative enough to get fast startup times and access to all the features we want using concepts like lazy-loading.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Proving getenv Does Not Make a Syscall</title>
        <published>2024-01-09T00:00:00+00:00</published>
        <updated>2024-01-09T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/proving-getenv-does-not-make-syscall/" type="text/html"/>
        <id>https://hermanradtke.com/proving-getenv-does-not-make-syscall/</id>
        
        <summary type="html">&lt;p&gt;I saw this statement in an accepted answer on Stack Overflow:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Retrieving the value of an environment variable will incur a system call.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;7460584&#x2F;775246&quot;&gt;source&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This answer surprised me as I did not think this was the case. There is an edit farther down that has links to other Stack Overflow posts saying get &lt;code&gt;getenv&lt;&#x2F;code&gt; does not make a syscall. Let us prove it ourselves.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;I saw this statement in an accepted answer on Stack Overflow:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Retrieving the value of an environment variable will incur a system call.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;7460584&#x2F;775246&quot;&gt;source&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This answer surprised me as I did not think this was the case. There is an edit farther down that has links to other Stack Overflow posts saying get &lt;code&gt;getenv&lt;&#x2F;code&gt; does not make a syscall. Let us prove it ourselves.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Here is a small program that reads an environment variable and prints out the value.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v = ::std::env::var(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;USER&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;USER: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, v);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo build
&lt;&#x2F;span&gt;&lt;span&gt;$ .&#x2F;target&#x2F;debug&#x2F;env-syscall-test
&lt;&#x2F;span&gt;&lt;span&gt;USER: herman
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can use &lt;code&gt;dtruss&lt;&#x2F;code&gt; to print out all the syscalls our program makes.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo dtruss .&#x2F;target&#x2F;debug&#x2F;env-syscall-test
&lt;&#x2F;span&gt;&lt;span&gt;dtrace: system integrity protection is on, some features will not be available
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;SYSCALL(args) 		 = return
&lt;&#x2F;span&gt;&lt;span&gt;USER: root
&lt;&#x2F;span&gt;&lt;span&gt;access(&amp;quot;&#x2F;AppleInternal&#x2F;XBS&#x2F;.isChrooted\0&amp;quot;, 0x0, 0x0)		 = -1 2
&lt;&#x2F;span&gt;&lt;span&gt;...elided
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;dtruss&lt;&#x2F;code&gt; output shows that our program prints &lt;code&gt;USER: root&lt;&#x2F;code&gt; without making any syscall.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Profiling Node.js in Production</title>
        <published>2024-01-07T00:00:00+00:00</published>
        <updated>2024-01-07T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/profiling-node-in-production/" type="text/html"/>
        <id>https://hermanradtke.com/profiling-node-in-production/</id>
        
        <summary type="html">&lt;p&gt;At work, I lead a team responsible for a Node.js service that serves a lot of GraphQL queries. We recently noticed some servers in the cluster were running much slower than others. We had used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;davidmarkclements&#x2F;0x&quot;&gt;0x&lt;&#x2F;a&gt; in the past to profile Node.js services locally. In this case, we could not identify the problem locally and needed a solution to profile Node.js in production to identify the cause of the slowdown.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;At work, I lead a team responsible for a Node.js service that serves a lot of GraphQL queries. We recently noticed some servers in the cluster were running much slower than others. We had used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;davidmarkclements&#x2F;0x&quot;&gt;0x&lt;&#x2F;a&gt; in the past to profile Node.js services locally. In this case, we could not identify the problem locally and needed a solution to profile Node.js in production to identify the cause of the slowdown.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;To profile in production, I wanted to expose a route that would enable profiling for a short amount of time and then give us access to the results. Working with another engineer, we decided on the following requirements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the route would only be accessible through an internal port because our application was internet facing&lt;&#x2F;li&gt;
&lt;li&gt;the data would be returned as part of the route when the profiling was finished&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;details&gt;
  &lt;summary&gt;Node and package versions used in this article&lt;&#x2F;summary&gt;
&lt;ul&gt;
&lt;li&gt;node - 18.12.0&lt;&#x2F;li&gt;
&lt;li&gt;express - 4.18.2&lt;&#x2F;li&gt;
&lt;li&gt;v8-profiler-next - 1.10.0&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;setup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#setup&quot; aria-label=&quot;Anchor link for: setup&quot;&gt;Setup&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let us create a simple express app that represents the Node.js service we want to profile.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;express &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;internally-enable-profiling-at-runtime&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#internally-enable-profiling-at-runtime&quot; aria-label=&quot;Anchor link for: internally-enable-profiling-at-runtime&quot;&gt;Internally Enable Profiling at Runtime&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I use &lt;code&gt;node --prof &#x2F;path&#x2F;to&#x2F;main.js&lt;&#x2F;code&gt; when profiling locally. I use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;davidmarkclements&#x2F;0x&quot;&gt;0x&lt;&#x2F;a&gt; which calls the application using the &lt;code&gt;--prof&lt;&#x2F;code&gt; flag and automatically generates a flamegraph. The problem is that we want to profile a running service in production for a few seconds.&lt;&#x2F;p&gt;
&lt;p&gt;We found two packages on npm that can enable profiling at runtime&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyj1991&#x2F;v8-profiler-next&quot;&gt;hyj1991&#x2F;v8-profiler-next&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;node-inspector&#x2F;v8-profiler&quot;&gt;node-inspector&#x2F;v8-profiler&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After reading &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;node-inspector&#x2F;v8-profiler&#x2F;issues&#x2F;137&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;node-inspector&#x2F;v8-profiler&#x2F;issues&#x2F;137&lt;&#x2F;a&gt;, we chose &lt;code&gt;v8-profiler-next&lt;&#x2F;code&gt; because our Node.js is running node v20.&lt;&#x2F;p&gt;
&lt;p&gt;Our production Node.js service is internet facing. We only want our new profiling route available on our internal VPN. Our example express app listens for requests on port &lt;code&gt;8000&lt;&#x2F;code&gt;, which we can pretend is our public port. We create a separate express app listening on port &lt;code&gt;8001&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v8Profiler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v8-profiler-next&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v8Profiler&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setGenerateType&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mgmt &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mgmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;profile&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeoutMs &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;= `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;myapp-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;()}.cpuprofile&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v8Profiler&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;startProfiling&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setTimeout&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;profile &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v8Profiler&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;stopProfiling&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;profile&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;export&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attachment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;profile&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeoutMs&lt;&#x2F;span&gt;&lt;span&gt;); 
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mgmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8001&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;details&gt;
  &lt;summary&gt;Entire main.js file&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;express &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v8Profiler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v8-profiler-next&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v8Profiler&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setGenerateType&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mgmt &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mgmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;profile&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeoutMs &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;= `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;myapp-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;()}.cpuprofile&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v8Profiler&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;startProfiling&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setTimeout&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;profile &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v8Profiler&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;stopProfiling&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;profile&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;export&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attachment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;profile&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeoutMs&lt;&#x2F;span&gt;&lt;span&gt;); 
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mgmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8001&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;We set &lt;code&gt;v8Profiler.setGenerateType(1);&lt;&#x2F;code&gt; to use the new &lt;em&gt;tree&lt;&#x2F;em&gt; profiling format. Most modern tooling that analyzes CPU profiles prefer this format.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;&#x2F;profile&lt;&#x2F;code&gt; route will enable profiling and then return the output. We allow a &lt;code&gt;timeout&lt;&#x2F;code&gt; query parameter to control how long the profiling would run. We want to minimize the amount of time we profile for two reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;profiling slows the service down&lt;&#x2F;li&gt;
&lt;li&gt;the output can get quite large&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Our production service receives a lot of traffic, so a few seconds of profile output was more than enough to start analyzing.&lt;&#x2F;p&gt;
&lt;p&gt;We give each profile a name so we do not get them confused. Our example app uses &lt;code&gt;myapp-${Date.now()}.cpuprofile&lt;&#x2F;code&gt;. You may also consider including the host name in the filename if available. The &lt;code&gt;.cpuprofile&lt;&#x2F;code&gt;  extension is the convention for profiling output.&lt;&#x2F;p&gt;
&lt;p&gt;After the profile is complete, the profile output is sent back in the response. We use &lt;code&gt;res.attachment&lt;&#x2F;code&gt; to add the &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Headers&#x2F;Content-Disposition&quot;&gt;Content-Disposition&lt;&#x2F;a&gt; header to the response to indicate the content should be downloaded and saved locally.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;profiling-the-service&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#profiling-the-service&quot; aria-label=&quot;Anchor link for: profiling-the-service&quot;&gt;Profiling the Service&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We first start our Node.js application using &lt;code&gt;node main.js&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We can call our application public routes on port &lt;code&gt;8000&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;$ curl localhost:8000&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;hello world%
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can profile our application using port &lt;code&gt;8001&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl localhost:8001&#x2F;profile --remote-name --remote-header-name --silent
&lt;&#x2F;span&gt;&lt;span&gt;$ ls myapp-1704639385130.cpuprofile
&lt;&#x2F;span&gt;&lt;span&gt;myapp-1704639385130.cpuprofile
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;--remote-name&lt;&#x2F;code&gt; option instructs &lt;code&gt;curl&lt;&#x2F;code&gt; to save that data into a local file instead of writing to &lt;code&gt;stdoout&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;--remote-header-name&lt;&#x2F;code&gt; option instructs &lt;code&gt;curl&lt;&#x2F;code&gt; to use the &lt;code&gt;Content-Disposition&lt;&#x2F;code&gt; filename instead of extracting a filename from the URL.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;--silent&lt;&#x2F;code&gt; option instructs &lt;code&gt;curl&lt;&#x2F;code&gt; to disable the progress meter. This is my personal preference and not required.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;internal-port-in-production&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#internal-port-in-production&quot; aria-label=&quot;Anchor link for: internal-port-in-production&quot;&gt;Internal Port in Production&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In order to use profile in production, we need to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;identify the server we want to profile&lt;&#x2F;li&gt;
&lt;li&gt;get network access to send a request to that server&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In our case, our Node.js service emits telemetry that is aggregated into dashboards. Using these dashboards, we were able to identify which servers were using more CPU than the others.&lt;&#x2F;p&gt;
&lt;p&gt;Once we identified the server, we were able to vpn into the production network and use some &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;kubectl&#x2F;&quot;&gt;kubectl&lt;&#x2F;a&gt; commands to send requests a specific server on a specific port.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;analyzing-the-cpu-profile-using-flamegraphs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#analyzing-the-cpu-profile-using-flamegraphs&quot; aria-label=&quot;Anchor link for: analyzing-the-cpu-profile-using-flamegraphs&quot;&gt;Analyzing the CPU Profile Using Flamegraphs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We spent some time searching for the best way to view the results as a &lt;a href=&quot;https:&#x2F;&#x2F;www.brendangregg.com&#x2F;flamegraphs.html&quot;&gt;flamegraph&lt;&#x2F;a&gt;. I was used to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;davidmarkclements&#x2F;0x&quot;&gt;0x&lt;&#x2F;a&gt; handling this by default. I liked the output of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;davidmarkclements&#x2F;0x&quot;&gt;0x&lt;&#x2F;a&gt; but I did not want to hack the code to render the results for an external file.&lt;&#x2F;p&gt;
&lt;p&gt;A lot of the suggestions I read said to use Chrome&#x27;s &lt;code&gt;Profile&lt;&#x2F;code&gt; tab. Newer versions of Chrome no longer have this tab and I could not get the &lt;code&gt;Performance Insights&lt;&#x2F;code&gt; tab render my &lt;code&gt;.cpuprofile&lt;&#x2F;code&gt; files. Other suggestions were to manually convert the file into an svg image. A svg file is fine, but I wanted something a little better.&lt;&#x2F;p&gt;
&lt;p&gt;I tried &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;thlorenz&#x2F;flamegraph&quot;&gt;thlorenz&#x2F;flamegraph&lt;&#x2F;a&gt; but I received an error when I tried to use it and gave up after a few minutes.&lt;&#x2F;p&gt;
&lt;p&gt;I happened to stumble upon &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jlfwong&#x2F;speedscope&quot;&gt;jlfwong&#x2F;speedscope&lt;&#x2F;a&gt; which was exactly what I was looking for. It is easy to internally install and use. If you are working on open source you can use &lt;a href=&quot;https:&#x2F;&#x2F;www.speedscope.app&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.speedscope.app&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Once we were able to view the &lt;code&gt;.cpuprofile&lt;&#x2F;code&gt; flamegraph&#x27;s we quickly identified that our  &lt;a href=&quot;https:&#x2F;&#x2F;www.apollographql.com&#x2F;docs&#x2F;apollo-server&#x2F;data&#x2F;subscriptions&quot;&gt;Apollo Server - Subscription&lt;&#x2F;a&gt; implementation for was the culprit. We were using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;davidyaha&#x2F;graphql-redis-subscriptions&quot;&gt;davidyaha&#x2F;graphql-redis-subscriptions&lt;&#x2F;a&gt; to load balance subscriptions across the cluster and it was using a lot of CPU, possibly due to the use of &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;AsyncGenerator&quot;&gt;async generators&lt;&#x2F;a&gt; which have had known performance issues. We are using node v20 in production and supposedly those performance are fixed.&lt;&#x2F;p&gt;
&lt;p&gt;The issue was that when a particular server handled too many subscriptions, then it slowed way down. We are still investigating and changed implementations in the meantime. The cluster is now performing much better.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;addendum&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#addendum&quot; aria-label=&quot;Anchor link for: addendum&quot;&gt;Addendum&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;startprofiling-options&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#startprofiling-options&quot; aria-label=&quot;Anchor link for: startprofiling-options&quot;&gt;startProfiling Options&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I noticed the &lt;code&gt;startProfiling&lt;&#x2F;code&gt; function accepts three parameters:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;startProfiling&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;?: string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;recsamples&lt;&#x2F;span&gt;&lt;span&gt;?: boolean, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mode&lt;&#x2F;span&gt;&lt;span&gt;?: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;): void;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I could not find any documentation on what the &lt;code&gt;recsamples&lt;&#x2F;code&gt; and &lt;code&gt;mode&lt;&#x2F;code&gt; options did though. The default value for &lt;code&gt;recsamples&lt;&#x2F;code&gt; is &lt;code&gt;true&lt;&#x2F;code&gt; and for &lt;code&gt;mode&lt;&#x2F;code&gt; is 0.&lt;&#x2F;p&gt;
&lt;p&gt;I dug through the code and eventually found the answer to &lt;code&gt;recsamples&lt;&#x2F;code&gt; in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;v8&#x2F;v8&#x2F;blob&#x2F;10.1.10&#x2F;include&#x2F;v8-profiler.h#L387-L388&quot;&gt;v8-profiler.h&lt;&#x2F;a&gt; which says&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;|record_samples| parameter controls whether individual samples should be recorded in addition to the aggregated tree&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I also found the answer to &lt;code&gt;mode&lt;&#x2F;code&gt; in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyj1991&#x2F;v8-profiler-next&#x2F;blob&#x2F;ba0b6b9c46b6469466da5e995b7cb4099de1a5c1&#x2F;src&#x2F;cpu_profiler&#x2F;cpu_profiler.cc#L68-L75&quot;&gt;cpu-profiler.cc&lt;&#x2F;a&gt; which toggle for eager vs lazy logging.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Stream a Body With Trailers in axum 0.6</title>
        <published>2023-10-19T00:00:00+00:00</published>
        <updated>2023-10-19T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/streaming-body-trailing-headers-axum-0-6/" type="text/html"/>
        <id>https://hermanradtke.com/streaming-body-trailing-headers-axum-0-6/</id>
        
        <summary type="html">&lt;p&gt;Hyper is designed to support streaming bodies. The current version of axum, v0.6, supports streaming a response. If we want to include &lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc7230#section-4.4&quot;&gt;trailers&lt;&#x2F;a&gt; (sometimes called &quot;trailing headers&quot;) then we need to implement our own custom body.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;Hyper is designed to support streaming bodies. The current version of axum, v0.6, supports streaming a response. If we want to include &lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc7230#section-4.4&quot;&gt;trailers&lt;&#x2F;a&gt; (sometimes called &quot;trailing headers&quot;) then we need to implement our own custom body.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Caveats:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The custom body implementation only works in axum 0.6, which uses http-body 0.4.4. The http-body crate changed in v1.0.0-rc.2. The concept is the same, but the custom &lt;code&gt;StreamBody&lt;&#x2F;code&gt; type will be different.&lt;&#x2F;li&gt;
&lt;li&gt;Trailers are only supported in hyper using HTTP&#x2F;2. You can monitor https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&#x2F;issues&#x2F;2719 for HTTP&#x2F;1.1 support.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you want to send trailer headers in HTTP&#x2F;1.1 or you do not want to implement your own &lt;code&gt;Body&lt;&#x2F;code&gt;, please refer to &lt;a href=&quot;&#x2F;streaming-body-trailing-headers-hyper-1-0-and-axum-0-7&#x2F;&quot;&gt;Stream a Body With Trailers in hyper 1.0 and axum 0.7&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;set-up&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#set-up&quot; aria-label=&quot;Anchor link for: set-up&quot;&gt;Set up&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In order to send trailers, we need an axum server that uses HTTP&#x2F;2. Also, most implementations of HTTP&#x2F;2 require TLS. Let us start from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;axum&#x2F;tree&#x2F;1e5be5bb693f825ece664518f3aa6794f03bfec6&#x2F;examples&#x2F;tls-rustls&quot;&gt;axum&#x2F;examples&#x2F;tls-rustlls&lt;&#x2F;a&gt;. This will give us a working HTTP&#x2F;2 server that uses self-signed TLS certificates.&lt;&#x2F;p&gt;
&lt;p&gt;We need to make a few changes to the &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; in order for the example to work:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt; [package]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-name = &amp;quot;example-tls-rustls&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+name = &amp;quot;axum-trailers&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; version = &amp;quot;0.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; edition = &amp;quot;2021&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; publish = false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; [dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-axum = { path = &amp;quot;..&#x2F;..&#x2F;axum&amp;quot; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+axum = { version = &amp;quot;0.6.20&amp;quot;, features = [&amp;quot;http2&amp;quot;] }
&lt;&#x2F;span&gt;&lt;span&gt; axum-server = { version = &amp;quot;0.3&amp;quot;, features = [&amp;quot;tls-rustls&amp;quot;] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can now verify our server working:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo run
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling axum-trailers v0.1.0 (&#x2F;Users&#x2F;herman&#x2F;Code&#x2F;axum-trailers)
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev [unoptimized + debuginfo] target(s) in 3.65s
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target&#x2F;debug&#x2F;axum-trailers`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl -k https:&#x2F;&#x2F;localhost:3000
&lt;&#x2F;span&gt;&lt;span&gt;Hello, World!%
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;streaming-body&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#streaming-body&quot; aria-label=&quot;Anchor link for: streaming-body&quot;&gt;Streaming Body&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Before sending trailers, we need to change our &lt;code&gt;handler&lt;&#x2F;code&gt; function to stream a response. First, add &lt;code&gt;tokio-stream&lt;&#x2F;code&gt; as a dependency:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo add tokio-stream
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We then need to modify our imports:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt; use axum::{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    body::StreamBody,
&lt;&#x2F;span&gt;&lt;span&gt;     extract::Host,
&lt;&#x2F;span&gt;&lt;span&gt;     handler::HandlerWithoutStateExt,
&lt;&#x2F;span&gt;&lt;span&gt;     http::{StatusCode, Uri},
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    response::IntoResponse,
&lt;&#x2F;span&gt;&lt;span&gt;     response::Redirect,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    response::Response,
&lt;&#x2F;span&gt;&lt;span&gt;     routing::get,
&lt;&#x2F;span&gt;&lt;span&gt;     BoxError, Router,
&lt;&#x2F;span&gt;&lt;span&gt; };
&lt;&#x2F;span&gt;&lt;span&gt; use axum_server::tls_rustls::RustlsConfig;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-use std::{net::SocketAddr, path::PathBuf};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+use std::{convert::Infallible, net::SocketAddr, path::PathBuf};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+use tokio::sync::mpsc;
&lt;&#x2F;span&gt;&lt;span&gt; use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, we can replace the existing handler with one that streams a body:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl IntoResponse {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx, rx) = mpsc::channel::&amp;lt;Result&amp;lt;String, Infallible&amp;gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;       tx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(Ok(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;())).await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;       tokio::time::sleep(std::time::Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;       tx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(Ok(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;())).await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;   });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream = tokio_stream::wrappers::ReceiverStream::new(rx);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; body = StreamBody::new(stream);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   Response::builder()
&lt;&#x2F;span&gt;&lt;span&gt;       .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;(StatusCode::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;OK&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;       .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;(body)
&lt;&#x2F;span&gt;&lt;span&gt;       .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We spawn a &lt;em&gt;task&lt;&#x2F;em&gt; that will send &lt;code&gt;hello...&lt;&#x2F;code&gt;, wait 2 seconds and then send &lt;code&gt;world&lt;&#x2F;code&gt;. Hyper knows how to correctly process a stream, but does not know what do with the &lt;em&gt;receiver&lt;&#x2F;em&gt; from the &lt;code&gt;mpsc::channel&lt;&#x2F;code&gt;. We use &lt;code&gt;tokio-stream&lt;&#x2F;code&gt; to convert the receiver into a stream and use that as our response body.&lt;&#x2F;p&gt;
&lt;p&gt;Note: HTTP&#x2F;2 does not use a &lt;code&gt;Transfer-Encoding&lt;&#x2F;code&gt; header. You can add one, but hyper will properly strip it out.&lt;&#x2F;p&gt;
&lt;p&gt;We can test that our response is now streaming a body using curl.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl -k --no-buffer https:&#x2F;&#x2F;localhost:3000&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;hello...world%
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the &lt;code&gt;--no-buffer&lt;&#x2F;code&gt; flag, you should notice a pause between &lt;code&gt;hello...&lt;&#x2F;code&gt; and &lt;code&gt;world&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sending-trailers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sending-trailers&quot; aria-label=&quot;Anchor link for: sending-trailers&quot;&gt;Sending Trailers&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In http-body v0.4.4, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;http-body&#x2F;blob&#x2F;a97da649b6dc93660931fc6f0bdb6aa2db64e50d&#x2F;src&#x2F;lib.rs#L56-L62&quot;&gt;Body&lt;&#x2F;a&gt; trait has a &lt;code&gt;poll_trailers&lt;&#x2F;code&gt; method handles the sending of trailers at the end of the body. In axum v0.6, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;axum&#x2F;blob&#x2F;1e5be5bb693f825ece664518f3aa6794f03bfec6&#x2F;axum&#x2F;src&#x2F;body&#x2F;stream_body.rs&quot;&gt;StreamBody&lt;&#x2F;a&gt; always returns &lt;code&gt;None&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;poll_trailers&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: Pin&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_cx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Context&amp;lt;&amp;#39;_&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Poll&amp;lt;Result&amp;lt;Option&amp;lt;HeaderMap&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Poll::Ready(Ok(None))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;custom-streambody&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#custom-streambody&quot; aria-label=&quot;Anchor link for: custom-streambody&quot;&gt;Custom &lt;code&gt;StreamBody&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;We can start from axum&#x27;s &lt;code&gt;StreamBody&lt;&#x2F;code&gt; implementation and add support for trailers.&lt;&#x2F;p&gt;
&lt;p&gt;Copy the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;axum&#x2F;blob&#x2F;1e5be5bb693f825ece664518f3aa6794f03bfec6&#x2F;axum&#x2F;src&#x2F;body&#x2F;stream_body.rs&quot;&gt;StreamBody&lt;&#x2F;a&gt; implementation from axum to our server:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;curl --silent &amp;quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;tokio-rs&#x2F;axum&#x2F;1e5be5bb693f825ece664518f3aa6794f03bfec6&#x2F;axum&#x2F;src&#x2F;body&#x2F;stream_body.rs&amp;quot; --output src&#x2F;stream_body.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We need to make some changes to the import statments in &lt;code&gt;src&#x2F;stream_body.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Rename &lt;code&gt;crate&lt;&#x2F;code&gt; to &lt;code&gt;axum&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Remove &lt;code&gt;use http::HeaderMap&lt;&#x2F;code&gt; as axum re-exports this dependency&lt;&#x2F;li&gt;
&lt;li&gt;Add &lt;code&gt;http::HeaderMap&lt;&#x2F;code&gt; to the existing &lt;code&gt;use axum { ... }&lt;&#x2F;code&gt; import.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-use crate::{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+use axum::{
&lt;&#x2F;span&gt;&lt;span&gt;     body::{self, Bytes, HttpBody},
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    http::HeaderMap,
&lt;&#x2F;span&gt;&lt;span&gt;     response::{IntoResponse, Response},
&lt;&#x2F;span&gt;&lt;span&gt;     BoxError, Error,
&lt;&#x2F;span&gt;&lt;span&gt; };
&lt;&#x2F;span&gt;&lt;span&gt;     ready,
&lt;&#x2F;span&gt;&lt;span&gt;     stream::{self, TryStream},
&lt;&#x2F;span&gt;&lt;span&gt; };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-use http::HeaderMap;
&lt;&#x2F;span&gt;&lt;span&gt; use pin_project_lite::pin_project;
&lt;&#x2F;span&gt;&lt;span&gt; use std::{
&lt;&#x2F;span&gt;&lt;span&gt;     fmt,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We then modify the &lt;code&gt;StreamBody&lt;&#x2F;code&gt; struct to include &lt;code&gt;trailers&lt;&#x2F;code&gt;. This will allow us to store the trailers in our response.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;     pub struct StreamBody&amp;lt;S&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;         #[pin]
&lt;&#x2F;span&gt;&lt;span&gt;         stream: SyncWrapper&amp;lt;S&amp;gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        trailers: Option&amp;lt;HeaderMap&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also need to set &lt;code&gt;trailers&lt;&#x2F;code&gt; to &lt;code&gt;None&lt;&#x2F;code&gt; when creating a new stream:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;    pub fn new(stream: S) -&amp;gt; Self
&lt;&#x2F;span&gt;&lt;span&gt;    where
&lt;&#x2F;span&gt;&lt;span&gt;        S: TryStream + Send + &amp;#39;static,
&lt;&#x2F;span&gt;&lt;span&gt;        S::Ok: Into&amp;lt;Bytes&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        S::Error: Into&amp;lt;BoxError&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;     {
&lt;&#x2F;span&gt;&lt;span&gt;         Self {
&lt;&#x2F;span&gt;&lt;span&gt;             stream: SyncWrapper::new(stream),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+            trailers: None,
&lt;&#x2F;span&gt;&lt;span&gt;         }
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; impl&amp;lt;S&amp;gt; IntoResponse for StreamBody&amp;lt;S&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add a &lt;code&gt;set_trailers&lt;&#x2F;code&gt; method to &lt;code&gt;StreamBody&lt;&#x2F;code&gt; so we can add trailer headers from our response:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    pub fn set_trailers(&amp;amp;mut self, headers: HeaderMap) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        self.trailers = Some(headers);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, modify &lt;code&gt;poll_trailers&lt;&#x2F;code&gt; to send any headers we set:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;    fn poll_trailers(
&lt;&#x2F;span&gt;&lt;span&gt;        self: Pin&amp;lt;&amp;amp;mut Self&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        _cx: &amp;amp;mut Context&amp;lt;&amp;#39;_&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; Poll&amp;lt;Result&amp;lt;Option&amp;lt;HeaderMap&amp;gt;, Self::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        Poll::Ready(Ok(None)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        Poll::Ready(Ok(self.project().trailers.take()))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;update-response&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#update-response&quot; aria-label=&quot;Anchor link for: update-response&quot;&gt;Update Response&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Now that we have a &lt;code&gt;StreamBody&lt;&#x2F;code&gt; implementaiton that will send headers, we can update &lt;code&gt;handler&lt;&#x2F;code&gt; in &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt; to include trailers.&lt;&#x2F;p&gt;
&lt;p&gt;Update the imports to use the &lt;code&gt;StreamBody&lt;&#x2F;code&gt; we just created:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+mod stream_body;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; use axum::{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    body::StreamBody,
&lt;&#x2F;span&gt;&lt;span&gt;     extract::Host,
&lt;&#x2F;span&gt;&lt;span&gt;     handler::HandlerWithoutStateExt,
&lt;&#x2F;span&gt;&lt;span&gt;     http::{StatusCode, Uri},
&lt;&#x2F;span&gt;&lt;span&gt;@@ -20,6 +21,8 @@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;use std::{convert::Infallible, net::SocketAddr, path::PathBuf};
&lt;&#x2F;span&gt;&lt;span&gt; use tokio::sync::mpsc;
&lt;&#x2F;span&gt;&lt;span&gt; use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+use crate::stream_body::StreamBody;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We modify our response to include a header:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;     let stream = tokio_stream::wrappers::ReceiverStream::new(rx);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    let body = StreamBody::new(stream);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    let mut body = StreamBody::new(stream);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    let mut headers = axum::http::HeaderMap::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    headers.insert(&amp;quot;chunky-trailer&amp;quot;, &amp;quot;foo&amp;quot;.parse().unwrap());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    body.set_trailers(headers);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     Response::builder()
&lt;&#x2F;span&gt;&lt;span&gt;         .status(StatusCode::OK)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        .header(&amp;quot;Trailers&amp;quot;, &amp;quot;chunky-trailer&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;         .body(body)
&lt;&#x2F;span&gt;&lt;span&gt;         .unwrap()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: we must include a &lt;code&gt;Trailers&lt;&#x2F;code&gt; header that names the trailer headers we want to send.&lt;&#x2F;p&gt;
&lt;p&gt;We can use curl to verify that our trailer header is sent. Note that we must include the verbose flag, &lt;code&gt;-v&lt;&#x2F;code&gt;, in order to see the headers.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl -v -k --no-buffer https:&#x2F;&#x2F;localhost:3000&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;...snip
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; GET &#x2F; HTTP&#x2F;2
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Host: localhost:3000
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; user-agent: curl&#x2F;7.79.1
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; accept: *&#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; HTTP&#x2F;2 200
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; trailers: chunky-trailer
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; date: Thu, 19 Oct 2023 22:28:06 GMT
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;hello...world&amp;lt; chunky-trailer: foo
&lt;&#x2F;span&gt;&lt;span&gt;* Connection #0 to host localhost left intact
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: the &lt;code&gt;&amp;lt; chunky-trailer: foo&lt;&#x2F;code&gt; is on the same line as &lt;code&gt;hello...world&lt;&#x2F;code&gt; because we did not buffer the body.&lt;&#x2F;p&gt;
&lt;p&gt;You can find the complete source code at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;axum-trailers&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;axum-trailers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>The Essence of CQRS</title>
        <published>2023-06-12T00:00:00+00:00</published>
        <updated>2023-06-12T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/the-essence-of-cqrs/" type="text/html"/>
        <id>https://hermanradtke.com/the-essence-of-cqrs/</id>
        
        <summary type="html">&lt;p&gt;I have been familiar with the concept of Command Query Responsibility Segregation (CQRS) for a while, but did not truly understand its practical application until I read &lt;a href=&quot;https:&#x2F;&#x2F;engineering.linkedin.com&#x2F;distributed-systems&#x2F;log-what-every-software-engineer-should-know-about-real-time-datas-unifying&quot;&gt;The Log: What every software engineer should know about real-time data&#x27;s unifying abstraction&lt;&#x2F;a&gt; by Jay Kreps.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;I have been familiar with the concept of Command Query Responsibility Segregation (CQRS) for a while, but did not truly understand its practical application until I read &lt;a href=&quot;https:&#x2F;&#x2F;engineering.linkedin.com&#x2F;distributed-systems&#x2F;log-what-every-software-engineer-should-know-about-real-time-datas-unifying&quot;&gt;The Log: What every software engineer should know about real-time data&#x27;s unifying abstraction&lt;&#x2F;a&gt; by Jay Kreps.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;When I read articles explaning CQRS, most are like the one on &lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;bliki&#x2F;CQRS.html&quot;&gt;Martin Fowler&#x27;s Bliki&lt;&#x2F;a&gt;. The concept of separating reads and writes makes sense but the &lt;em&gt;why&lt;&#x2F;em&gt; is lost in a bunch of hand-wavy examples mostly relating to event sourcing. Then I saw this diagram from &lt;a href=&quot;https:&#x2F;&#x2F;engineering.linkedin.com&#x2F;distributed-systems&#x2F;log-what-every-software-engineer-should-know-about-real-time-datas-unifying&quot;&gt;Jay Krep&#x27;s article on logs&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; xmlns:xlink=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot; version=&quot;1.1&quot; width=&quot;121px&quot; height=&quot;271px&quot; viewBox=&quot;-0.5 -0.5 121 271&quot;&gt;&lt;defs&#x2F;&gt;&lt;g&gt;&lt;path d=&quot;M 90 60 L 102 60 L 102 203.63&quot; fill=&quot;none&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;&lt;path d=&quot;M 102 208.88 L 98.5 201.88 L 102 203.63 L 105.5 201.88 Z&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 81px; margin-left: 101px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); background-color: rgba(255, 255, 255, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;&quot;&gt;writes&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;101&quot; y=&quot;84&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;11px&quot; text-anchor=&quot;middle&quot;&gt;writes&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;path d=&quot;M 30 60 L 29.97 93.63&quot; fill=&quot;none&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;&lt;path d=&quot;M 29.97 98.88 L 26.48 91.88 L 29.97 93.63 L 33.48 91.88 Z&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 80px; margin-left: 28px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); background-color: rgba(255, 255, 255, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;&quot;&gt;reads&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;28&quot; y=&quot;84&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;11px&quot; text-anchor=&quot;middle&quot;&gt;reads&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;120&quot; height=&quot;60&quot; fill=&quot;rgba(255, 255, 255, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 30px; margin-left: 1px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Clients&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;60&quot; y=&quot;34&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;12px&quot; text-anchor=&quot;middle&quot;&gt;Clients&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;rect x=&quot;0&quot; y=&quot;100&quot; width=&quot;90&quot; height=&quot;60&quot; fill=&quot;rgba(255, 255, 255, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 88px; height: 1px; padding-top: 130px; margin-left: 1px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Serving Nodes&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;45&quot; y=&quot;134&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;12px&quot; text-anchor=&quot;middle&quot;&gt;Serving Nodes&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;path d=&quot;M 30 210 L 29.97 166.37&quot; fill=&quot;none&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;&lt;path d=&quot;M 29.97 161.12 L 33.47 168.12 L 29.97 166.37 L 26.47 168.12 Z&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 187px; margin-left: 28px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); background-color: rgba(255, 255, 255, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;&quot;&gt;writes&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;28&quot; y=&quot;190&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;11px&quot; text-anchor=&quot;middle&quot;&gt;writes&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;rect x=&quot;0&quot; y=&quot;210&quot; width=&quot;120&quot; height=&quot;60&quot; fill=&quot;rgba(255, 255, 255, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 240px; margin-left: 1px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Log&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;60&quot; y=&quot;244&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;12px&quot; text-anchor=&quot;middle&quot;&gt;Log&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;&#x2F;g&gt;&lt;switch&gt;&lt;g requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&#x2F;&gt;&lt;a transform=&quot;translate(0,-5)&quot; xlink:href=&quot;https:&#x2F;&#x2F;www.diagrams.net&#x2F;doc&#x2F;faq&#x2F;svg-export-text-problems&quot; target=&quot;_blank&quot;&gt;&lt;text text-anchor=&quot;middle&quot; font-size=&quot;10px&quot; x=&quot;50%&quot; y=&quot;100%&quot;&gt;Viewer does not support full SVG 1.1&lt;&#x2F;text&gt;&lt;&#x2F;a&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;I now understand the &lt;em&gt;essence&lt;&#x2F;em&gt; of what CQRS brings to distributed systems. We can build a service to send writes to something like Kafka and reads to something like Postgres (or any other data store).&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; style=&quot;background-color: rgb(255, 255, 255);&quot; xmlns:xlink=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot; version=&quot;1.1&quot; width=&quot;121px&quot; height=&quot;271px&quot; viewBox=&quot;-0.5 -0.5 121 271&quot; content=&quot;&amp;lt;mxfile host=&amp;quot;app.diagrams.net&amp;quot; modified=&amp;quot;2023-06-12T14:07:15.367Z&amp;quot; agent=&amp;quot;5.0 (Macintosh)&amp;quot; etag=&amp;quot;G50WnQQX-FjSpCM_zbRX&amp;quot; version=&amp;quot;15.8.6&amp;quot;&amp;gt;&amp;lt;diagram id=&amp;quot;rqCtcK7Q9IwAA8DcKYVc&amp;quot; name=&amp;quot;Page-1&amp;quot;&amp;gt;3VhNc9owEP01HJOxLRzMka8mM6UdOhzaHBV7sdXalisLbOfXV0YStmqgJSmF5MJ4n3bX0r59i6CHJkl5z3AWfaIBxD3HCsoemvYcZ9i&#x2F;E581UEngznYlEDISSMhugCV5BgVaCl2TAHLDkVMac5KZoE&#x2F;TFHxuYJgxWphuKxqbb81wCB1g6eO4i34lAY8k6rlWgz8ACSP9ZttSKwnWzgrIIxzQogWhWQ9NGKVcPiXlBOK6drouMu7DgdXdxhik&#x2F;G8CRl&#x2F;yZfGzvP&#x2F;szzfYW+QPY3d801d745U+MATi&#x2F;MqkjEc0pCmOZw06ZnSdBlBntYTV+MwpzQRoC&#x2F;A7cF4pMvGaUwFFPInVKpSEf6vDbweuMh9bS9NSpd4alTZSzioZ5bnafmwvNnFbywhcACMJcGAKlMeuz3qwmgrK6Zr5cKSEuisxC4Ef8UM7zoVWgIrdsErEMYgxJxtzH1h1bbjzU6EjxnDVcsgoSXneyryoAeGg9NcfOjKjkp&#x2F;jGU0iHmRGbbW21kDbRjqhqYbylRscr9WxCkY45Ht7bY6fxMQw+gPHJEzFsy+4qBkbb4BxIjQ5UgsJCQLZipCTZ&#x2F;y0zVfTqsohkrvjnjvdEV0ngHLfwFDBjUzbLXBYMl0eVfYb69ayHWQWXVqnMd2hUmu10qZnZqCrVS4a0GT3n&#x2F;DpXnZIOC8aEgihtzglnFdOCYP7U4n2OsJlgIN3olv3qG6FbC3LNhX2St2eX5h2h68lsA0Rjfg7Y6Yci0iM42WGtx1biHubyePB2nca&#x2F;2A50dAyR6CmqWguUbbGotYF6s46U287nVotaM5Dtudr6dLFQnuKNfyftRpc0cC3Xjjw7QsPfPQWBr7+lfVOr2qDP17VzDvV1Q981KHrI179wFc3wfrofONemM2PZlnY5p8HNPsF&amp;lt;&#x2F;diagram&amp;gt;&amp;lt;&#x2F;mxfile&amp;gt;&quot;&gt;&lt;defs&#x2F;&gt;&lt;g&gt;&lt;path d=&quot;M 90 60 L 102 60 L 102 203.63&quot; fill=&quot;none&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;&lt;path d=&quot;M 102 208.88 L 98.5 201.88 L 102 203.63 L 105.5 201.88 Z&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 81px; margin-left: 101px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); background-color: rgba(255, 255, 255, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;&quot;&gt;writes&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;101&quot; y=&quot;84&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;11px&quot; text-anchor=&quot;middle&quot;&gt;writes&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;path d=&quot;M 30 60 L 29.97 93.63&quot; fill=&quot;none&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;&lt;path d=&quot;M 29.97 98.88 L 26.48 91.88 L 29.97 93.63 L 33.48 91.88 Z&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 80px; margin-left: 28px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); background-color: rgba(255, 255, 255, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;&quot;&gt;reads&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;28&quot; y=&quot;84&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;11px&quot; text-anchor=&quot;middle&quot;&gt;reads&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;120&quot; height=&quot;60&quot; fill=&quot;rgba(255, 255, 255, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 30px; margin-left: 1px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Service&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;60&quot; y=&quot;34&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;12px&quot; text-anchor=&quot;middle&quot;&gt;Service&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;rect x=&quot;0&quot; y=&quot;100&quot; width=&quot;90&quot; height=&quot;60&quot; fill=&quot;rgba(255, 255, 255, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 88px; height: 1px; padding-top: 130px; margin-left: 1px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Postgres&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;45&quot; y=&quot;134&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;12px&quot; text-anchor=&quot;middle&quot;&gt;Postgres&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;path d=&quot;M 30 210 L 29.97 166.37&quot; fill=&quot;none&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;&lt;path d=&quot;M 29.97 161.12 L 33.47 168.12 L 29.97 166.37 L 26.47 168.12 Z&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 187px; margin-left: 28px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); background-color: rgba(255, 255, 255, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;&quot;&gt;writes&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;28&quot; y=&quot;190&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;11px&quot; text-anchor=&quot;middle&quot;&gt;writes&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;rect x=&quot;0&quot; y=&quot;210&quot; width=&quot;120&quot; height=&quot;60&quot; fill=&quot;rgba(255, 255, 255, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 240px; margin-left: 1px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Kafka&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;60&quot; y=&quot;244&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;12px&quot; text-anchor=&quot;middle&quot;&gt;Kafka&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;&#x2F;g&gt;&lt;switch&gt;&lt;g requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&#x2F;&gt;&lt;a transform=&quot;translate(0,-5)&quot; xlink:href=&quot;https:&#x2F;&#x2F;www.diagrams.net&#x2F;doc&#x2F;faq&#x2F;svg-export-text-problems&quot; target=&quot;_blank&quot;&gt;&lt;text text-anchor=&quot;middle&quot; font-size=&quot;10px&quot; x=&quot;50%&quot; y=&quot;100%&quot;&gt;Viewer does not support full SVG 1.1&lt;&#x2F;text&gt;&lt;&#x2F;a&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;The value of this approach is not for the service itself (though it can be helpful), but the rest of the system. Separating commands allows other systems (like Search, Analytics, Monitoring, etc) to read from the same stream of commands.&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; style=&quot;background-color: rgb(255, 255, 255);&quot; xmlns:xlink=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot; version=&quot;1.1&quot; width=&quot;461px&quot; height=&quot;271px&quot; viewBox=&quot;-0.5 -0.5 461 271&quot; content=&quot;&amp;lt;mxfile host=&amp;quot;app.diagrams.net&amp;quot; modified=&amp;quot;2023-06-12T14:15:04.599Z&amp;quot; agent=&amp;quot;5.0 (Macintosh)&amp;quot; etag=&amp;quot;EH52wurUC0SzqnpzNJtG&amp;quot; version=&amp;quot;15.8.6&amp;quot;&amp;gt;&amp;lt;diagram id=&amp;quot;rqCtcK7Q9IwAA8DcKYVc&amp;quot; name=&amp;quot;Page-1&amp;quot;&amp;gt;3VlNc9owEP01HJOxLIzhGEKazJR2yHBoc1SwsNUai8oy2Pn1lZGErYiPEBJMuDDeJ+1a2t23lpYWvJ3l9wzNox80wHHLdYK8BQct1+21O+K3BAoJdIAngZCRQEKgAsbkBSvQUWhGApwaEzmlMSdzE5zQJMETbmCIMbo0p01pbL51jkJsAeMJim30Fwl4JNGu51T4AyZhpN8MHDUyQ3qyAtIIBXRZg+BdC94ySrl8muW3OC59p&#x2F;0i9b5tGV0vjOGEv0Xh5jEdL&#x2F;&#x2F;l9z8nwwXqjtKHvte&#x2F;aqu18UJvGAdi&#x2F;0qkjEc0pAmK7yq0z2iWBLi06gipmjOkdC5AIMA&#x2F;mPNCBRNlnAoo4rNYjeKc8N+l+rXvKfGpNjTIlemVUGgh4ayQWl1Py0&#x2F;1wUpvJRmKI8zIDHPMFCi3Xe51qzcVlNKMTfAOF+qsRCzEfMc8uI654AqmYjWsEHoMx4iThbkOpLI2XM9TqjeMoaI2YU5JwtOa5VEJiAmKf+2eKy0q+rldI0nEg7SopdrSKmiVSAckVU++coHiTG1ryQjH6cZcG6JnUTGM&#x2F;EAxCRPxPBGxKCPWX2DGieDkjRqYkSCQqYhT8oKeV&#x2F;bKsCp3CONev+UN1oEuDeB8U8FQyhVN6ymwnTJ2HJX1K+faAS40nS6lwyJthVJztdBi17RAp9NUJKAZ3Q+Jp9dskXDfVSQghF+xSrhHVgkj9ocGumsRl2EUXAhvvZ28FbR1HGAy7Ejefj4xgRWvMWYLIhLxdcRMOi4jUY7Hc7TK2KU4t5lx3Op7K&#x2F;G3uhP2HLME6jAtq0MU0FhUO0B1nE&#x2F;Kbdfy1YimPGQbPktNOwtucFbvlL7yz6jgO+8s+KDhgg+&#x2F;QsHXt6wLPar5e49q5pnq&#x2F;At+s&#x2F;e1Oi0rlm5mZgNUAlvK7Im45F80l8Dee4+4XHY+kk7asvvqWAZ908Qn0q3Rmw84hG61D6HRHdn3GWyCps1+8uxLzkXRdN81p+0ZbAIfwtHXDD0ZQTvnQ9DL4eexncrj+HnZ3UOZsTv46Ttmx&#x2F;bYLkRumtFWT9Y8hFY4v6PpX2RFs+lLdxs23aEAdjtnmIksbr6b4&#x2F;pn1qAAdjenT8LHDCvbTTrLc8&#x2F;NWTYFB4ijAQ0b91WnfTJfCbH6r1UWt+oPa3j3Hw==&amp;lt;&#x2F;diagram&amp;gt;&amp;lt;&#x2F;mxfile&amp;gt;&quot;&gt;&lt;defs&#x2F;&gt;&lt;g&gt;&lt;path d=&quot;M 210 60 L 222 60 L 222 203.63&quot; fill=&quot;none&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;&lt;path d=&quot;M 222 208.88 L 218.5 201.88 L 222 203.63 L 225.5 201.88 Z&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 81px; margin-left: 221px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); background-color: rgba(255, 255, 255, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;&quot;&gt;writes&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;221&quot; y=&quot;84&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;11px&quot; text-anchor=&quot;middle&quot;&gt;writes&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;path d=&quot;M 150 60 L 149.97 93.63&quot; fill=&quot;none&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;&lt;path d=&quot;M 149.97 98.88 L 146.48 91.88 L 149.97 93.63 L 153.48 91.88 Z&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 80px; margin-left: 148px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); background-color: rgba(255, 255, 255, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;&quot;&gt;reads&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;148&quot; y=&quot;84&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;11px&quot; text-anchor=&quot;middle&quot;&gt;reads&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;rect x=&quot;120&quot; y=&quot;0&quot; width=&quot;120&quot; height=&quot;60&quot; fill=&quot;rgba(255, 255, 255, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 30px; margin-left: 121px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Service&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;180&quot; y=&quot;34&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;12px&quot; text-anchor=&quot;middle&quot;&gt;Service&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;rect x=&quot;120&quot; y=&quot;100&quot; width=&quot;90&quot; height=&quot;60&quot; fill=&quot;rgba(255, 255, 255, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 88px; height: 1px; padding-top: 130px; margin-left: 121px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Postgres&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;165&quot; y=&quot;134&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;12px&quot; text-anchor=&quot;middle&quot;&gt;Postgres&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;path d=&quot;M 150 210 L 149.97 166.37&quot; fill=&quot;none&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;&lt;path d=&quot;M 149.97 161.12 L 153.47 168.12 L 149.97 166.37 L 146.47 168.12 Z&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 187px; margin-left: 148px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); background-color: rgba(255, 255, 255, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;&quot;&gt;writes&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;148&quot; y=&quot;190&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;11px&quot; text-anchor=&quot;middle&quot;&gt;writes&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;path d=&quot;M 120 225 L 45 225 L 45 166.37&quot; fill=&quot;none&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;&lt;path d=&quot;M 45 161.12 L 48.5 168.12 L 45 166.37 L 41.5 168.12 Z&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 191px; margin-left: 46px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); background-color: rgba(255, 255, 255, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;&quot;&gt;writes&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;46&quot; y=&quot;194&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;11px&quot; text-anchor=&quot;middle&quot;&gt;writes&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;path d=&quot;M 240 225 L 295 225 L 295 166.37&quot; fill=&quot;none&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;&lt;path d=&quot;M 295 161.12 L 298.5 168.12 L 295 166.37 L 291.5 168.12 Z&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 191px; margin-left: 296px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); background-color: rgba(255, 255, 255, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;&quot;&gt;writes&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;296&quot; y=&quot;194&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;11px&quot; text-anchor=&quot;middle&quot;&gt;writes&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;path d=&quot;M 240 240 L 415 240 L 415 166.37&quot; fill=&quot;none&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;&lt;path d=&quot;M 415 161.12 L 418.5 168.12 L 415 166.37 L 411.5 168.12 Z&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 191px; margin-left: 416px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); background-color: rgba(255, 255, 255, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;&quot;&gt;writes&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;416&quot; y=&quot;194&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;11px&quot; text-anchor=&quot;middle&quot;&gt;writes&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;rect x=&quot;120&quot; y=&quot;210&quot; width=&quot;120&quot; height=&quot;60&quot; fill=&quot;rgba(255, 255, 255, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 240px; margin-left: 121px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Kafka&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;180&quot; y=&quot;244&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;12px&quot; text-anchor=&quot;middle&quot;&gt;Kafka&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;rect x=&quot;0&quot; y=&quot;100&quot; width=&quot;90&quot; height=&quot;60&quot; fill=&quot;rgba(255, 255, 255, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 88px; height: 1px; padding-top: 130px; margin-left: 1px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Lucene&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;45&quot; y=&quot;134&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;12px&quot; text-anchor=&quot;middle&quot;&gt;Lucene&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;rect x=&quot;250&quot; y=&quot;100&quot; width=&quot;90&quot; height=&quot;60&quot; fill=&quot;rgba(255, 255, 255, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 88px; height: 1px; padding-top: 130px; margin-left: 251px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;BigQuery&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;295&quot; y=&quot;134&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;12px&quot; text-anchor=&quot;middle&quot;&gt;BigQuery&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;rect x=&quot;370&quot; y=&quot;100&quot; width=&quot;90&quot; height=&quot;60&quot; fill=&quot;rgba(255, 255, 255, 1)&quot; stroke=&quot;rgba(0, 0, 0, 1)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;&lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow: visible; text-align: left;&quot; pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 88px; height: 1px; padding-top: 130px; margin-left: 371px;&quot;&gt;&lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot; data-drawio-colors=&quot;color: rgba(0, 0, 0, 1); &quot;&gt;&lt;div style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;DataDog&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;foreignObject&gt;&lt;text x=&quot;415&quot; y=&quot;134&quot; fill=&quot;rgba(0, 0, 0, 1)&quot; font-family=&quot;Helvetica&quot; font-size=&quot;12px&quot; text-anchor=&quot;middle&quot;&gt;DataDog&lt;&#x2F;text&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;g&gt;&lt;&#x2F;g&gt;&lt;switch&gt;&lt;g requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&#x2F;&gt;&lt;a transform=&quot;translate(0,-5)&quot; xlink:href=&quot;https:&#x2F;&#x2F;www.diagrams.net&#x2F;doc&#x2F;faq&#x2F;svg-export-text-problems&quot; target=&quot;_blank&quot;&gt;&lt;text text-anchor=&quot;middle&quot; font-size=&quot;10px&quot; x=&quot;50%&quot; y=&quot;100%&quot;&gt;Viewer does not support full SVG 1.1&lt;&#x2F;text&gt;&lt;&#x2F;a&gt;&lt;&#x2F;switch&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;center&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Webhook Failure Scenarios</title>
        <published>2023-05-28T00:00:00+00:00</published>
        <updated>2023-05-28T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/webhook-failure-scenarios/" type="text/html"/>
        <id>https://hermanradtke.com/webhook-failure-scenarios/</id>
        
        <summary type="html">&lt;p&gt;A webhooks allow two applications to communicate events. It is relatively simple to get started using webhooks using HTTP and JSON. However, there a number of failure scenarios that developers should be aware of in order to make their webhook implementation robust.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;A webhooks allow two applications to communicate events. It is relatively simple to get started using webhooks using HTTP and JSON. However, there a number of failure scenarios that developers should be aware of in order to make their webhook implementation robust.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;terminology&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#terminology&quot; aria-label=&quot;Anchor link for: terminology&quot;&gt;Terminology&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For this post we are using the following terms:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;client - A program that sends a webhook request.&lt;&#x2F;li&gt;
&lt;li&gt;origin - A service that processes and responds to webhook requests.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;unhealthy-origin&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#unhealthy-origin&quot; aria-label=&quot;Anchor link for: unhealthy-origin&quot;&gt;Unhealthy Origin&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The client sends a valid request but receives a 500 HTTP response code (or any 5xx server error) from the origin. This is the most common failure mode.  The cause of the unhealthy origin may be do to an explicit change, such as deploying a new version of the origin service. The error may also be caused by an unhealthy service upstream of the origin, such as a databased used by the origin becomming unavailable.&lt;&#x2F;p&gt;
&lt;pre class=&quot;mermaid&quot;&gt;
 sequenceDiagram
    participant client
    participant origin
    
    client -&amp;gt;&amp;gt; origin: POST &amp;#x2F;webhook
    origin --&amp;gt;&amp;gt; client: 500 Internal Server Error
&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;invalid-request&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#invalid-request&quot; aria-label=&quot;Anchor link for: invalid-request&quot;&gt;Invalid Request&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The client sends a request that does not conform to the origin&#x27;s specification. The may be due to incorrect or missing data from the HTTP body or the HTTP headers. For example: the request may be missing a &lt;code&gt;Content-Type: application&#x2F;json&lt;&#x2F;code&gt; header or is sending a boolean as a string in the body &lt;code&gt;{ &quot;active&quot;: &quot;true&quot; }&lt;&#x2F;code&gt; instead of &lt;code&gt;{ &quot;active&quot;: true }&lt;&#x2F;code&gt;. This error may not always be the fault of the client. The origin may have been updated in such a way that that previous requests were successful, but new requests are not. For example: the origin did not require a &lt;code&gt;Content-Type&lt;&#x2F;code&gt; header but now does. Or the origin used to accept both &lt;code&gt;&quot;true&quot;&lt;&#x2F;code&gt; and &lt;code&gt;true&lt;&#x2F;code&gt; as valid boolean value but is now more strict.&lt;&#x2F;p&gt;
&lt;pre class=&quot;mermaid&quot;&gt;
 sequenceDiagram
    participant client
    participant origin
    
    client -&amp;gt;&amp;gt; origin: POST &amp;#x2F;webhook
    origin --&amp;gt;&amp;gt; client: 400 Bad Request
&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;network-error&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#network-error&quot; aria-label=&quot;Anchor link for: network-error&quot;&gt;Network Error&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The client sends a request to the origin but the request never reaches the origin. Network errors can happen whether we are sending the request over the internet or using a VPN tunnel. Modern networks are complex and there are many reasons why the network can fail:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;dns - When sending a webhook request using an URI (domain name), the client may not be able to determine the IP address. Example: the client is unable to resolve an IP address for the request URI.&lt;&#x2F;li&gt;
&lt;li&gt;tcp - The network protocol underlying HTTP failed. Example: the origin has an unrecoverable error and issues a TCP reset.&lt;&#x2F;li&gt;
&lt;li&gt;http - The error occurred within the HTTP protocol. Example: the client sent the request using HTTP&#x2F;2 but the origin only understands HTTP&#x2F;1.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The cause of the network failure may be related to the client, the origin or somewhere in between. For example: requests are normally sent over the internet which involves transiting through Comcast&#x27;s network. If Comcast has an issue, the requests will be dropped until network operators re-route traffic to another provider, such as Level3.&lt;&#x2F;p&gt;
&lt;pre class=&quot;mermaid&quot;&gt;
 sequenceDiagram
    participant client
    participant origin
    
    client --x origin: POST &amp;#x2F;webhook
&lt;&#x2F;pre&gt;
&lt;p&gt;A network timeout error is a special case that we discuss below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;origin-timeout&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#origin-timeout&quot; aria-label=&quot;Anchor link for: origin-timeout&quot;&gt;Origin Timeout&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The client sends a request to the origin, but a timeout occurs. The timeout may be from the origin, often in the form of a 504 Gateway Timeout error. The client may also timeout after a certain amount of time.&lt;&#x2F;p&gt;
&lt;p&gt;According to the client, a timeout is an error. However, the origin may have partially or completely processed the request. This makes it difficult for the client to know if it should re-send the request or not.&lt;&#x2F;p&gt;
&lt;p&gt;To understand why the origin would continue processing the request when a timeout occurs, we need to understand how HTTP requests are normally processed. Let us use an example where the origin receives a webhook request for updating inventory. When the origin receives that request, it will update a SQL database with the new inventory count. The origin will wait until the SQL update finishes and then send a response. If that update is blocked for a long time, the client may give up and timeout. The update finally succeeds and the origin attempts to send a response, however the client has already given up and the response cannot be sent. In this scenario, the client has recorded a timeout error but the origin has processed the request.&lt;&#x2F;p&gt;
&lt;pre class=&quot;mermaid&quot;&gt;
 sequenceDiagram
    participant client

    box origin network
    participant origin
    participant database
    end
    
    client -&amp;gt;&amp;gt; origin: POST &amp;#x2F;webhook
    origin -&amp;gt;&amp;gt;database: update

    alt timeout
        origin --&amp;gt;&amp;gt; client: 504 Gateway Timeout
        database --&amp;gt;&amp;gt; origin: update finished
        origin --x client: attempt to respond
    end
&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;origin-dropped-request&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#origin-dropped-request&quot; aria-label=&quot;Anchor link for: origin-dropped-request&quot;&gt;Origin Dropped Request&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The origin responds with a 2xx HTTP response code but does not actually process the request. This is one of the more insidious failure modes because it is almost impossible for the client to detect. Worse still, this issue is normally discovered days or weeks after it first occurs.&lt;&#x2F;p&gt;
&lt;p&gt;Many origins will synchronously process webhook requests. However, some origins choose to asynchronously process requests. This means the origin receives a request, writes a message to a queue for later processing and responds with a 2xx HTTP response code. The intention is for some other service to process the message in the queue. Unfortunately, the message may never get processed. The queue may drop the message, a service may encounter an error while trying to process the message or a service may fail to properly process the message and mistakenly mark the message as processed.&lt;&#x2F;p&gt;
&lt;p&gt;The false-positive of a successful response and the delay in detecting this issue makes this scenario one of the more challenging failure modes to resolve. Examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The client may no longer have access to the data to re-send the request.&lt;&#x2F;li&gt;
&lt;li&gt;Some requests cannot be safely re-sent. For example: an old inventory update request should not be sent because a newer request already updated the inventory to the correct value.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre class=&quot;mermaid&quot;&gt;
 sequenceDiagram
    participant client

    box origin network
    participant origin
    participant queue
    participant worker
    end
    
    client -&amp;gt;&amp;gt; origin: POST &amp;#x2F;webhook
    origin -&amp;gt;&amp;gt;queue: save
    origin --&amp;gt;&amp;gt; client: 200 OK

    alt failure
        worker -&amp;gt;&amp;gt; queue: get next
        queue --&amp;gt;&amp;gt; worker: message
        worker -&amp;gt;&amp;gt; queue: error
    end
&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;simple-not-easy&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#simple-not-easy&quot; aria-label=&quot;Anchor link for: simple-not-easy&quot;&gt;Simple, Not Easy&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The concept of webhooks are simple, but it is not easy to properly implement webhooks in a way that is robust and dependable. If the above scenarios are not properly handled, a webhook implementation is at risk of data loss and will require a support team to resolve incidents. Some failure scenarios are not possible to defend against without first documenting the interface, including pre-conditions and post-conditions, that both the origin and client should adhere to.&lt;&#x2F;p&gt;
&lt;p&gt;I am building a webhook proxy, called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;soldr#soldr&quot;&gt;soldr&lt;&#x2F;a&gt;, to make webhook implementations resilient to the failure scenarios discussed above.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Send UDP Messages in Node.js Without dns.lookup</title>
        <published>2022-10-17T00:00:00+00:00</published>
        <updated>2022-10-17T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/send-udp-messages-in-nodejs-without-dns-lookup/" type="text/html"/>
        <id>https://hermanradtke.com/send-udp-messages-in-nodejs-without-dns-lookup/</id>
        
        <summary type="html">&lt;p&gt;At work, I recently inherited a node service that was sending metrics to DataDog using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;brightcove&#x2F;hot-shots&quot;&gt;brightcove&#x2F;hot-shots&lt;&#x2F;a&gt; StatsD client. While investigating some issues with &lt;code&gt;dns.lookup&lt;&#x2F;code&gt;, I noticed other people had run into this same issue but there was no one sharing what a solution might look like.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;At work, I recently inherited a node service that was sending metrics to DataDog using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;brightcove&#x2F;hot-shots&quot;&gt;brightcove&#x2F;hot-shots&lt;&#x2F;a&gt; StatsD client. While investigating some issues with &lt;code&gt;dns.lookup&lt;&#x2F;code&gt;, I noticed other people had run into this same issue but there was no one sharing what a solution might look like.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;em&gt;Note: This post was significantly edited on November 6, 2022.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In a hurry? You can &lt;a href=&quot;https:&#x2F;&#x2F;hermanradtke.com&#x2F;send-udp-messages-in-nodejs-without-dns-lookup&#x2F;#preventing-dns-lookup-in-hot-shots-statsd-client&quot;&gt;skip&lt;&#x2F;a&gt; to the solution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dns-lookup-is-always-called&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dns-lookup-is-always-called&quot; aria-label=&quot;Anchor link for: dns-lookup-is-always-called&quot;&gt;&lt;code&gt;dns.lookup&lt;&#x2F;code&gt; Is Always Called&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let us create a simple program to send a message via UDP. We &lt;em&gt;can&lt;&#x2F;em&gt; use a domain name with &lt;code&gt;node:dgram&lt;&#x2F;code&gt;, but it is bad idea. I explain why &lt;a href=&quot;https:&#x2F;&#x2F;hermanradtke.com&#x2F;send-udp-messages-in-nodejs-without-dns-lookup&#x2F;#addendum-avoid-domain-names&quot;&gt;here&lt;&#x2F;a&gt;. Let us assume we have a single IP address instead.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dgram &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;node:dgram&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dns &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;node:dns&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;originalLookup &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dns&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lookup&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dns&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lookup &lt;&#x2F;span&gt;&lt;span&gt;= (...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;called dns.lookup&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;originalLookup&lt;&#x2F;span&gt;&lt;span&gt;(...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;93.184.216.34&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; www.example.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;socket &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dgram&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;createSocket&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;udp4&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;socket&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8125&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;socket&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we run this program, we expect to bypass all calls to &lt;code&gt;dns.lookup&lt;&#x2F;code&gt; when we run our code.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ node udp.mjs
&lt;&#x2F;span&gt;&lt;span&gt;called dns.lookup
&lt;&#x2F;span&gt;&lt;span&gt;called dns.lookup
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is surprising and we are not the only ones who think so. This behavior was first called out in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nodejs&#x2F;node&#x2F;issues&#x2F;35130&quot;&gt;nodejs&#x2F;node#35130&lt;&#x2F;a&gt; but was dismissed with a &lt;em&gt;won&#x27;t fix&lt;&#x2F;em&gt; response. It was brought up again in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nodejs&#x2F;node&#x2F;issues&#x2F;39468&quot;&gt;nodejs&#x2F;node#39468&lt;&#x2F;a&gt; because (as the docs said above), we are still delayed by at least one tick of the event loop as shown in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nodejs&#x2F;node&#x2F;blob&#x2F;b3723fac05aa86a4e0604e218dbd8ae24609172b&#x2F;lib&#x2F;dns.js#L155-L164&quot;&gt;b3723fac05&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;avoiding-dns-lookup-when-using-ip-address&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#avoiding-dns-lookup-when-using-ip-address&quot; aria-label=&quot;Anchor link for: avoiding-dns-lookup-when-using-ip-address&quot;&gt;Avoiding &lt;code&gt;dns.lookup&lt;&#x2F;code&gt; When Using IP Address&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To avoid &lt;code&gt;dns.lookup&lt;&#x2F;code&gt;, we configure our socket to use a custom lookup function.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;socket &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dgram&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;createSocket&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  type: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;udp4&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lookup&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_options&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;IPv4&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;hostname&lt;&#x2F;code&gt; value will be the value of &lt;code&gt;ip&lt;&#x2F;code&gt;. Now, when we run it we will not see any calls made to &lt;code&gt;dns.lookup&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ node udp.mjs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;the-value-of-hostname-is-not-always-what-we-expect&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-value-of-hostname-is-not-always-what-we-expect&quot; aria-label=&quot;Anchor link for: the-value-of-hostname-is-not-always-what-we-expect&quot;&gt;The Value of &lt;code&gt;hostname&lt;&#x2F;code&gt; Is Not Always What We Expect&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We might consider swapping out &lt;code&gt;hostname&lt;&#x2F;code&gt; for &lt;code&gt;ip&lt;&#x2F;code&gt; in the callback, but that will cause a problem.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-   callback(null, hostname, &amp;#39;IPv4&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+   callback(null, ip, &amp;#39;IPv4&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ node udp.mjs
&lt;&#x2F;span&gt;&lt;span&gt;node:internal&#x2F;errors:484
&lt;&#x2F;span&gt;&lt;span&gt;    ErrorCaptureStackTrace(err);
&lt;&#x2F;span&gt;&lt;span&gt;    ^
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Error: bind EADDRNOTAVAIL 93.184.216.34
&lt;&#x2F;span&gt;&lt;span&gt;    at node:dgram:359:20
&lt;&#x2F;span&gt;&lt;span&gt;    at lookup (file:&#x2F;&#x2F;&#x2F;Users&#x2F;herman&#x2F;Code&#x2F;udp-no-dns&#x2F;udp.mjs:14:5)
&lt;&#x2F;span&gt;&lt;span&gt;    at UDP.lookup4 (node:internal&#x2F;dgram:24:10)
&lt;&#x2F;span&gt;&lt;span&gt;    at Socket.bind (node:dgram:325:16)
&lt;&#x2F;span&gt;&lt;span&gt;    at Socket.send (node:dgram:645:10)
&lt;&#x2F;span&gt;&lt;span&gt;    at node:internal&#x2F;util:364:7
&lt;&#x2F;span&gt;&lt;span&gt;    at new Promise (&amp;lt;anonymous&amp;gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    at Socket.send2 (node:internal&#x2F;util:350:12)
&lt;&#x2F;span&gt;&lt;span&gt;    at file:&#x2F;&#x2F;&#x2F;Users&#x2F;herman&#x2F;Code&#x2F;udp-no-dns&#x2F;udp.mjs:21:14
&lt;&#x2F;span&gt;&lt;span&gt;Emitted &amp;#39;error&amp;#39; event on Socket instance at:
&lt;&#x2F;span&gt;&lt;span&gt;    at node:dgram:361:14
&lt;&#x2F;span&gt;&lt;span&gt;    at lookup (file:&#x2F;&#x2F;&#x2F;Users&#x2F;herman&#x2F;Code&#x2F;udp-no-dns&#x2F;udp.mjs:14:5)
&lt;&#x2F;span&gt;&lt;span&gt;    [... lines matching original stack trace ...]
&lt;&#x2F;span&gt;&lt;span&gt;    at file:&#x2F;&#x2F;&#x2F;Users&#x2F;herman&#x2F;Code&#x2F;udp-no-dns&#x2F;udp.mjs:21:14 {
&lt;&#x2F;span&gt;&lt;span&gt;  errno: -49,
&lt;&#x2F;span&gt;&lt;span&gt;  code: &amp;#39;EADDRNOTAVAIL&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;  syscall: &amp;#39;bind&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;  address: &amp;#39;93.184.216.34&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The issue is that our &lt;code&gt;socket.send&lt;&#x2F;code&gt; first tries to bind to a local address (e.g. &lt;code&gt;0.0.0.0&lt;&#x2F;code&gt;), which calls our custom lookup function. This is why our first example printed &lt;em&gt;called dns.lookup&lt;&#x2F;em&gt; twice: first for the local address and the second time for the &lt;code&gt;host&lt;&#x2F;code&gt; parameter of &lt;code&gt;socket.send&lt;&#x2F;code&gt;. Our custom lookup function returned &lt;code&gt;93.184.216.34&lt;&#x2F;code&gt; both times. The socket cannot bind to a non-local address like &lt;code&gt;93.184.216.34&lt;&#x2F;code&gt; and emitted an error that told us as much. Now that we know that our lookup function can be called in unexpected ways, let us change the function to bypass &lt;code&gt;dns.lookup&lt;&#x2F;code&gt; only when &lt;code&gt;hostname&lt;&#x2F;code&gt; matches our expected domain name.&lt;&#x2F;p&gt;
&lt;p&gt;If we want to be really safe, we can consider calling &lt;code&gt;dns.lookup&lt;&#x2F;code&gt; for any value of &lt;code&gt;hostname&lt;&#x2F;code&gt; other than &lt;code&gt;ip&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;socket &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dgram&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;createSocket&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  type: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;udp4&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lookup&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;options&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname &lt;&#x2F;span&gt;&lt;span&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;IPv4&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dns&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lookup&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;options&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;preventing-dns-lookup-in-hot-shots-statsd-client&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#preventing-dns-lookup-in-hot-shots-statsd-client&quot; aria-label=&quot;Anchor link for: preventing-dns-lookup-in-hot-shots-statsd-client&quot;&gt;Preventing DNS Lookup in hot-shots StatsD Client&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we know about custom lookup functions, we can apply this same approach to the hot-shots StatsD client. A recent patch made it possible to pass UDP socket options when creating the client. Since &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;brightcove&#x2F;hot-shots&#x2F;commit&#x2F;a399dda99fb1bf2b15e53646b3ef5d8cbb0b90c9&quot;&gt;a399dda&lt;&#x2F;a&gt; landed in &lt;code&gt;v9.2.0&lt;&#x2F;code&gt; you can do:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;const client = new StatsD({
&lt;&#x2F;span&gt;&lt;span&gt;  host,
&lt;&#x2F;span&gt;&lt;span&gt;  port,
&lt;&#x2F;span&gt;&lt;span&gt;  udpSocketOptions: {
&lt;&#x2F;span&gt;&lt;span&gt;    type: &amp;#39;udp4&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    lookup: (hostname, options, callback) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &#x2F;&#x2F; our program above
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;addendum-avoid-domain-names&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#addendum-avoid-domain-names&quot; aria-label=&quot;Anchor link for: addendum-avoid-domain-names&quot;&gt;Addendum: Avoid Domain Names&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We prefer UDP for sending data like metrics because it is fast. We do not want the overhead of TCP and we are fine dropping some connections. When using a domain name, the docs warn us:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;DNS lookups delay the time to send for at least one tick of the Node.js event loop.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Depending on how fast our DNS server is, we may be delayed for much longer than one tick of the event loop. However, things actually get worse. In &lt;a href=&quot;https:&#x2F;&#x2F;nodejs.org&#x2F;api&#x2F;dns.html#dnslookup&quot;&gt;Implementation considerations&lt;&#x2F;a&gt;, we are warned:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Though the call to dns.lookup() will be asynchronous from JavaScript&#x27;s perspective, it is implemented as a synchronous call to getaddrinfo(3) that runs on libuv&#x27;s threadpool. This can have surprising negative performance implications for some applications, see the UV_THREADPOOL_SIZE documentation for more information.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The &lt;code&gt;getaddrinfo&lt;&#x2F;code&gt; function is written in C. It is a blocking function, which would cause problems for our event loop. To prevent blocking, the call to &lt;code&gt;getaddrinfo&lt;&#x2F;code&gt; is made using an internal threadpool. From &lt;a href=&quot;https:&#x2F;&#x2F;nodejs.org&#x2F;api&#x2F;cli.html#uv_threadpool_sizesize&quot;&gt;UV_THREADPOOL_SIZE&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Because libuv&#x27;s threadpool has a fixed size, it means that if for whatever reason any of these APIs takes a long time, other (seemingly unrelated) APIs that run in libuv&#x27;s threadpool will experience degraded performance.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If we are sending a lot of UDP messages, we absolutely do not want to be using domain names.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dns-caching&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dns-caching&quot; aria-label=&quot;Anchor link for: dns-caching&quot;&gt;DNS Caching&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We may be forced to use a domain name if the IP address (or addresses) change. In that case, our best bet is to use some sort of DNS cache. Choosing a proper implementation is for another post. However, once we decide on an cache implementation, we can combine the DNS cache with our custom lookup function to avoid calling &lt;code&gt;dns.lookup&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Landing Page Router Using Fastly Compute@Edge and WASM</title>
        <published>2022-04-24T00:00:00+00:00</published>
        <updated>2022-04-24T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/landing-page-router-using-fastly-edge-compute-wasm/" type="text/html"/>
        <id>https://hermanradtke.com/landing-page-router-using-fastly-edge-compute-wasm/</id>
        
        <summary type="html">&lt;p&gt;A company often has a landing page for first time visitors that is optimized for describing and educating that person on what product or service the company is offering. This page is usually not useful for people already familiar with the company. Ideally, a new user would see the marketing landing page and the returning user would see a more functional page. There are two common approaches to solving this problem that both have pitfalls. I want to explore a third option using Fastly&#x27;s Compute@Edge offering.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;A company often has a landing page for first time visitors that is optimized for describing and educating that person on what product or service the company is offering. This page is usually not useful for people already familiar with the company. Ideally, a new user would see the marketing landing page and the returning user would see a more functional page. There are two common approaches to solving this problem that both have pitfalls. I want to explore a third option using Fastly&#x27;s Compute@Edge offering.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Here are the two common approaches to serving different content when a user visits the company website:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A user browses to the index page of our website. That HTTP request is sent to our server and some server side language (Node.JS, PHP, Python, Ruby, etc) checks if some cookie exists and serves the appropriate page. The problem is that we can now no longer cache this page. Also, landing pages are usually static. It would be nice not use a static landing page or at least one that can be cached for a very long time.&lt;&#x2F;li&gt;
&lt;li&gt;Another option is to serve always the same landing page user browses to the index page of our website. We can cache this page at the edge for a very long time. Once the page loads, we can use JavaScript to check if some cookie exists and redirect the user to the more functional page. The problem is that a returning user will often see the marketing landing page flicker before they are redirected to the more functional page. Even if we put the JavaScript high up in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;&#x2F;code&gt; element and try to prevent the flicker, we have a more subtle problem. We responded with a bunch of content that we immediately through away. This is wasteful and if we have a lot of people visiting our website, the bandwidth adds up.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;A third option I want to explore is to perform this logic in the CDN itself. A user browses to the index page of our website and that HTTP request first goes to our CDN. We have some compute that checks for some cookie and serves the appropriate page. Since we are still within the CDN, those pages are served from the CDN cache. We are going to use Fastly as our CDN. Now, we could do this check in Fastly&#x27;s VCL itself. However, VCL is hard to dev and test. Let us explore what we can do with Rust and Compute@Edge.&lt;&#x2F;p&gt;
&lt;p&gt;This is going to require some set up. We will need a Fastly account and a website to serve as a backend. Fastly has a limited free plan, but it should be good enough. I will use my personal website as the backend. First time visitors (no cookie) will see the index page. Returning visitors will see the &lt;a href=&quot;https:&#x2F;&#x2F;hermanradtke.com&#x2F;tags&#x2F;rustlang&#x2F;&quot;&gt;Tag: #rustlang&lt;&#x2F;a&gt; page.&lt;&#x2F;p&gt;
&lt;p&gt;Go to
Start here: https:&#x2F;&#x2F;developer.fastly.com&#x2F;learning&#x2F;compute&#x2F;
Go to https:&#x2F;&#x2F;manage.fastly.com&#x2F;compute&#x2F;
Add my domain lpr.hermanradtke.com
This is the domain fastly will use
We need to create the CNAME record. Let us skip TLS for right now.
Verify it using &lt;code&gt;dig lpr.hermanradtke.com +short&lt;&#x2F;code&gt;
I made sure to name my service so it was easy to identify later
Now create a token
Go to https:&#x2F;&#x2F;manage.fastly.com&#x2F;account&#x2F;personal&#x2F;tokens
Set global scope
I set to never expire because this is a simple demo
Save and store  it securely
Now install $ brew install fastly&#x2F;tap&#x2F;fastly
I opted to set up a fastly profile so I would not have to use -t or an env var&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we can start coding.&lt;&#x2F;p&gt;
&lt;p&gt;cd &#x2F;path&#x2F;to&#x2F;Code
mkdir landing-page-router
cd !$
fastly compute init
choose option&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fastly compute init
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Creating a new Compute@Edge project.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Press ^C at any time to quit.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Name: [landing-page-router]
&lt;&#x2F;span&gt;&lt;span&gt;Description:
&lt;&#x2F;span&gt;&lt;span&gt;Author: [herman@hermanradtke.com]
&lt;&#x2F;span&gt;&lt;span&gt;Language:
&lt;&#x2F;span&gt;&lt;span&gt;[1] Rust
&lt;&#x2F;span&gt;&lt;span&gt;[2] JavaScript
&lt;&#x2F;span&gt;&lt;span&gt;[3] AssemblyScript (beta)
&lt;&#x2F;span&gt;&lt;span&gt;[4] Other (&amp;#39;bring your own&amp;#39; Wasm binary)
&lt;&#x2F;span&gt;&lt;span&gt;Choose option: [1] 1
&lt;&#x2F;span&gt;&lt;span&gt;Starter kit:
&lt;&#x2F;span&gt;&lt;span&gt;[1] Default starter for Rust
&lt;&#x2F;span&gt;&lt;span&gt;    A basic starter kit that demonstrates routing, simple synthetic responses and
&lt;&#x2F;span&gt;&lt;span&gt;    overriding caching rules.
&lt;&#x2F;span&gt;&lt;span&gt;    https:&#x2F;&#x2F;github.com&#x2F;fastly&#x2F;compute-starter-kit-rust-default
&lt;&#x2F;span&gt;&lt;span&gt;[2] Authenticate at edge with OAuth
&lt;&#x2F;span&gt;&lt;span&gt;    Connect to an identity provider such as Auth0 using OAuth 2.0 and validate
&lt;&#x2F;span&gt;&lt;span&gt;    authentication status at the Edge, to authorize access to your edge or origin hosted
&lt;&#x2F;span&gt;&lt;span&gt;    applications.
&lt;&#x2F;span&gt;&lt;span&gt;    https:&#x2F;&#x2F;github.com&#x2F;fastly&#x2F;compute-rust-auth
&lt;&#x2F;span&gt;&lt;span&gt;[3] Beacon termination
&lt;&#x2F;span&gt;&lt;span&gt;    Capture beacon data from the browser, divert beacon request payloads to a log
&lt;&#x2F;span&gt;&lt;span&gt;    endpoint, and avoid putting load on your own infrastructure.
&lt;&#x2F;span&gt;&lt;span&gt;    https:&#x2F;&#x2F;github.com&#x2F;fastly&#x2F;compute-starter-kit-rust-beacon-termination
&lt;&#x2F;span&gt;&lt;span&gt;[4] Empty starter for Rust
&lt;&#x2F;span&gt;&lt;span&gt;    An empty starter kit project template.
&lt;&#x2F;span&gt;&lt;span&gt;    https:&#x2F;&#x2F;github.com&#x2F;fastly&#x2F;compute-starter-kit-rust-empty
&lt;&#x2F;span&gt;&lt;span&gt;[5] Static content
&lt;&#x2F;span&gt;&lt;span&gt;    Apply performance, security and usability upgrades to static bucket services such as
&lt;&#x2F;span&gt;&lt;span&gt;    Google Cloud Storage or AWS S3.
&lt;&#x2F;span&gt;&lt;span&gt;    https:&#x2F;&#x2F;github.com&#x2F;fastly&#x2F;compute-starter-kit-rust-static-content
&lt;&#x2F;span&gt;&lt;span&gt;Choose option or paste git URL: [1] 4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;✓ Initializing...
&lt;&#x2F;span&gt;&lt;span&gt;✓ Fetching package template...
&lt;&#x2F;span&gt;&lt;span&gt;✓ Updating package manifest...
&lt;&#x2F;span&gt;&lt;span&gt;✓ Initializing package...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Initialized package landing-page-router to:
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;Users&#x2F;herman&#x2F;Code&#x2F;landing-page-router
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;To publish the package (build and deploy), run:
&lt;&#x2F;span&gt;&lt;span&gt;	fastly compute publish
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;To learn about deploying Compute@Edge projects using third-party orchestration tools, visit:
&lt;&#x2F;span&gt;&lt;span&gt;	https:&#x2F;&#x2F;developer.fastly.com&#x2F;learning&#x2F;integrations&#x2F;orchestration&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;SUCCESS: Initialized package landing-page-router
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we are supposed to run &lt;code&gt;$ fastly compute build&lt;&#x2F;code&gt; to verify. Great that works. But wait, I want to use familiar tools. Let us see if &lt;code&gt;cargo check&lt;&#x2F;code&gt; still works. It does.&lt;&#x2F;p&gt;
&lt;p&gt;Let us now deploy to make sure this simple example works.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fastly compute deploy
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;There is no Fastly service associated with this package. To connect to an existing service
&lt;&#x2F;span&gt;&lt;span&gt;add the Service ID to the fastly.toml file, otherwise follow the prompts to create a
&lt;&#x2F;span&gt;&lt;span&gt;service now.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Press ^C at any time to quit.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Create new service: [y&#x2F;N] N
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I stop because we already made a service. Let us find the service id. &lt;code&gt;fastly service list&lt;&#x2F;code&gt; and we can now add the id into the &lt;code&gt;fastly.toml&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;But now we need to tell Fastly to send requests to our backend&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;fastly backend create --version=2 --name=&quot;Blog&quot; --address=&quot;hermanradtke.com&quot; --use-ssl&lt;&#x2F;code&gt;
&lt;code&gt;fastly backend describe --version=latest --name=&quot;Blog&quot;&lt;&#x2F;code&gt;
&lt;code&gt;fastly service-version activate --version=latest&lt;&#x2F;code&gt;
&lt;code&gt;fastly domain validate --name=lpr.hermanradtke.com --version=active&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>How To Mock Functions That Have External HTTP Requests</title>
        <published>2022-04-23T00:00:00+00:00</published>
        <updated>2022-04-23T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/how-to-mock-functions-that-have-external-http-requests/" type="text/html"/>
        <id>https://hermanradtke.com/how-to-mock-functions-that-have-external-http-requests/</id>
        
        <summary type="html">&lt;p&gt;When writing tests, we do not want to hit the external API each time we run our tests. If we are coming from a dynamic language, such as Node.JS, we may want to a solution like &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;fetch-mock&quot;&gt;fetch-mock&lt;&#x2F;a&gt; which will patch the implementation of &lt;code&gt;fetch&lt;&#x2F;code&gt; at runtime. This is not practical in Rust. There are some attempts, like the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Shizcow&#x2F;hotpatch&quot;&gt;hotpatch&lt;&#x2F;a&gt; crate, but we will use a different strategy.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;When writing tests, we do not want to hit the external API each time we run our tests. If we are coming from a dynamic language, such as Node.JS, we may want to a solution like &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;fetch-mock&quot;&gt;fetch-mock&lt;&#x2F;a&gt; which will patch the implementation of &lt;code&gt;fetch&lt;&#x2F;code&gt; at runtime. This is not practical in Rust. There are some attempts, like the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Shizcow&#x2F;hotpatch&quot;&gt;hotpatch&lt;&#x2F;a&gt; crate, but we will use a different strategy.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The complete code for this post can be found at: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;the-cat-api-http-mocks&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;the-cat-api-http-mocks&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;calling-the-cat-api&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#calling-the-cat-api&quot; aria-label=&quot;Anchor link for: calling-the-cat-api&quot;&gt;Calling The Cat API&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let us start with an example. We will write a program to make search for cat breeds using &lt;a href=&quot;https:&#x2F;&#x2F;docs.thecatapi.com&#x2F;&quot;&gt;The Cat API&lt;&#x2F;a&gt;. First, let us discover how this API works. Reading the docs for &lt;a href=&quot;https:&#x2F;&#x2F;docs.thecatapi.com&#x2F;api-reference&#x2F;breeds&#x2F;breeds-search&quot;&gt;GET &#x2F;breeds&#x2F;search&lt;&#x2F;a&gt; we can search for breeds using the &lt;code&gt;q&lt;&#x2F;code&gt; query parameter. Using curl, we can try this out:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl https:&#x2F;&#x2F;api.thecatapi.com&#x2F;v1&#x2F;breeds&#x2F;search?q=sib | jq
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;imperial&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;8 - 16&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metric&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;4 - 7&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sibe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Siberian&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cfa_url&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;cfa.org&#x2F;Breeds&#x2F;BreedsSthruT&#x2F;Siberian.aspx&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vetstreet_url&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.vetstreet.com&#x2F;cats&#x2F;siberian&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vcahospitals_url&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;vcahospitals.com&#x2F;know-your-pet&#x2F;cat-breeds&#x2F;siberian&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;temperament&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Curious, Intelligent, Loyal, Sweet, Agile, Playful, Affectionate&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;origin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Russia&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;country_codes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RU&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;country_code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RU&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The Siberians dog like temperament and affection makes the ideal lap cat and will live quite happily indoors. Very agile and powerful, the Siberian cat can easily leap and reach high places, including the tops of refrigerators and even doors. &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;life_span&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;12 - 15&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;indoor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lap&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alt_names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Moscow Semi-longhair, HairSiberian Forest Cat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;adaptability&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;affection_level&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;child_friendly&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dog_friendly&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;energy_level&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;grooming&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;health_issues&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;intelligence&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shedding_level&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;social_needs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stranger_friendly&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vocalisation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;experimental&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hairless&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;natural&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rare&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rex&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;suppressed_tail&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;short_legs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wikipedia_url&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Siberian_(cat)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hypoallergenic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reference_image_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3bkZAjRh1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we know how to make a request and what the shape of the response looks like, we can write a program. We will use the reqwest crate to make our HTTP requests. I will opt for blocking behavior to avoid any async type juggling.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;serde::Deserialize;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Deserialize)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Breed {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;BreedResponse = Vec&amp;lt;Breed&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;BreedResponse, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; url = format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;api.thecatapi.com&#x2F;v1&#x2F;breeds&#x2F;search?q=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, query);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp = reqwest::blocking::get(url)?.json::&amp;lt;BreedResponse&amp;gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(resp)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sib&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)?;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, resp);
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: The serde_json crate allows us to define a subset of the response. I only specified a few fields in &lt;code&gt;Breed&lt;&#x2F;code&gt; for brevity.&lt;&#x2F;p&gt;
&lt;p&gt;If we run our program, we should see something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo run
&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    Breed {
&lt;&#x2F;span&gt;&lt;span&gt;        id: &amp;quot;sibe&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        name: &amp;quot;Siberian&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;create-mocks-using-traits&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#create-mocks-using-traits&quot; aria-label=&quot;Anchor link for: create-mocks-using-traits&quot;&gt;Create Mocks Using Traits&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now, we want to test our program without making an actual HTTP request. We can use a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch10-02-traits.html&quot;&gt;trait&lt;&#x2F;a&gt; to define the types of requests we can make. We will define a trait called &lt;code&gt;TheCatApi&lt;&#x2F;code&gt; and then implement a concrete &lt;code&gt;TheCatApiClient&lt;&#x2F;code&gt; type.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;TheCatApi {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;BreedResponse, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TheCatApiClient {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TheCatApi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;TheCatApiClient {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;BreedResponse, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; url = format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;api.thecatapi.com&#x2F;v1&#x2F;breeds&#x2F;search?q=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, query);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp = reqwest::blocking::get(url)?.json::&amp;lt;BreedResponse&amp;gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(resp)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now our main function looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; client = TheCatApiClient {};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp = client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sib&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)?;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, resp);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we run our program, we should get the same output above.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have a &lt;code&gt;TheCatApi&lt;&#x2F;code&gt; trait, we can also implement a mock client. We use the output from our curl request above and implement the &lt;code&gt;search_breeds&lt;&#x2F;code&gt; function to deserialize the JSON.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TheCatApiClientMock {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TheCatApi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;TheCatApiClientMock {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_query&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;BreedResponse, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;#&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            [
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;              {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;weight&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  &amp;quot;imperial&amp;quot;: &amp;quot;8 - 16&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  &amp;quot;metric&amp;quot;: &amp;quot;4 - 7&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;id&amp;quot;: &amp;quot;sibe&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;name&amp;quot;: &amp;quot;Siberian&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;cfa_url&amp;quot;: &amp;quot;http:&#x2F;&#x2F;cfa.org&#x2F;Breeds&#x2F;BreedsSthruT&#x2F;Siberian.aspx&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;vetstreet_url&amp;quot;: &amp;quot;http:&#x2F;&#x2F;www.vetstreet.com&#x2F;cats&#x2F;siberian&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;vcahospitals_url&amp;quot;: &amp;quot;https:&#x2F;&#x2F;vcahospitals.com&#x2F;know-your-pet&#x2F;cat-breeds&#x2F;siberian&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;temperament&amp;quot;: &amp;quot;Curious, Intelligent, Loyal, Sweet, Agile, Playful, Affectionate&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;origin&amp;quot;: &amp;quot;Russia&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;country_codes&amp;quot;: &amp;quot;RU&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;country_code&amp;quot;: &amp;quot;RU&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;description&amp;quot;: &amp;quot;The Siberians dog like temperament and affection makes the ideal lap cat and will live quite happily indoors. Very agile and powerful, the Siberian cat can easily leap and reach high places, including the tops of refrigerators and even doors. &amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;life_span&amp;quot;: &amp;quot;12 - 15&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;indoor&amp;quot;: 0,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;lap&amp;quot;: 1,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;alt_names&amp;quot;: &amp;quot;Moscow Semi-longhair, HairSiberian Forest Cat&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;adaptability&amp;quot;: 5,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;affection_level&amp;quot;: 5,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;child_friendly&amp;quot;: 4,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;dog_friendly&amp;quot;: 5,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;energy_level&amp;quot;: 5,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;grooming&amp;quot;: 2,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;health_issues&amp;quot;: 2,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;intelligence&amp;quot;: 5,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;shedding_level&amp;quot;: 3,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;social_needs&amp;quot;: 4,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;stranger_friendly&amp;quot;: 3,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;vocalisation&amp;quot;: 1,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;experimental&amp;quot;: 0,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;hairless&amp;quot;: 0,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;natural&amp;quot;: 1,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;rare&amp;quot;: 0,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;rex&amp;quot;: 0,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;suppressed_tail&amp;quot;: 0,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;short_legs&amp;quot;: 0,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;wikipedia_url&amp;quot;: &amp;quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Siberian_(cat)&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;hypoallergenic&amp;quot;: 1,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;quot;reference_image_id&amp;quot;: &amp;quot;3bkZAjRh1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;              }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;#;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp: BreedResponse = serde_json::from_str(data)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(resp)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also shorten this up by doing &lt;code&gt;BreedResponse { id: &quot;sibe&quot;, name: &quot;Siberian&quot; }&lt;&#x2F;code&gt; but for real world examples I find it easier to paste the JSON string.&lt;&#x2F;p&gt;
&lt;p&gt;Now we can wire up some tests. In this simple case, we are only testing that we implemented the &lt;code&gt;BreedResponse&lt;&#x2F;code&gt; type and &lt;code&gt;Breed&lt;&#x2F;code&gt; struct correctly.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TheCatApiClientMock {}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TheCatApi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;TheCatApiClientMock {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_query&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        ) -&amp;gt; Result&amp;lt;BreedResponse, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; removed for brevity. use implementation above
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; client = TheCatApiClientMock {};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp = client
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;does not matter what i put&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search_breeds failed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(resp[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].id, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sibe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(resp[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].name, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Siberian&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo test
&lt;&#x2F;span&gt;&lt;span&gt;    Finished test [unoptimized + debuginfo] target(s) in 0.15s
&lt;&#x2F;span&gt;&lt;span&gt;     Running unittests src&#x2F;main.rs (target&#x2F;debug&#x2F;deps&#x2F;rust_mocks-aa82d6388d1da1bd)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;running 1 test
&lt;&#x2F;span&gt;&lt;span&gt;test tests::search_breeds ... ok
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we should also test a decoding failure to make sure we are testing what we expect.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search_breeds_decode_error&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TheCatApiClientMock {}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TheCatApi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;TheCatApiClientMock {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_query&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        ) -&amp;gt; Result&amp;lt;BreedResponse, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nope&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp: BreedResponse = serde_json::from_str(data)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(resp)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; client = TheCatApiClientMock {};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; err = client
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;does not matter what i put&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_err&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(err.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expected ident at line 2 column 18&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that I put the mock client implementation inside the test function. If we define it outside the test function, then each mock needs a unique name.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;injecting-traits-as-dependencies&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#injecting-traits-as-dependencies&quot; aria-label=&quot;Anchor link for: injecting-traits-as-dependencies&quot;&gt;Injecting Traits As Dependencies&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This is all good but we have side stepped a big part of implementing this strategy in a real program. A big reason people reach for testing libraries like &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;fetch-mock&quot;&gt;fetch-mock&lt;&#x2F;a&gt; is because they have no other way to tell their function to use a different implementation of fetch. Indeed, we need to structure our program to inject dependencies. I mostly write web servers, so let us create a simple web server for a more real world example. Our web server will accept a request to search for breeds and then use our implementation of &lt;code&gt;TheCatApi&lt;&#x2F;code&gt; trait get the data. I am going to use &lt;a href=&quot;https:&#x2F;&#x2F;rocket.rs&quot;&gt;rocket.rs&lt;&#x2F;a&gt; as it has really good docs. I will also be using the v0.4 version, which is blocking. Be aware that the v0.4 version requires the nightly compiler.&lt;&#x2F;p&gt;
&lt;p&gt;When we create our web server, we want to inject our dependencies. Specifically, we want to inject &lt;code&gt;TheCatApiClient&lt;&#x2F;code&gt;. We can do this in rocket.rs by using the &lt;a href=&quot;https:&#x2F;&#x2F;api.rocket.rs&#x2F;v0.4&#x2F;rocket&#x2F;struct.Rocket.html#method.manage&quot;&gt;manage&lt;&#x2F;a&gt; method. This will allow us to access the client from the request handler.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; the_cat_api_client = TheCatApiClient {};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    rocket::ignite()
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we inject our dependency here
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;manage&lt;&#x2F;span&gt;&lt;span&gt;(the_cat_api_client)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, routes![index, get_breed])
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;launch&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;breed?&amp;lt;search&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_breed&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we access our dependency here
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;: State&amp;lt;TheCatApiClient&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;RawStr,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;String, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp = client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(search)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(resp[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can run our server&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo run
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling rust-mocks v0.1.0 (&#x2F;Users&#x2F;herman&#x2F;Code&#x2F;rust-mocks)
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev [unoptimized + debuginfo] target(s) in 2.10s
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target&#x2F;debug&#x2F;rust-mocks`
&lt;&#x2F;span&gt;&lt;span&gt;🔧 Configured for development.
&lt;&#x2F;span&gt;&lt;span&gt;    =&amp;gt; address: localhost
&lt;&#x2F;span&gt;&lt;span&gt;    =&amp;gt; port: 8000
&lt;&#x2F;span&gt;&lt;span&gt;    =&amp;gt; log: normal
&lt;&#x2F;span&gt;&lt;span&gt;    =&amp;gt; workers: 16
&lt;&#x2F;span&gt;&lt;span&gt;    =&amp;gt; secret key: generated
&lt;&#x2F;span&gt;&lt;span&gt;    =&amp;gt; limits: forms = 32KiB
&lt;&#x2F;span&gt;&lt;span&gt;    =&amp;gt; keep-alive: 5s
&lt;&#x2F;span&gt;&lt;span&gt;    =&amp;gt; read timeout: 5s
&lt;&#x2F;span&gt;&lt;span&gt;    =&amp;gt; write timeout: 5s
&lt;&#x2F;span&gt;&lt;span&gt;    =&amp;gt; tls: disabled
&lt;&#x2F;span&gt;&lt;span&gt;🛰  Mounting &#x2F;:
&lt;&#x2F;span&gt;&lt;span&gt;    =&amp;gt; GET &#x2F;breed?&amp;lt;search&amp;gt; (get_breed)
&lt;&#x2F;span&gt;&lt;span&gt;🚀 Rocket has launched from http:&#x2F;&#x2F;localhost:8000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and make a request&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;$ curl &amp;#39;localhost:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8000&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;breed?search=cal&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;California Spangled
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we have a working web server that makes requests to The Cat API, we want to write a test for our &lt;code&gt;get_breed&lt;&#x2F;code&gt; handler. The rocket.rs framework makes this fairly straight-forward as &lt;code&gt;client&lt;&#x2F;code&gt; is a parameter to &lt;code&gt;get_breeds&lt;&#x2F;code&gt;. We will need to change the type of client from the concrete implementation of &lt;code&gt;TheCatApiClient&lt;&#x2F;code&gt; to a type that will allow us to use any implementation of the &lt;code&gt;TheCatApi&lt;&#x2F;code&gt; trait. There are two ways to do this: generics and boxed traits. Unfortunately, rocket.rs does not allow us to use generic functions. If we try to write a generic function, then we will get a compiler error.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;breed?&amp;lt;search&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_breed&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: TheCataApi&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;: State&amp;lt;T&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;---- compiler error here
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;RawStr,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;String, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, boxed traits it is! We only create one instance of our API client when our program runs, so it creating our client on the stack or heap does not make much of a difference.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;breed?&amp;lt;search&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_breed&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;: State&amp;lt;Box&amp;lt;dyn TheCatApi&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;RawStr,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;String, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp = client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(search)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(resp[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We need to update our main function as well.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; the_cat_api_client = Box::new(TheCatApiClient {});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    rocket::ignite()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;manage&lt;&#x2F;span&gt;&lt;span&gt;(the_cat_api_client)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, routes![index, get_breed])
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;launch&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now our &lt;code&gt;get_breed&lt;&#x2F;code&gt; function can accept any implementation of &lt;code&gt;TheCatApi&lt;&#x2F;code&gt; trait. We have one more thing to do before we can write our test. Notice that the &lt;code&gt;client&lt;&#x2F;code&gt; type in &lt;code&gt;get_breed&lt;&#x2F;code&gt; is &lt;code&gt;State&amp;lt;Box&amp;lt;dyn TheCatApi&amp;gt;&amp;gt;&lt;&#x2F;code&gt;. We need some way of creating that &lt;code&gt;State&lt;&#x2F;code&gt; type. The rocket.rs docs have a &lt;a href=&quot;https:&#x2F;&#x2F;api.rocket.rs&#x2F;v0.4&#x2F;rocket&#x2F;request&#x2F;struct.State.html#testing-with-state&quot;&gt;Testing with &lt;code&gt;State&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; section that gives us the hint. So, to make this work we will need to extract the set up logic for our web server out of the &lt;code&gt;main&lt;&#x2F;code&gt; function. We create a &lt;code&gt;setup&lt;&#x2F;code&gt; function that allows us to pass in an implementation of &lt;code&gt;TheCatApi&lt;&#x2F;code&gt; trait.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;the_cat_api&lt;&#x2F;span&gt;&lt;span&gt;: Box&amp;lt;dyn TheCatApi&amp;gt;) -&amp;gt; Rocket {
&lt;&#x2F;span&gt;&lt;span&gt;    rocket::ignite()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;manage&lt;&#x2F;span&gt;&lt;span&gt;(the_cat_api)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, routes![index, get_breed])
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; the_cat_api_client = Box::new(TheCatApiClient {});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rocket = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;(the_cat_api_client);
&lt;&#x2F;span&gt;&lt;span&gt;    rocket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;launch&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With that in place, we can write a test that allows us to ensure &lt;code&gt;get_breed&lt;&#x2F;code&gt; succeeds.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;breed_succeeds&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TheCatApiClientMock {}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TheCatApi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;TheCatApiClientMock {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        ) -&amp;gt; Result&amp;lt;BreedResponse, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; removed for brevity. use implementation above
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create our mock client
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mock_client = Box::new(TheCatApiClientMock {});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; inject it into our web server
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rocket = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;(mock_client);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; get our state
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; state: State&amp;lt;Box&amp;lt;dyn TheCatApi&amp;gt;&amp;gt; =
&lt;&#x2F;span&gt;&lt;span&gt;        State::from(&amp;amp;rocket).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;managing `TheCatApiClientMock`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_breed&lt;&#x2F;span&gt;&lt;span&gt;(state, RawStr::from_str(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sib&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;get_breed failed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(resp, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Siberian&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can also create a mock client that fails.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;breed_decode_error&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TheCatApiClientMock {}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TheCatApi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;TheCatApiClientMock {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search_breeds&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_query&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        ) -&amp;gt; Result&amp;lt;BreedResponse, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nope&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp: BreedResponse = serde_json::from_str(data)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(resp)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mock_client = Box::new(TheCatApiClientMock {});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rocket = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;(mock_client);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; state: State&amp;lt;Box&amp;lt;dyn TheCatApi&amp;gt;&amp;gt; =
&lt;&#x2F;span&gt;&lt;span&gt;        State::from(&amp;amp;rocket).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;managing `TheCatApiClientMock`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; err = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_breed&lt;&#x2F;span&gt;&lt;span&gt;(state, RawStr::from_str(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sib&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_err&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(err.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expected ident at line 1 column 2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;further-discussion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#further-discussion&quot; aria-label=&quot;Anchor link for: further-discussion&quot;&gt;Further Discussion&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Structuring our application this way makes it easier to inject dependencies. I tend to inject any dependency that is accessing the network or file system. This includes common parts of a web server like databases, loggers, tracing and API clients. The benefits go beyond testing.&lt;&#x2F;p&gt;
&lt;p&gt;When serverless computing came onto the scene, many developers would write their serverless function in such a way that it could only run in the cloud. This created painfully long dev cycles where each change would take 30 seconds to upload to the cloud to verify. Some folks reached for complex solutions like &lt;a href=&quot;https:&#x2F;&#x2F;www.serverless.com&#x2F;&quot;&gt;serverles framework&lt;&#x2F;a&gt; that tried to emulate the behavior of the cloud. It may have been better to design the application to accept a &lt;code&gt;Server&lt;&#x2F;code&gt; trait. We could implement that trait to work for &lt;a href=&quot;https:&#x2F;&#x2F;hyper.rs&#x2F;&quot;&gt;hyper.rs&lt;&#x2F;a&gt; and to work for the cloud implementation. Our dev cycle is now much faster and has less complexity than an emulated system.&lt;&#x2F;p&gt;
&lt;p&gt;This starts to look like &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hexagonal_architecture_(software)&quot;&gt;Hexagonal architecture&lt;&#x2F;a&gt;. We define traits for our network and filesystem dependencies so we can change the behavior of the system. Do not go overboard on this pattern. I tend to implement a trait when the need arises. I also like the &lt;a href=&quot;https:&#x2F;&#x2F;www.destroyallsoftware.com&#x2F;talks&#x2F;boundaries&quot;&gt;Boundaries&lt;&#x2F;a&gt; talk by Gary Bernhardt.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;criticism-and-alternatives&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#criticism-and-alternatives&quot; aria-label=&quot;Anchor link for: criticism-and-alternatives&quot;&gt;Criticism and Alternatives&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;One downside to this approach is that we are not testing the actual implementation of &lt;code&gt;search_breeds&lt;&#x2F;code&gt;. We may have a bug in our code that does not show up in our tests. It is important that we keep our &lt;code&gt;search_breeds&lt;&#x2F;code&gt; function as small as possible to mitigate this downside.&lt;&#x2F;p&gt;
&lt;p&gt;If testing the actual implementation of &lt;code&gt;search_breeds&lt;&#x2F;code&gt; is a real concern, then we want to reach for libraries like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ggriffiniii&#x2F;httptest&quot;&gt;httptest&lt;&#x2F;a&gt;. This will define a local web server that can be configured to return specific responses. If we have other types of dependencies, like a database, then we can look for an in-memory implementation of that database. There is no silver bullet solution, so pick the option that best suits your needs.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>WASI example using Rust and Lucet</title>
        <published>2019-04-01T00:00:00+00:00</published>
        <updated>2019-04-01T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2019/04/01/wasi-example-using-rust-and-lucet.html/" type="text/html"/>
        <id>https://hermanradtke.com/2019/04/01/wasi-example-using-rust-and-lucet.html/</id>
        
        <summary type="html">&lt;p&gt;Lucet is Fastly&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.fastly.com&#x2F;blog&#x2F;announcing-lucet-fastly-native-webassembly-compiler-runtime&quot;&gt;native WebAssembly compiler and runtime&lt;&#x2F;a&gt;. Using the Lucet runtime and Rust&#x27;s &lt;code&gt;wasm32-unknown-wasi&lt;&#x2F;code&gt; target, we can create a WASM program that runs on the server.&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;Lucet is Fastly&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.fastly.com&#x2F;blog&#x2F;announcing-lucet-fastly-native-webassembly-compiler-runtime&quot;&gt;native WebAssembly compiler and runtime&lt;&#x2F;a&gt;. Using the Lucet runtime and Rust&#x27;s &lt;code&gt;wasm32-unknown-wasi&lt;&#x2F;code&gt; target, we can create a WASM program that runs on the server.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;At the time this blog post was written, the &lt;code&gt;wasm32-unknown-wasi&lt;&#x2F;code&gt; target is only available on Rust nightly. Make sure you are using a version of nightly that is as recent as April 1, 2019.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; rustup update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;info:&lt;&#x2F;span&gt;&lt;span&gt; syncing channel updates for &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stable-x86_64-apple-darwin&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;info:&lt;&#x2F;span&gt;&lt;span&gt; syncing channel updates for &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nightly-x86_64-apple-darwin&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;352.7&lt;&#x2F;span&gt;&lt;span&gt; KiB &#x2F; 352.7 KiB (100 %)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;80.0&lt;&#x2F;span&gt;&lt;span&gt; KiB&#x2F;s ETA:   0 s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;info:&lt;&#x2F;span&gt;&lt;span&gt; latest update on 2019-04-01, rust version 1.35.0-nightly (e3428db7c 2019-03-31)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add the &lt;code&gt;wasm32-unknown-wasi&lt;&#x2F;code&gt; target using &lt;code&gt;rustup&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; rustup target add wasm32-unknown-wasi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --toolchain&lt;&#x2F;span&gt;&lt;span&gt; nightly
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;info:&lt;&#x2F;span&gt;&lt;span&gt; downloading component &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rust-std&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; for &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wasm32-unknown-wasi&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10.4&lt;&#x2F;span&gt;&lt;span&gt; MiB &#x2F;  10.4 MiB (100 %)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1.1&lt;&#x2F;span&gt;&lt;span&gt; MiB&#x2F;s ETA:   0 s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;info:&lt;&#x2F;span&gt;&lt;span&gt; installing component &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rust-std&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; for &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wasm32-unknown-wasi&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Create a new binary, via Cargo and compile it to &lt;code&gt;wasm32-unknown-wasi&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo init hello
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Created&lt;&#x2F;span&gt;&lt;span&gt; binary (application) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;package
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd hello&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo +nightly build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --target&lt;&#x2F;span&gt;&lt;span&gt; wasm32-unknown-wasi
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Compiling&lt;&#x2F;span&gt;&lt;span&gt; hello v0.1.0 (&#x2F;Users&#x2F;herman&#x2F;Code&#x2F;hello)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Finished&lt;&#x2F;span&gt;&lt;span&gt; dev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;unoptimized + debuginfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; target(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; 0.59s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We now have a &lt;code&gt;hello.wasm&lt;&#x2F;code&gt; file that supports &lt;a href=&quot;https:&#x2F;&#x2F;hacks.mozilla.org&#x2F;2019&#x2F;03&#x2F;standardizing-wasi-a-webassembly-system-interface&#x2F;&quot;&gt;WASI&lt;&#x2F;a&gt;. The &lt;code&gt;hello.wasm&lt;&#x2F;code&gt; file will not run on its own though. We will use Fastly&#x27;s Lucet runtime to get our program running. I created a Docker container with Lucet already built at https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;hjr3&#x2F;lucet. I wrote a &lt;a href=&quot;&#x2F;2019&#x2F;03&#x2F;31&#x2F;lucet-in-five-minutes.html&quot;&gt;blog post&lt;&#x2F;a&gt; on this if you want more details. Use the &lt;code&gt;hjr3&#x2F;lucet&lt;&#x2F;code&gt; container to build native &lt;code&gt;x86_64&lt;&#x2F;code&gt; code from our WASM file and then run it using the Lucet runtime:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --rm -it -v &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&#x2F;usr&#x2F;local&#x2F;src hjr3&#x2F;lucet lucetc-wasi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; hello.so target&#x2F;wasm32-unknown-wasi&#x2F;debug&#x2F;hello.wasm
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --rm -it -v &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&#x2F;usr&#x2F;local&#x2F;src hjr3&#x2F;lucet lucet-wasi hello.so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hello,&lt;&#x2F;span&gt;&lt;span&gt; world!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One neat thing about this example is our local development operating system does not have to match our target runtime operating system. We can compile our Rust program locally on MacOS and only use the &lt;code&gt;hjr3&#x2F;lucet&lt;&#x2F;code&gt; docker container (which runs Ubuntu Xenial) to convert&#x2F;run the program.&lt;&#x2F;p&gt;
&lt;p&gt;WASI is brand new and a lot of development is still going on. From the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;59464&quot;&gt;Rust PR&lt;&#x2F;a&gt; that added support for the &lt;code&gt;wasm32-unknown-wasi&lt;&#x2F;code&gt; target:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The wasi target in libstd is still somewhat bare bones. This PR does not
fill out the filesystem, networking, threads, etc. Instead it only
provides the most basic of integration with the wasi syscalls...&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I plan on demonstrating more examples as libstd gets built out.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>fastly&#x2F;lucet in five minutes</title>
        <published>2019-03-31T00:00:00+00:00</published>
        <updated>2019-03-31T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2019/03/31/lucet-in-five-minutes.html/" type="text/html"/>
        <id>https://hermanradtke.com/2019/03/31/lucet-in-five-minutes.html/</id>
        
        <summary type="html">&lt;p&gt;Lucet is Fastly&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.fastly.com&#x2F;blog&#x2F;announcing-lucet-fastly-native-webassembly-compiler-runtime&quot;&gt;native WebAssembly compiler and runtime&lt;&#x2F;a&gt;. I am a big fan of Rust, Fastly and WASM. Especially WASM on the server via &lt;a href=&quot;https:&#x2F;&#x2F;hacks.mozilla.org&#x2F;2019&#x2F;03&#x2F;standardizing-wasi-a-webassembly-system-interface&#x2F;&quot;&gt;WASI&lt;&#x2F;a&gt;. I jumped right in and tried to get my own lucet program running, but the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fastly&#x2F;lucet&#x2F;blob&#x2F;8632b16faf2353727c9aa272d3ac65885eb9e1b9&#x2F;README.md&quot;&gt;setup&lt;&#x2F;a&gt; is a rather long process. My plan was to introduce lucet to some colleagues at my local Rust meetup. I am a huge fan of Rust, but the compile times are an issue. Spending 30 minutes on setup was a non-starter. I was excited when I saw that Fastly published a &lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;fastly&#x2F;lucet&quot;&gt;Docker container&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
</summary>
        
        <content type="html">&lt;p&gt;Lucet is Fastly&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.fastly.com&#x2F;blog&#x2F;announcing-lucet-fastly-native-webassembly-compiler-runtime&quot;&gt;native WebAssembly compiler and runtime&lt;&#x2F;a&gt;. I am a big fan of Rust, Fastly and WASM. Especially WASM on the server via &lt;a href=&quot;https:&#x2F;&#x2F;hacks.mozilla.org&#x2F;2019&#x2F;03&#x2F;standardizing-wasi-a-webassembly-system-interface&#x2F;&quot;&gt;WASI&lt;&#x2F;a&gt;. I jumped right in and tried to get my own lucet program running, but the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fastly&#x2F;lucet&#x2F;blob&#x2F;8632b16faf2353727c9aa272d3ac65885eb9e1b9&#x2F;README.md&quot;&gt;setup&lt;&#x2F;a&gt; is a rather long process. My plan was to introduce lucet to some colleagues at my local Rust meetup. I am a huge fan of Rust, but the compile times are an issue. Spending 30 minutes on setup was a non-starter. I was excited when I saw that Fastly published a &lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;fastly&#x2F;lucet&quot;&gt;Docker container&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The Fastly Lucet image is now available on the Docker Hub. `docker pull fastly&#x2F;lucet` and you’re all set.&lt;&#x2F;p&gt;&amp;mdash; Frank Denis (@jedisct1) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jedisct1&#x2F;status&#x2F;1111330113864548353?ref_src=twsrc%5Etfw&quot;&gt;March 28, 2019&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt;
&lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;However, this container was built for people developing on lucet. The container has all of the required dependencies, but still requires the same initial setup process. So, I decided to take advantage of Docker&#x27;s multi-stage build process to create a container that has lucet already built. It comes in at the slim size of 107 MB, which should make it fast to download.&lt;&#x2F;p&gt;
&lt;p&gt;Here is how you can get lucet running a simple Hello World program in 5 minutes.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker pull hjr3&#x2F;lucet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat hello.c
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; main(void)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;puts&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; 0;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --rm -it -v &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&#x2F;usr&#x2F;local&#x2F;src hjr3&#x2F;lucet wasm32-unknown-wasi-clang&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -Ofast -o&lt;&#x2F;span&gt;&lt;span&gt; hello.wasm hello.c
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --rm -it -v &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&#x2F;usr&#x2F;local&#x2F;src hjr3&#x2F;lucet lucetc-wasi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; hello.so hello.wasm
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --rm -it -v &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&#x2F;usr&#x2F;local&#x2F;src hjr3&#x2F;lucet lucet-wasi hello.so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt; world
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This docker container provides a version of clang capable of compiling to wasm via the &lt;code&gt;wasm32-unknown-wasi-clang&lt;&#x2F;code&gt; command. It is a not a requirement to compile your program to wasi using &lt;code&gt;wasm32-unknown-wasi-clang&lt;&#x2F;code&gt; in this docker container. The only requirement is that you compile the program to wasi before using &lt;code&gt;lucetc-wasi&lt;&#x2F;code&gt;. Also, take note that &lt;code&gt;lucetc-wasi&lt;&#x2F;code&gt; and &lt;code&gt;lucet-wasi&lt;&#x2F;code&gt; have very similar spellings, but are indeed two different programs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;del&gt;If you are wondering why I did not demo converting a Rust program to WASI, we are blocked until &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;59464&quot;&gt;wasm32-unknown-wasi&lt;&#x2F;a&gt; is a valid target in rustup. As soon as that target is available, then I plan on creating another post showing how to get Rust + lucet working together.&lt;&#x2F;del&gt; See &lt;a href=&quot;&#x2F;2019&#x2F;04&#x2F;01&#x2F;wasi-example-using-rust-and-lucet.html&quot;&gt;WASI example using Rust and Lucet&lt;&#x2F;a&gt; for a Rust example that runs on lucet.&lt;&#x2F;p&gt;
&lt;p&gt;Lucet is not 1.0 yet and I expect to be changing it a lot. As of this moment, the &lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;hjr3&#x2F;lucet&quot;&gt;hjr3&#x2F;lucet&lt;&#x2F;a&gt; container is built against &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fastly&#x2F;lucet&#x2F;commit&#x2F;e6b399b3fc6794f8f78a8bf6ad404ca640a090c4&quot;&gt;fastly&#x2F;lucet commit e6b399b&lt;&#x2F;a&gt;. As new changes come in, I will do my best to update the container. I may setup an automated process if this proves useful to people. I will tag each version against the fastly&#x2F;lucet commit the container is built against.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Removing Connection State In mob</title>
        <published>2018-03-29T00:00:00+00:00</published>
        <updated>2018-03-29T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2018/03/29/removing-connection-state-from-mob.html/" type="text/html"/>
        <id>https://hermanradtke.com/2018/03/29/removing-connection-state-from-mob.html/</id>
        
        <content type="html">&lt;p&gt;I started writing mob, an multi-echo server using mio, in 2015. I coded mob into a mostly working state and then left it mostly alone, only updating it to work with the latest stable mio. Recently, I started looking at the code again and had the urge to improve it. In a previous &lt;a href=&quot;&#x2F;2015&#x2F;10&#x2F;23&#x2F;managing-connection-state-with-mio-rust.html&quot;&gt;post&lt;&#x2F;a&gt;, I talked about managing the state of connections in mob. In this post, I will walk through what I did to remove the need to track connection state. I wanted to remove the state because the implementation required an &lt;code&gt;O(n)&lt;&#x2F;code&gt; operation every &lt;em&gt;tick&lt;&#x2F;em&gt; of the mio event loop. It also added a fair amount of complexity to the code.&lt;&#x2F;p&gt;
&lt;p&gt;Before discussing the solution, I want to review the problem I was trying to solve. With asynchronous IO, the state of the connection and the events may get out of sync. I kept running into problems where I was processing events and would discover the connection was no longer present in the slab. This would cause mob to panic instead of resetting that connection and moving on. Here is one example of how this might happen:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mio&lt;&#x2F;strong&gt;: blocks on poll&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;client&lt;&#x2F;strong&gt;: client sends some data&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;mio&lt;&#x2F;strong&gt;: receives read event for connection A&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;mio&lt;&#x2F;strong&gt;: receives write event for connection A&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;mio&lt;&#x2F;strong&gt;: unblocks and returns 2 events&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;mob&lt;&#x2F;strong&gt;: read event is processed, there is an error and connection A is removed from slab&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;mob&lt;&#x2F;strong&gt;: write event is processed, connection A cannot be found and results in a panic&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I needed to not panic when &lt;code&gt;connection A&lt;&#x2F;code&gt; was not present in the slab. You can read that previous &lt;a href=&quot;&#x2F;2015&#x2F;10&#x2F;23&#x2F;managing-connection-state-with-mio-rust.html&quot;&gt;post&lt;&#x2F;a&gt; for the details on the scheme I concocted to work around this issue. Looking at it now, it is clear to me that I did not fully understand Rust&#x27;s ownership model and was partially working around that. I was also not clear on how mio (epoll&#x2F;kqueue) were sending events.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ownership-problems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ownership-problems&quot; aria-label=&quot;Anchor link for: ownership-problems&quot;&gt;Ownership Problems&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I have a function that, given a token, would find the corresponding connection in the connection slab. It looks like this (and used to be named &lt;code&gt;find_connection_by_token&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;connection&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;: Token) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Connection {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.conns[token]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This function takes &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt; because it needs to return a mutable reference to the &lt;code&gt;Connection&lt;&#x2F;code&gt;. When I first started writing mob, I did not yet have a good mental model on how to write Rust programs. I fought the borrow checker constantly because I would try to assign the connection to a variable, &lt;code&gt;let conn = self.connection(token);&lt;&#x2F;code&gt;, only to have the compiler tell me this mutable reference was preventing me from using the &lt;code&gt;connection&lt;&#x2F;code&gt; function again later on in the code. It is now clear to me that I should have structured my code to keep all the connection logic in one place and not try to call &lt;code&gt;self.connection(token)&lt;&#x2F;code&gt; from different functions. I was used to working in garbage collected (GC) languages and C, which have no problems if you have multiple mutable references to objects. I also did not have a clear enough mental model of how mio was working in order to design the code to keep the connection logic in one place. In &lt;code&gt;mio v0.4.x&lt;&#x2F;code&gt;, you had to implement the &lt;code&gt;Handler&lt;&#x2F;code&gt; trait which forced a certain kind of design on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;mio&#x2F;blob&#x2F;v0.4.1&#x2F;test&#x2F;test_echo_server.rs#L238&quot;&gt;code&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I did not want to rewrite large parts of mob to remove the connection state though. To make some progress in the short-term, I made sure my code never kept a reference to a connection object. To do this, I made sure to always chain calls when using the connection object. Something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;connection&lt;&#x2F;span&gt;&lt;span&gt;(token).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reregister&lt;&#x2F;span&gt;&lt;span&gt;(poll)?;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows me to call &lt;code&gt;self.connection()&lt;&#x2F;code&gt; all over my code without hold on to that reference and causing ownership problems. I still think it is a good idea to refactor the code to separate the details of mio and the domain logic of mob, but that is for another time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-events-are-triggered&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-events-are-triggered&quot; aria-label=&quot;Anchor link for: how-events-are-triggered&quot;&gt;How Events Are Triggered&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;It is helpful to understand the difference between &lt;em&gt;level-triggered&lt;&#x2F;em&gt; and &lt;em&gt;edge-triggered&lt;&#x2F;em&gt; events before reading the below explanations. Mob receives edge-triggered events. If you are not clear what &lt;em&gt;level-triggered&lt;&#x2F;em&gt; vs &lt;em&gt;edge-triggered&lt;&#x2F;em&gt; means, I suggest you read the section in &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;mio&#x2F;0.6.14&#x2F;mio&#x2F;struct.Poll.html#edge-triggered-and-level-triggered&quot;&gt;mio::Poll&lt;&#x2F;a&gt; that discusses helps define these two terms. If you want even more detail, I suggest reading &lt;a href=&quot;https:&#x2F;&#x2F;idea.popcount.org&#x2F;2017-02-20-epoll-is-fundamentally-broken-12&#x2F;&quot;&gt;Epoll is fundamentally broken 1&#x2F;2&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;idea.popcount.org&#x2F;2017-03-20-epoll-is-fundamentally-broken-22&#x2F;&quot;&gt;Epoll is fundamentally broken 2&#x2F;2&lt;&#x2F;a&gt;. Despite the sensational titles, the author of these blog posts goes through multiple examples of different types of triggering. All three of these links focus on read events. I was fuzzy about how a &lt;em&gt;write&lt;&#x2F;em&gt; event is triggered. I originally thought that it had something to do with the client making a call to read. My current understanding is that the events are triggered based on the changing state of the read and write kernel buffers for that connection (or socket).&lt;&#x2F;p&gt;
&lt;p&gt;The kernel read buffer starts out empty. At some point the kernel receives some data from the client, the kernel writes that data to the read buffer and a read event is triggered. The read buffer is now in a state of non-empty. If the kernel receives more data and writes it to the read buffer while it is in a state of non-empty, another event will not be triggered. Another read event will be triggered if, and only if, the kernel read buffer is in a state of empty and then data is written to it. If mob does not read all of the data, then the subsequent call to &lt;code&gt;poll&lt;&#x2F;code&gt; will appear to hang. What is happening is that &lt;code&gt;poll&lt;&#x2F;code&gt; will not receive another read event because the kernel read buffer is still in a non-empty state. This is why it is critically important than whenever mob receives a read event that it reads until it receives &lt;code&gt;WouldBlock&lt;&#x2F;code&gt;. This ensures the kernel read buffer is put back into a empty state and thus able to trigger another read event if it receives more data.&lt;&#x2F;p&gt;
&lt;p&gt;Write events are a little different because we usually do not have enough data to fill up the kernel write buffer until we receive &lt;code&gt;WouldBlock&lt;&#x2F;code&gt;. The kernel write buffer starts out in an empty state. When a connection registers for write, it will receive a write event due to the empty state of the buffer. The connection can then write some data, but in the mob case will most certainly not fill up the buffer as mob messages are quite small. The kernel write buffer is in a non-empty state and will not trigger another write event until the write buffer is empty. The kernel will then try to send the data to the client and once all the data is sent the kernel will trigger another write event (assuming the connection is still registered to receive write events). During the time between the initial write and the kernel sending the contents of the buffer, the connection is still allowed to write until it receives &lt;code&gt;WouldBlock&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To round out my understanding, let us also briefly talk about the hangup (hup) event. The hup event works like read and write events. The connection is in an &lt;em&gt;established&lt;&#x2F;em&gt; state. When the client closes their end of the connection, the state changes to closed (or reset) and the connection will receive the hup event.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;solution&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#solution&quot; aria-label=&quot;Anchor link for: solution&quot;&gt;Solution&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;With my improved understanding of ownership and a more accurate mental model of how the kernel sends events, the fix is pretty simple. Before processing any events, make sure the connection is in the slab. The diff of the change is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;mob&#x2F;pull&#x2F;23&#x2F;commits&#x2F;485487217ddde7d316d7c7b0ac9057696278bc43#diff-4ce93534efc34e923ce01e975eb7ed80R105&quot;&gt;here&lt;&#x2F;a&gt;. Most of the changes are removing code, so let me walk through the important parts.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.token != token &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.conns.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(token) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to find connection for {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, token);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;self.token&lt;&#x2F;code&gt; is the token for the server and is not present in the slab. The slab is indexed by the tokens, so &lt;code&gt;self.conns.contains()&lt;&#x2F;code&gt; is a constant time lookup. Much better than iterating through a list of connections. I am not quite done though. If the connection encounters some error, I need to remove it from the slab. To do this I replaced &lt;code&gt;self.find_connection_by_token(token).mark_reset();&lt;&#x2F;code&gt; with &lt;code&gt;self.remove_token(token);&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In hindsight, this was a pretty obvious change to make. Some &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;3q0hjt&#x2F;managing_connection_state_with_mio_herman_j&#x2F;cwb7n3r&#x2F;&quot;&gt;comments&lt;&#x2F;a&gt; in the &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;3q0hjt&#x2F;managing_connection_state_with_mio_herman_j&#x2F;&quot;&gt;reddit post&lt;&#x2F;a&gt; on managing the connection state were trying to explain this to me, but I did not get it at the time. There are a few other things in mob that this same pattern of an original naive solution where I now see an obvious improvement to make. I hope to make those changes as well to continue to &lt;em&gt;diff&lt;&#x2F;em&gt; my mindset between 2015 and now.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Future Based mpsc Queue Example with Tokio</title>
        <published>2017-03-03T00:00:00+00:00</published>
        <updated>2017-03-03T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2017/03/03/future-mpsc-queue-with-tokio.html/" type="text/html"/>
        <id>https://hermanradtke.com/2017/03/03/future-mpsc-queue-with-tokio.html/</id>
        
        <content type="html">&lt;p&gt;I was looking to use the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alexcrichton&#x2F;futures-rs&#x2F;blob&#x2F;0.1.10&#x2F;src&#x2F;sync&#x2F;mpsc&#x2F;mod.rs&quot;&gt;mspc queue&lt;&#x2F;a&gt; that comes in the future crate in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;weldr&quot;&gt;weldr&lt;&#x2F;a&gt;. Weldr uses hyper (which uses tokio), so it makes sense to use tokio&#x27;s Core as the executor. I did not have a good understanding of how this futures based mpsc queue worked. It has some subtle differences from the mpsc queue in the std library. I spent some time reading the documentation on https:&#x2F;&#x2F;tokio.rs&#x2F;, a lot of source code and finally ended up writing a small example program. I have written a decent amount of inline comments with my understanding of how this all works.&lt;&#x2F;p&gt;
&lt;p&gt;A complete working example can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;future-mpsc-example&quot;&gt;here&lt;&#x2F;a&gt;. I wrote this using Rust version &lt;code&gt;1.15.1 (021bd294c 2017-02-08)&lt;&#x2F;code&gt;. For crate version, please check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;future-mpsc-example&quot;&gt;Cargo.toml&lt;&#x2F;a&gt; in the repository.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; log;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; env_logger;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; futures;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; tokio_core;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::{thread, time};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::{Stream, Sink, Future};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::sync::mpsc;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio_core::reactor::Core;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Stats {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;success&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    env_logger::init().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to initialize logger&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; tokio Core is an event loop executor. An executor is what runs a future to
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; completion.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; core = Core::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to create core&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `core.remote()` is a thread safe version of `core.handle()`. Both `core.remote()`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; and `core.handle()` are used to spawn a future. When a future is _spawned_,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; it basically means that it is being executed.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; remote = core.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remote&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Now we create a multi-producer, single-consumer channel. This channel is very
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; similar to the mpsc channel in the std library. One big difference with this
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; channel is that `tx` and `rx` return futures. In order to have `tx` or `rx`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; actually do any work, they have to be _executed_ by Core.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The parameter passed to `mpsc::channel()` determines how large the queue is
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; _per tx_. Since we are cloning `tx` per iteration of the loop, we are guranteed
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 1 spot for each loop iteration. Cloning tx is how we get multiple producers.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; For more detail on mpsc, see https:&#x2F;&#x2F;tokio.rs&#x2F;docs&#x2F;going-deeper&#x2F;synchronization&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Quick note:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;    - `tx` is of type `Sink`. A sink is something that you can place a value into
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;    and then _flush_ the value into the queue.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;    - `rx` is of type `Stream`. A stream is an iterator of _future_ values.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; More details on `tx` and `rx` below. For even more detail, see
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;tokio.rs&#x2F;docs&#x2F;getting-started&#x2F;streams-and-sinks&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx, rx) = mpsc::channel(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Create a thread that performs some work.
&lt;&#x2F;span&gt;&lt;span&gt;    thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;|| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tx = tx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; INSERT WORK HERE - the work should be modeled as having a _future_ result.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; delay = time::Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            thread::sleep(delay);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; In this fake example, we do not care about the values of the `Ok` and `Err`
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; variants. thus, we can use `()` for both.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Note: `::futures::done()` will be called ::futures::result() in later
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; versions of the future crate.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; f = ::futures::done::&amp;lt;(), ()&amp;gt;(Ok(()));
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; END WORK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `remote.spawn` accepts a closure with a single parameter of type `&amp;amp;Handle`.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; In this example, the `&amp;amp;Handle` is not needed. The future returned from the
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; closure will be executed.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Note: We must use `remote.spawn()` instead of `handle.spawn()` because the
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Core was created on a different thread.
&lt;&#x2F;span&gt;&lt;span&gt;            remote.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span&gt;(|_| {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Use the `.then()` combinator to get the result of our &amp;quot;fake work&amp;quot; so we
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; can send it through the channel.
&lt;&#x2F;span&gt;&lt;span&gt;                f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Using `tx`, the result of the above work can be sent over the
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; channel. Note that we also add the `.then()` combinator. Any
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; future passed to `handle.spawn()` must be of type
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `Future&amp;lt;Item=(), Error=()&amp;gt;`. In the case of `tx.send()`, the
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `tx` (Sink) will be returned if the result was successfully
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; flushed or a `SinkError` if the result could not be flushed.
&lt;&#x2F;span&gt;&lt;span&gt;                    tx
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(res)
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tx&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; tx {
&lt;&#x2F;span&gt;&lt;span&gt;                            Ok(_tx) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                                info!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sink flushed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                                Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                            Err(e) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                                error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sink failed! {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span&gt;                                Err(())
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- no semi-colon here! Result of `tx.send.then()` is a future.
&lt;&#x2F;span&gt;&lt;span&gt;                }) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- no semi-colon here! Result of `f.then()` will be spawned.
&lt;&#x2F;span&gt;&lt;span&gt;            });
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; I created a `Stats` type here. I could have use something like `counter: usize`,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; but that implements `Copy`. I dislike examples that use types that implement
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `Copy` because they are deceptively easier to make work.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; stats = Stats { success: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, failure: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; As mentioned above, rx is a stream. That means we are expecting multiple _future_
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; values. Here we use `for_each` to yield each value as it comes through the channel.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; f2 = rx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Remember that our fake work as modeled as `::futures::result()`. We need to
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; check if the future returned the `Ok` or `Err` variant and increment the
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; counter accordingly.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; res {
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(_) =&amp;gt; stats.success += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            Err(_) =&amp;gt; stats.failure += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        info!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stats = {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, stats);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The stream will stop on `Err`, so we need to return `Ok`.
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The executor is started by the call to `core.run()` and will finish once the `f2`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; future is finished. Keep in mind that since `rx` is a stream, it will not finish
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; until there is an error. Using a stream with `core.run()` is a common pattern and
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; is how servers are normally implemented.
&lt;&#x2F;span&gt;&lt;span&gt;    core.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(f2).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Core failed to run&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Initial v0.1.0 release of weldr - a reverse proxy written in Rust</title>
        <published>2017-02-15T00:00:00+00:00</published>
        <updated>2017-02-15T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2017/02/15/weldr-reverse-proxy-initial-release-rust.html/" type="text/html"/>
        <id>https://hermanradtke.com/2017/02/15/weldr-reverse-proxy-initial-release-rust.html/</id>
        
        <content type="html">&lt;p&gt;Note: This project was originally named &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;alacrity&#x2F;issues&#x2F;69&quot;&gt;alacrity&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Over the past few months I have been working on a building a reverse proxy, called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;weldr&quot;&gt;weldr&lt;&#x2F;a&gt;, in Rust. I have just published the initial &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;weldr&#x2F;releases&#x2F;tag&#x2F;0.1.0&quot;&gt;release&lt;&#x2F;a&gt; of weldr. I have been interested in doing something with networks in Rust. I have spent a lot of time building hypermedia APIs, so doing something with HTTP seemed like a good fit. I started out using mio and later switched to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&quot;&gt;tokio&lt;&#x2F;a&gt;. While this was fun to do, I quickly realized that I was spending most of my time implementing the HTTP spec instead of building the features I was most excited about. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&quot;&gt;hyper&lt;&#x2F;a&gt; HTTP library was also switching over to tokio and way ahead of where I was at. After talking with Sean, I made the decision to use hyper as the foundation for weldr moving forward. There are still a number of things a proxy must do in order to conform with the various HTTP related RFCs. I will be working on those proxy specific requirements while adding the features that I want in a reverse proxy.&lt;&#x2F;p&gt;
&lt;p&gt;There are two general problems I am trying to solve with weldr. The first problem is that popular open source proxies do not work as well as I would like them to in dynamic cloud&#x2F;container environments. The reason is that dynamic parts of a proxy, such as the list of backend servers, are defined by a configuration file that is read when the proxy is started. I want to build a proxy that has a minimal configuration file and drive most of the behavior through a set of APIs. This may make it harder to use weldr for simple use cases, but I hope weldr can make more complex environments a lot easier. I will note that there are some products that do this now, such as NGINX Plus, but those are cost prohibitive for many.&lt;&#x2F;p&gt;
&lt;p&gt;The second, more aspirational, problem is around the &lt;em&gt;availability&lt;&#x2F;em&gt; of the proxy. If I want to put a reverse proxy in front of a critical cluster of web servers, I have two basic options: use an active&#x2F;passive setup or use DNS. For an active&#x2F;passive setup, the go to is &lt;a href=&quot;http:&#x2F;&#x2F;www.keepalived.org&#x2F;&quot;&gt;keepalived&lt;&#x2F;a&gt;. I think keepalived does a great job, but it is a real pain to setup and ensure it is working correctly. Even more so if you are trying to automate the creation of servers. I want to start mulitple weldr proxy servers and have them automatically determine a leader with one or more followers. This means that keepalived kind of logic must be embedded inside weldr. I plan on using Raft to accomplish this. The current Rust raft library is missing some features that I require though. I hope to contribute those at some point in the future. The other solution, DNS, is even more challenging to get working correctly. It may be necessary though in order to handle a large number of requests. I have some very early thoughts about making this work better as well. I hope to write about those thoughts more in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Weldr is definitely not production ready, but it is working well enough that you can play with it. I would love any feedback on what I have currently done so far and my plans for the future.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Using and_then and map combinators on the Rust Result Type</title>
        <published>2016-09-12T00:00:00+00:00</published>
        <updated>2016-09-12T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2016/09/12/rust-using-and_then-and-map-combinators-on-result-type.html/" type="text/html"/>
        <id>https://hermanradtke.com/2016/09/12/rust-using-and_then-and-map-combinators-on-result-type.html/</id>
        
        <content type="html">&lt;p&gt;If you have spent any amount of time learning Rust, you quickly become accustomed to &lt;code&gt;Option&lt;&#x2F;code&gt; and &lt;code&gt;Result&lt;&#x2F;code&gt; types. It is through these two core types that we make our programs reliable. My background is with C and dynamic languages. I found it easiest to use the &lt;code&gt;match&lt;&#x2F;code&gt; keyword when working with these types. There are also combinator functions like &lt;code&gt;map&lt;&#x2F;code&gt; and &lt;code&gt;and_then&lt;&#x2F;code&gt; which allow a set of computations to be chained together. I like to chain combinators together so error logic is separated from the main logic of the code.&lt;&#x2F;p&gt;
&lt;p&gt;I recently returned home from RustConf 2016 where the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alexcrichton&#x2F;futures-rs&quot;&gt;futures&lt;&#x2F;a&gt; crate had a &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;futures&#x2F;0.1.1&quot;&gt;0.1.1&lt;&#x2F;a&gt; release along with the first glimpses of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&quot;&gt;tokio&lt;&#x2F;a&gt;. All futures implement a &lt;code&gt;poll&lt;&#x2F;code&gt; function that returns a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alexcrichton&#x2F;futures-rs&#x2F;blob&#x2F;9bd186bef3430d26747ee886c54d5e68e0405275&#x2F;src&#x2F;lib.rs#L354&quot;&gt;Poll&lt;&#x2F;a&gt; type. The &lt;code&gt;Poll&lt;&#x2F;code&gt; type is defined as &lt;code&gt;pub type Poll&amp;lt;T, E&amp;gt; = Result&amp;lt;Async&amp;lt;T&amp;gt;, E&amp;gt;;&lt;&#x2F;code&gt;. ~~Thus, if we want to use futures, we need to be comfortable with combinator functions implemented on the core &lt;code&gt;Result&lt;&#x2F;code&gt; type. You will not be able to fall back on using the &lt;code&gt;match&lt;&#x2F;code&gt; keyword.~~Many of the examples that I have seen used combinator functions to chain futures together. We can look at how &lt;code&gt;and_then&lt;&#x2F;code&gt; and &lt;code&gt;map&lt;&#x2F;code&gt; combinators work on the &lt;code&gt;Result&lt;&#x2F;code&gt; type and get a better understanding of how combinators work without the additional mental load of trying to understand how futures work. Once we are comfortable with combinators, we should be better able to understand the examples that use combinators to chain futures together. (Edit: Revised the previous sentence per the discussion on &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;52lsbb&#x2F;using_and_then_and_map_combinators_on_the_rust&#x2F;d7lbf4n&quot;&gt;r&#x2F;rust&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;approach&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#approach&quot; aria-label=&quot;Anchor link for: approach&quot;&gt;Approach&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I will be providing explicit types throughout the examples to make it easier to understand what is happening. In the vast majority of cases, you can let compiler infer the types. In fact, it is idiomatic to let the compiler infer the types.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;result&#x2F;enum.Result.html#method.and_then&quot;&gt;Standard Library API Reference&lt;&#x2F;a&gt; for &lt;code&gt;Result&lt;&#x2F;code&gt; combinators does a good job with explanations and simple examples. However, most examples use the same type for both the &lt;code&gt;Ok&lt;&#x2F;code&gt; and &lt;code&gt;Err&lt;&#x2F;code&gt; variants. I think this makes it harder to understand what is going on. I will be using a &lt;code&gt;Err(&amp;amp;&#x27;static str)&lt;&#x2F;code&gt; variant the examples so I can use easy to identify error messages. If the &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; lifetime confuses you, know that &lt;code&gt;&amp;amp;&#x27;static str&lt;&#x2F;code&gt; means hard-coded string literal. Example: &lt;code&gt;let foo: &amp;amp;&#x27;static str = &quot;Hello World!&quot;;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;and-then-combinator&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#and-then-combinator&quot; aria-label=&quot;Anchor link for: and-then-combinator&quot;&gt;&lt;code&gt;and_then&lt;&#x2F;code&gt; Combinator&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let us start with the &lt;code&gt;and_then&lt;&#x2F;code&gt; combinator function. The &lt;code&gt;and_then&lt;&#x2F;code&gt; combinator is a function that calls a closure if, and only if, the variant of the &lt;code&gt;Result&lt;&#x2F;code&gt; enum type is &lt;code&gt;Ok(T)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;| Ok(n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;), value);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this first example, the value of &lt;code&gt;res&lt;&#x2F;code&gt; is &lt;code&gt;Ok(5)&lt;&#x2F;code&gt;. Per our definition of &lt;code&gt;and_then&lt;&#x2F;code&gt;: &lt;code&gt;and_then&lt;&#x2F;code&gt; will match on the &lt;code&gt;Ok&lt;&#x2F;code&gt; variant and call the closure with the &lt;code&gt;usize&lt;&#x2F;code&gt; value of 5 as the argument. What happens if &lt;code&gt;res&lt;&#x2F;code&gt; is an &lt;code&gt;Err&lt;&#x2F;code&gt; variant?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;let res: Result&amp;lt;usize, &amp;amp;&amp;#39;static str&amp;gt; = Err(&amp;quot;error&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;let value = res.and_then(|n: usize| Ok(n * 2)); &#x2F;&#x2F; &amp;lt;--- closure is not called
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(Err(&amp;quot;error&amp;quot;), value);```
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this second example, the value of &lt;code&gt;res&lt;&#x2F;code&gt; is &lt;code&gt;Err(&quot;error&quot;)&lt;&#x2F;code&gt;. Per our definition of &lt;code&gt;and_then&lt;&#x2F;code&gt;: &lt;code&gt;and_then&lt;&#x2F;code&gt; will match on the &lt;code&gt;Err&lt;&#x2F;code&gt; variant and &lt;em&gt;skip&lt;&#x2F;em&gt; calling the closure. The value of &lt;code&gt;Err(&quot;error&quot;)&lt;&#x2F;code&gt; will be returned as is. This is convenient as we were able to write a closure that ignored errors. The value &lt;code&gt;Err(&quot;error&quot;)&lt;&#x2F;code&gt; will be passed along in the background to the end of the combinator chain. So far we have only been returning &lt;code&gt;Ok&lt;&#x2F;code&gt; from closure. Our closure can also return an &lt;code&gt;Err&lt;&#x2F;code&gt; too.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chaining-multiple-and-then-functions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chaining-multiple-and-then-functions&quot; aria-label=&quot;Anchor link for: chaining-multiple-and-then-functions&quot;&gt;Chaining Multiple &lt;code&gt;and_then&lt;&#x2F;code&gt; Functions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of multiplying, let us divide 2 by the result &lt;code&gt;n&lt;&#x2F;code&gt;. To protect against division by zero errors, we need to add another step in the chain that will return an error if the value is zero.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = res
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; n == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            Err(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cannot divide by zero&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(n)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;| Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; n)); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;--- closure is not called
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(Err(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cannot divide by zero&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), value);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The initial value of &lt;code&gt;Ok(0)&lt;&#x2F;code&gt; will be passed to the first closure. In this case, &lt;code&gt;n&lt;&#x2F;code&gt; does equal &lt;code&gt;0&lt;&#x2F;code&gt; and the closure returns &lt;code&gt;Err(&quot;cannot divide by zero&quot;)&lt;&#x2F;code&gt;. Our next call to &lt;code&gt;and_then&lt;&#x2F;code&gt; identifies that we now have an &lt;code&gt;Err&lt;&#x2F;code&gt; variant of &lt;code&gt;Result&lt;&#x2F;code&gt; and does not call the closure.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;flattening-results&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#flattening-results&quot; aria-label=&quot;Anchor link for: flattening-results&quot;&gt;Flattening Results&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;There are times when we have nested &lt;code&gt;Result&lt;&#x2F;code&gt; types. It is generally a good strategy to try and flatten the result out. For example, we can flatten &lt;code&gt;Result&amp;lt;Result&amp;lt;usize, &amp;amp;&#x27;static str&amp;gt;, &amp;amp;&#x27;static str&amp;gt;&lt;&#x2F;code&gt; to &lt;code&gt;Result&amp;lt;usize, &amp;amp;&#x27;static str&amp;gt;&lt;&#x2F;code&gt;. A flatter &lt;code&gt;Result&lt;&#x2F;code&gt; is generally easier for later code to deal with.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res: Result&amp;lt;Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Ok(Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = res
&lt;&#x2F;span&gt;&lt;span&gt;	.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;		n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;--- this is either Ok(usize) or Err(&amp;amp;&amp;#39;static str)
&lt;&#x2F;span&gt;&lt;span&gt;	})
&lt;&#x2F;span&gt;&lt;span&gt;	.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;		Ok(n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;), value);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the above example, the first &lt;code&gt;and_then&lt;&#x2F;code&gt; closure is returning &lt;code&gt;n&lt;&#x2F;code&gt;. Note that in previous examples, we were wrapping our return value in either the &lt;code&gt;Ok&lt;&#x2F;code&gt; or &lt;code&gt;Err&lt;&#x2F;code&gt; variant of the &lt;code&gt;Result&lt;&#x2F;code&gt; enum. In this example, our goal is to flatten the result so we will not explicitly return &lt;code&gt;Ok&lt;&#x2F;code&gt; or &lt;code&gt;Err&lt;&#x2F;code&gt;. The value of &lt;code&gt;n&lt;&#x2F;code&gt; is going to be either &lt;code&gt;Ok(usize)&lt;&#x2F;code&gt; or &lt;code&gt;Err(&amp;amp;&#x27;static str)&lt;&#x2F;code&gt;. As such, we can return &lt;code&gt;n&lt;&#x2F;code&gt; as it is. If the value of &lt;code&gt;n&lt;&#x2F;code&gt; is of type &lt;code&gt;Ok(usize)&lt;&#x2F;code&gt; then the value will be passed to the next &lt;code&gt;and_then&lt;&#x2F;code&gt; as expected. If the value of &lt;code&gt;n&lt;&#x2F;code&gt; is of type &lt;code&gt;Err(&amp;amp;&#x27;static str)&lt;&#x2F;code&gt; then the second &lt;code&gt;and_then&lt;&#x2F;code&gt; function will be bypassed.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;and_then&lt;&#x2F;code&gt; function is called flatMap in scala and you can see why. We are flattening the type from &lt;code&gt;Result&amp;lt;Result&amp;lt;_, _&amp;gt;, _&amp;gt;&lt;&#x2F;code&gt; to &lt;code&gt;Result&amp;lt;_, _&amp;gt;&lt;&#x2F;code&gt; by &lt;em&gt;mapping&lt;&#x2F;em&gt; variants in the internal &lt;code&gt;Result&lt;&#x2F;code&gt; to the outer &lt;code&gt;Result&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;map-combinator&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#map-combinator&quot; aria-label=&quot;Anchor link for: map-combinator&quot;&gt;&lt;code&gt;map&lt;&#x2F;code&gt; Combinator&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;So far we have been using &lt;code&gt;and_then&lt;&#x2F;code&gt; to combine computation and flatten our nested &lt;code&gt;Result&lt;&#x2F;code&gt;s. The examples have been using &lt;code&gt;Result&lt;&#x2F;code&gt;s with types that are the same types we wanted to end up with. Sometimes we are given a &lt;code&gt;Result&lt;&#x2F;code&gt; where one or both variants are not the type we want. We will use &lt;code&gt;map&lt;&#x2F;code&gt; to transform one &lt;code&gt;Result&lt;&#x2F;code&gt; type into another.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;basics&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#basics&quot; aria-label=&quot;Anchor link for: basics&quot;&gt;Basics&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If you primarily use a dynamically typed language, you may have used &lt;code&gt;map&lt;&#x2F;code&gt; as a replacement for iterating&#x2F;looping over a list of values. We can do this same thing in Rust too.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;], value);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using &lt;code&gt;map&lt;&#x2F;code&gt; with a &lt;code&gt;Result&lt;&#x2F;code&gt; type is a little different. The &lt;code&gt;map&lt;&#x2F;code&gt; function calls a closure if, and only if, the variant of the &lt;code&gt;Result&lt;&#x2F;code&gt; enum is &lt;code&gt;Ok(T)&lt;&#x2F;code&gt;. Here is our very first &lt;code&gt;and_then&lt;&#x2F;code&gt; example, but using &lt;code&gt;map&lt;&#x2F;code&gt; instead.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;), value);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This looks very similar to the first &lt;code&gt;and_then&lt;&#x2F;code&gt; example, but notice that we returned &lt;code&gt;Ok(n * 2)&lt;&#x2F;code&gt; in &lt;code&gt;and_then&lt;&#x2F;code&gt; example and we are returning &lt;code&gt;n * 2&lt;&#x2F;code&gt; in this example. The &lt;code&gt;map&lt;&#x2F;code&gt; function &lt;em&gt;always&lt;&#x2F;em&gt; wraps the return value of the closure in the &lt;code&gt;Ok&lt;&#x2F;code&gt; variant.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mapping-the-ok-result-variant-to-another-type&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#mapping-the-ok-result-variant-to-another-type&quot; aria-label=&quot;Anchor link for: mapping-the-ok-result-variant-to-another-type&quot;&gt;Mapping the &lt;code&gt;Ok&lt;&#x2F;code&gt; Result Variant To Another Type&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Let us look at an example where the &lt;code&gt;Ok(T)&lt;&#x2F;code&gt; variant of the &lt;code&gt;Result&lt;&#x2F;code&gt; enum is of the wrong type. Example: We are given &lt;code&gt;Result&amp;lt;i32, _&amp;gt;&lt;&#x2F;code&gt;, but we want &lt;code&gt;Result&amp;lt;usize, _&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; given: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; desired: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = given.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;| n as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;), desired);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = desired.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;| Ok(n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;), value);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, the value of &lt;code&gt;res&lt;&#x2F;code&gt; is &lt;code&gt;Ok(5i32)&lt;&#x2F;code&gt;. Per our definition of &lt;code&gt;map&lt;&#x2F;code&gt;, &lt;code&gt;map&lt;&#x2F;code&gt; will match on the &lt;code&gt;Ok&lt;&#x2F;code&gt; variant and call the closure with the &lt;code&gt;i32&lt;&#x2F;code&gt; value of 5 as the argument. When the closure returns a value, &lt;code&gt;map&lt;&#x2F;code&gt; will wrap that value in &lt;code&gt;Ok&lt;&#x2F;code&gt; and return it.&lt;&#x2F;p&gt;
&lt;p&gt;If the given value is an &lt;code&gt;Err&lt;&#x2F;code&gt; variant, it is passed through both the &lt;code&gt;map&lt;&#x2F;code&gt; and &lt;code&gt;and_then&lt;&#x2F;code&gt; functions without the closure being called.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; given: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Err(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;an error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; desired: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = given.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;| n as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;--- closure not called
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(Err(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;an error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), desired);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = desired.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;| Ok(n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;--- closure not called
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(Err(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;an error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), value);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;mapping-both-variants-of-result&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#mapping-both-variants-of-result&quot; aria-label=&quot;Anchor link for: mapping-both-variants-of-result&quot;&gt;Mapping Both Variants of Result&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;What if both variants of the Result were different? Example: We are given &lt;code&gt;Result&amp;lt;i32, MyError&amp;gt;&lt;&#x2F;code&gt;, but we want &lt;code&gt;Result&amp;lt;usize, &amp;amp;&#x27;static str&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We only transform the &lt;code&gt;Ok(i32)&lt;&#x2F;code&gt; variant in the above example. In this example, we will need to also transform the &lt;code&gt;Err(MyError)&lt;&#x2F;code&gt; variant into &lt;code&gt;Err(&amp;amp;&#x27;static str)&lt;&#x2F;code&gt;. In order to do this, we will need to use &lt;code&gt;map_err&lt;&#x2F;code&gt; to handle the &lt;code&gt;Err(E)&lt;&#x2F;code&gt; variant. The &lt;code&gt;map_err&lt;&#x2F;code&gt; combinator function is the opposite of &lt;code&gt;map&lt;&#x2F;code&gt; because it matches only on &lt;code&gt;Err(E)&lt;&#x2F;code&gt; variants of &lt;code&gt;Result&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;MyError { Bad };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; given: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, MyError&amp;gt; = Err(MyError::Bad);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; desired: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = given
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;       n as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_e&lt;&#x2F;span&gt;&lt;span&gt;: MyError| {
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bad MyError&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = desired.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;| Ok(n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(Err(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bad MyError&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), value);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You must understand that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;&#x2F;code&gt; only handles the &lt;code&gt;Ok(T)&lt;&#x2F;code&gt; variant of &lt;code&gt;Result&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;map_err&lt;&#x2F;code&gt; only handle the &lt;code&gt;Err(E)&lt;&#x2F;code&gt; variant of &lt;code&gt;Result&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;different-return-types-using-and-then-and-map&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#different-return-types-using-and-then-and-map&quot; aria-label=&quot;Anchor link for: different-return-types-using-and-then-and-map&quot;&gt;Different Return Types Using &lt;code&gt;and_then&lt;&#x2F;code&gt; And &lt;code&gt;map&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;and_then&lt;&#x2F;code&gt;, &lt;code&gt;map&lt;&#x2F;code&gt; and &lt;code&gt;map_err&lt;&#x2F;code&gt; functions are not constrained to return the same type inside their variants. The &lt;code&gt;map&lt;&#x2F;code&gt; functions can be given &lt;code&gt;Ok(T)&lt;&#x2F;code&gt; and return &lt;code&gt;Ok(U)&lt;&#x2F;code&gt;. The &lt;code&gt;map_err&lt;&#x2F;code&gt; function can be given &lt;code&gt;Err(E)&lt;&#x2F;code&gt; and return &lt;code&gt;Err(F)&lt;&#x2F;code&gt;. The &lt;code&gt;and_then&lt;&#x2F;code&gt; function can be given &lt;code&gt;Ok(T)&lt;&#x2F;code&gt; and return &lt;code&gt;Ok(U)&lt;&#x2F;code&gt; or &lt;code&gt;Err(F)&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Let us try a complicated example where we are given a nested Result, but none of the types match the desired types we want. Example: We are given &lt;code&gt;Result&amp;lt;Result&amp;lt;i32, FooError&amp;gt;, BarError&amp;gt;&lt;&#x2F;code&gt;, but we want &lt;code&gt;Result&amp;lt;usize, &amp;amp;&#x27;static str&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;FooError {
&lt;&#x2F;span&gt;&lt;span&gt;    Bad,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;BarError {
&lt;&#x2F;span&gt;&lt;span&gt;    Horrible,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res: Result&amp;lt;Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, FooError&amp;gt;, BarError&amp;gt; = Ok(Err(FooError::Bad));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = res
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `map` will only call the closure for `Ok(Result&amp;lt;i32, FooError&amp;gt;)`
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, FooError&amp;gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; transform `Ok(Result&amp;lt;i32, FooError&amp;gt;)` into `Ok(Result&amp;lt;usize, &amp;amp;&amp;#39;static str&amp;gt;)`
&lt;&#x2F;span&gt;&lt;span&gt;        res
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; transform i32 to usize
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;| n as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; transform `FooError` into `&amp;#39;static str`
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_e&lt;&#x2F;span&gt;&lt;span&gt;: FooError| &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bad FooError&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `map_err` will only call the closure for `Err(BarError)`
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_e&lt;&#x2F;span&gt;&lt;span&gt;: BarError| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; transform `BarError` into `&amp;#39;static str`
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;horrible BarError&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `and_then` will only call the closure for `Ok(Result&amp;lt;usize, &amp;amp;&amp;#39;static str&amp;gt;)`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Note: this is result of our first `map` above
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; transform (flatten) `Ok(Result&amp;lt;usize, &amp;amp;&amp;#39;static str&amp;gt;)` into `Result&amp;lt;usize, &amp;amp;&amp;#39;static str&amp;gt;`
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; this may be `Ok(Ok(usize))` _or_ `Ok(Err(&amp;amp;&amp;#39;static str))`
&lt;&#x2F;span&gt;&lt;span&gt;        n
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `and_then` will only call the closure for `Ok(usize)`
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; transform Ok(usize) into Ok(usize * 2)
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assert_eq!(Err(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bad FooError&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), value);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I decided to inline the explanation into the comments in an effort to make things as clear as possible. You can see how quickly things get complicated. It is my general strategy to try and flatten the nested &lt;code&gt;Result&lt;&#x2F;code&gt; out as early as possible to simplify later combinators.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A lot of functions return &lt;code&gt;Result&lt;&#x2F;code&gt; to represent the happy-path value and the error case. Using combinators can help isolate error handling from normal computation. Combinators also allow us to pass along errors all the way to the end. I like the &lt;a href=&quot;https:&#x2F;&#x2F;fsharpforfunandprofit.com&#x2F;rop&#x2F;&quot;&gt;Railway Oriented Programming&lt;&#x2F;a&gt; for a good visualization of this concept. All the examples we went through work on the &lt;code&gt;Option&lt;&#x2F;code&gt; type too. You should now be better equipped to read other code that uses &lt;code&gt;Result&lt;&#x2F;code&gt; combinator functions and writing them yourself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extras&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#extras&quot; aria-label=&quot;Anchor link for: extras&quot;&gt;Extras&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;or-else-combinator&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#or-else-combinator&quot; aria-label=&quot;Anchor link for: or-else-combinator&quot;&gt;&lt;code&gt;or_else&lt;&#x2F;code&gt; Combinator&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;or_else&lt;&#x2F;code&gt; function combinator is the opposite of &lt;code&gt;and_then&lt;&#x2F;code&gt;. It only calls the closure if the result is &lt;code&gt;Err(E)&lt;&#x2F;code&gt;. I do not find myself using &lt;code&gt;or_else&lt;&#x2F;code&gt; as often as &lt;code&gt;and_then&lt;&#x2F;code&gt;. Please feel free to show me what I am missing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;debugging-complex-combinators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#debugging-complex-combinators&quot; aria-label=&quot;Anchor link for: debugging-complex-combinators&quot;&gt;Debugging Complex Combinators&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I like to make types explicit when trying to get a complex combination working. However, this can get unrealistic when dealing with iterators or futures that become deeply nested. When that happens, I start assigning results to incorrect types. Here is a small example, assuming I am confused as to what type &lt;code&gt;res&lt;&#x2F;code&gt; is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; assume it is not clear what type `res` is
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8 &lt;&#x2F;span&gt;&lt;span&gt;= res;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which generates:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0308]: mismatched types
&lt;&#x2F;span&gt;&lt;span&gt; --&amp;gt; &amp;lt;anon&amp;gt;:5:13
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;5 | let c: u8 = res;
&lt;&#x2F;span&gt;&lt;span&gt;  |             ^^^ expected u8, found enum `std::result::Result`
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;  = note: expected type `u8`
&lt;&#x2F;span&gt;&lt;span&gt;  = note:    found type `std::result::Result&amp;lt;usize, &amp;amp;&amp;#39;static str&amp;gt;`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I normally use the variable &lt;code&gt;c&lt;&#x2F;code&gt; because I want to &lt;em&gt;see&lt;&#x2F;em&gt; the type of &lt;code&gt;res&lt;&#x2F;code&gt; in the compiler error message. Haha, I know.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example using it in a combinator:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res: Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wut&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8 &lt;&#x2F;span&gt;&lt;span&gt;= wut;
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which generates:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0308]: mismatched types
&lt;&#x2F;span&gt;&lt;span&gt; --&amp;gt; &amp;lt;anon&amp;gt;:6:17
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;6 |     let c: u8 = wut;
&lt;&#x2F;span&gt;&lt;span&gt;  |                 ^^^ expected u8, found usize
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;error[E0308]: mismatched types
&lt;&#x2F;span&gt;&lt;span&gt; --&amp;gt; &amp;lt;anon&amp;gt;:5:32
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;5 | let value = res.and_then(|wut| {
&lt;&#x2F;span&gt;&lt;span&gt;  |                                ^ expected enum `std::result::Result`, found ()
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;  = note: expected type `std::result::Result&amp;lt;_, &amp;amp;str&amp;gt;`
&lt;&#x2F;span&gt;&lt;span&gt;  = note:    found type `()`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;error: aborting due to 2 previous errors
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The compiler errors show both the expected input and expected output. I find this really useful when I get lost in all the combinators.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;nightly-error-format&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nightly-error-format&quot; aria-label=&quot;Anchor link for: nightly-error-format&quot;&gt;Nightly Error Format&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;As of this writing, Rust &lt;code&gt;1.11.0&lt;&#x2F;code&gt; is the stable version. Rust &lt;code&gt;1.11.0&lt;&#x2F;code&gt; does not have the new error format that is present in Rust nightly. If I am struggling on a compiler error, I often switch over to using Rust nightly until I solve the error. &lt;a href=&quot;https:&#x2F;&#x2F;rustup.rs&#x2F;&quot;&gt;Rustup&lt;&#x2F;a&gt; makes this easy.&lt;&#x2F;p&gt;
&lt;p&gt;In your current working directory:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Switch to nightly - &lt;code&gt;rustup override set nightly&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Switch to stable - &lt;code&gt;rustup override set stable&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Introduction to nom: a parsing framework written in Rust</title>
        <published>2016-08-08T00:00:00+00:00</published>
        <updated>2016-08-08T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2016/08/08/introduction-to-nom-rust-parsing-combinator-framework.html/" type="text/html"/>
        <id>https://hermanradtke.com/2016/08/08/introduction-to-nom-rust-parsing-combinator-framework.html/</id>
        
        <content type="html">&lt;p&gt;This is an introduction to a parsing library called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Geal&#x2F;nom&quot;&gt;nom&lt;&#x2F;a&gt;. The &lt;code&gt;nom&lt;&#x2F;code&gt; crate is written by Geoffrey Couprie, aka &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Geal&quot;&gt;Geal&lt;&#x2F;a&gt;, and is a remarkably complete and powerful library for building parsers. I recently did a lot of parsing of bytes on the wire for my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;carp-rs&quot;&gt;carp&lt;&#x2F;a&gt; library and it was a lot of work. I wish I had come across the &lt;code&gt;nom&lt;&#x2F;code&gt; library before I had done all of that.&lt;&#x2F;p&gt;
&lt;p&gt;The description of &lt;code&gt;nom&lt;&#x2F;code&gt; is a &lt;em&gt;Rust parser combinator framework&lt;&#x2F;em&gt; which can sound a little initimdating. Another way of saying this is that &lt;code&gt;nom&lt;&#x2F;code&gt; uses a lot of small functions and macros that make parsing code easy to write and read. I will say that &lt;code&gt;nom&lt;&#x2F;code&gt; can be a bit intimidating to start using. The API has a lot of surface area to learn and the error messages can be hard to understand. The cryptic error messages are due to the use of macros and not anything specific to nom. While it can take a little bit of effort to get started using &lt;code&gt;nom&lt;&#x2F;code&gt;, but I think it is well worth it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parsing-text&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#parsing-text&quot; aria-label=&quot;Anchor link for: parsing-text&quot;&gt;Parsing Text&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;nom&lt;&#x2F;code&gt; library can parse pretty much anything, but let us start with text. When parsing text, we might be tempted to reach for something like regular expressions. This is an alternative approach that leverages Rust&#x27;s typing. Also, &lt;code&gt;nom&lt;&#x2F;code&gt; is probably faster and more efficient than any regular expression we might write. The first thing to understand about &lt;code&gt;nom&lt;&#x2F;code&gt; is that it only deals in byte arrays (&lt;code&gt;&amp;amp;[u8&lt;&#x2F;code&gt;). Our text to parse will most likely be in the form of a string. We can convert a string to a byte array using &lt;code&gt;.to_bytes().&lt;&#x2F;code&gt; To get usable results from our parser, we must convert (or map) a matched sequence of bytes into the type that we want. Knowing this, let us start looking at how to parse text input.&lt;&#x2F;p&gt;
&lt;p&gt;The bread and butter of our parsing is going to be the use of the &lt;code&gt;tag!&lt;&#x2F;code&gt; and &lt;code&gt;map_res!&lt;&#x2F;code&gt; macros. The &lt;code&gt;tag!&lt;&#x2F;code&gt; macro consumes the specified string from the byte array. For example, if we had a string of &lt;code&gt;&quot;hello Herman&quot;&lt;&#x2F;code&gt;, we would specify &lt;code&gt;tag!(&quot;hello&quot;)&lt;&#x2F;code&gt; to parse out the first word. The &lt;code&gt;tag!&lt;&#x2F;code&gt; macro works great when we know what string we want to match. It does not work for dynamic strings. The &lt;code&gt;map_res!&lt;&#x2F;code&gt; macro will be used for dynamic input.&lt;&#x2F;p&gt;
&lt;p&gt;We have to write a more abstract parser for dynamic strings. We can parse the &lt;code&gt;&quot;Herman&quot;&lt;&#x2F;code&gt; part of the string using the &lt;code&gt;alpha&lt;&#x2F;code&gt; function. The &lt;code&gt;alpha&lt;&#x2F;code&gt; function is provided by &lt;code&gt;nom&lt;&#x2F;code&gt; and will return the longest list of alphabetic characters it finds as a byte array. If it is dynamic, it probably means this is part of the input we want to capture. Getting back a byte array of &lt;code&gt;&amp;amp;[&#x27;H&#x27;, &#x27;e&#x27;, &#x27;r&#x27;, &#x27;m&#x27;, &#x27;a&#x27;, &#x27;n&#x27;]&lt;&#x2F;code&gt; is not ideal work with. We want to convert that into a string. Using &lt;code&gt;map_res!&lt;&#x2F;code&gt; we can map (convert) the byte array into a string: &lt;code&gt;map_res!(alpha, std::str::from_utf8)&lt;&#x2F;code&gt;. The &lt;code&gt;map_res!&lt;&#x2F;code&gt; (map result) macro is known as a combinator. We are &lt;em&gt;combining&lt;&#x2F;em&gt; the &lt;code&gt;alpha&lt;&#x2F;code&gt; function with the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;str&#x2F;fn.from_utf8.html&quot;&gt;std::str::from_utf8&lt;&#x2F;a&gt; function. The &lt;code&gt;std::str::from_utf8&lt;&#x2F;code&gt; function is part of the Rust standard library and converts a slice of bytes (or a byte array) into a UTF8 encoded string. So &lt;code&gt;map_res!(alpha, std::str::from_utf8)&lt;&#x2F;code&gt; is saying that we want to grab the longest array of alphabetic characters and then we want to pass that byte array of alphabetic characters to the &lt;code&gt;std::str::from_utf8&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we can parse both parts of &lt;code&gt;hello Herman&lt;&#x2F;code&gt;, we can put it all together into a more complex parser:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; nom;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;nom::{IResult, space, alpha, alphanumeric, digit};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;named!(name_parser&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    chain!(
&lt;&#x2F;span&gt;&lt;span&gt;        tag!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) ~
&lt;&#x2F;span&gt;&lt;span&gt;        space? ~
&lt;&#x2F;span&gt;&lt;span&gt;        name: map_res!(
&lt;&#x2F;span&gt;&lt;span&gt;            alpha,
&lt;&#x2F;span&gt;&lt;span&gt;            std::str::from_utf8
&lt;&#x2F;span&gt;&lt;span&gt;        ) ,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        || name
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the above example, we are using the &lt;code&gt;named!&lt;&#x2F;code&gt; macro to create a parser function named &lt;code&gt;name_parser&lt;&#x2F;code&gt;. We specify the &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; type as the return type of our parser. We use the &lt;code&gt;chain!&lt;&#x2F;code&gt; combinator macro to apply a series to parsers and assemble their results. We use the &lt;code&gt;~&lt;&#x2F;code&gt; character as the separator between parser functions&#x2F;macros and a &lt;code&gt;,&lt;&#x2F;code&gt; to denote the end of the parser chain. The last part of the &lt;code&gt;chain!&lt;&#x2F;code&gt; combinator takes a closure, &lt;code&gt;|| name&lt;&#x2F;code&gt;, where we can use the previously defined &lt;code&gt;name&lt;&#x2F;code&gt; variable. We now have a function &lt;code&gt;name_parser&lt;&#x2F;code&gt; that accepts a string that begins with &lt;code&gt;hello&lt;&#x2F;code&gt;, has one or more spaces and then contains a series of alpha characters. We map those alpha characters into a string and assign that value to a variable called &lt;code&gt;name&lt;&#x2F;code&gt;. Finally, we return &lt;code&gt;name&lt;&#x2F;code&gt; from the closure, which will be the &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; our function returns. Here is a test case proving it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_name_parser&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; empty = &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;[..];
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;name_parser&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;()), IResult::Done(empty, (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)));
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;name_parser&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello Kimberly&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;()), IResult::Done(empty, (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Kimberly&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that the &lt;code&gt;name_parser&lt;&#x2F;code&gt; function does not actually return a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;. It actually returns an &lt;code&gt;IResult&lt;&#x2F;code&gt; type that represents whether the parsing is &lt;code&gt;Done&lt;&#x2F;code&gt;, &lt;code&gt;Incomplete&lt;&#x2F;code&gt; or an &lt;code&gt;Error&lt;&#x2F;code&gt;. If the parsing was successful, the result will be &lt;code&gt;IResult::Done(input_remaining, output)&lt;&#x2F;code&gt;. In our above test, there is no more input left so the byte array is empty. The &lt;em&gt;output&lt;&#x2F;em&gt; is our &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; containing the dynamic name.&lt;&#x2F;p&gt;
&lt;p&gt;This might seem like a lot of work for such a basic parser. However, this is building a foundation for creating a lot more complex parsers. For example, we can now create a parser to convert a string of numeric characters into a number:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Parse a numerical array into a string and then from a string into a number
&lt;&#x2F;span&gt;&lt;span&gt;named!(usize_digit&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    map_res!(
&lt;&#x2F;span&gt;&lt;span&gt;        map_res!(
&lt;&#x2F;span&gt;&lt;span&gt;            digit,
&lt;&#x2F;span&gt;&lt;span&gt;            std::str::from_utf8
&lt;&#x2F;span&gt;&lt;span&gt;        ),
&lt;&#x2F;span&gt;&lt;span&gt;        std::str::FromStr::from_str
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we can even go a step further and separate the parsing of a numerical array into a smaller parser called &lt;code&gt;numeric_string&lt;&#x2F;code&gt;. We can then map the result of &lt;code&gt;numeric_string&lt;&#x2F;code&gt; into a &lt;code&gt;usize&lt;&#x2F;code&gt; type in the &lt;code&gt;usize_digit&lt;&#x2F;code&gt; parser function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;named!(numeric_string&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    map_res!(
&lt;&#x2F;span&gt;&lt;span&gt;        digit,
&lt;&#x2F;span&gt;&lt;span&gt;        std::str::from_utf8
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;named!(usize_digit&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    map_res!(
&lt;&#x2F;span&gt;&lt;span&gt;        numeric_string,
&lt;&#x2F;span&gt;&lt;span&gt;        std::str::FromStr::from_str
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we have a generic parser to parse numerical arrays, we can also create a parser to parse a string into a &lt;code&gt;u64&lt;&#x2F;code&gt; using the same &lt;code&gt;numeric_string&lt;&#x2F;code&gt; function defined above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;named!(u64_digit&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    map_res!(
&lt;&#x2F;span&gt;&lt;span&gt;        numeric_string,
&lt;&#x2F;span&gt;&lt;span&gt;        std::str::FromStr::from_str
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You start to see how powerful the combination of small parsers can be. Not only does &lt;code&gt;nom&lt;&#x2F;code&gt; make it easy to write parsers, I think it also makes it easy to read parsers later and understand what they are doing. It also makes it easier to write tests against smaller parsers to verify their correctness. We have just scratched the surface of what &lt;code&gt;nom&lt;&#x2F;code&gt; can do. There are many other &lt;a href=&quot;http:&#x2F;&#x2F;rust.unhandledexpression.com&#x2F;nom&#x2F;#functions&quot;&gt;parsers&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;rust.unhandledexpression.com&#x2F;nom&#x2F;#macros&quot;&gt;combinators&lt;&#x2F;a&gt; available. There are also a number &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Geal&#x2F;nom&#x2F;issues&#x2F;14&quot;&gt;example&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Geal&#x2F;nom&#x2F;tree&#x2F;master&#x2F;tests&quot;&gt;parsers&lt;&#x2F;a&gt; to use as a reference.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Connecting a webservice to a database in Rust</title>
        <published>2016-05-23T00:00:00+00:00</published>
        <updated>2016-05-23T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2016/05/23/connecting-webservice-database-rust.html/" type="text/html"/>
        <id>https://hermanradtke.com/2016/05/23/connecting-webservice-database-rust.html/</id>
        
        <content type="html">&lt;p&gt;&lt;strong&gt;Note: This blog post does not work with rustc 1.19.0 or later due to a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;42460&quot;&gt;regression&lt;&#x2F;a&gt; in rust 1.19.0. Use the following to set rust 1.18.0 up:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cd &#x2F;path&#x2F;to&#x2F;project
&lt;&#x2F;span&gt;&lt;span&gt;$ rustup install 1.18.0
&lt;&#x2F;span&gt;&lt;span&gt;$ rustup override 1.18.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this post we are going to hook our &lt;a href=&quot;&#x2F;2016&#x2F;05&#x2F;16&#x2F;creating-a-basic-webservice-in-rust.html&quot;&gt;basic webservice&lt;&#x2F;a&gt; up to a database. The webservice will accept a request for &lt;code&gt;&#x2F;orders&lt;&#x2F;code&gt;, query the database for orders and return a json response. I will be using PostgreSQL in this example. There is a pure Rust &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;postgres&quot;&gt;PostresSQL driver&lt;&#x2F;a&gt; written by Steven Fackler (sfackler) that I think is well done. That being said, the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mysql&quot;&gt;mysql crate&lt;&#x2F;a&gt; looks well done too.&lt;&#x2F;p&gt;
&lt;p&gt;This post goes into a fair amount of detail. You can skip right to the &lt;a href=&quot;https:&#x2F;&#x2F;hermanradtke.com&#x2F;2016&#x2F;05&#x2F;23&#x2F;connecting-webservice-database-rust.html&#x2F;#tldr&quot;&gt;TL;DR&lt;&#x2F;a&gt; for the final solution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;preparation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#preparation&quot; aria-label=&quot;Anchor link for: preparation&quot;&gt;Preparation&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We have to get Postgres setup before we start writing Rust code. I am using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jackdb&#x2F;pg-app-dev-vm&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;jackdb&#x2F;pg-app-dev-vm&lt;&#x2F;a&gt; in combination with &lt;a href=&quot;https:&#x2F;&#x2F;www.vagrantup.com&#x2F;&quot;&gt;Vagrant&lt;&#x2F;a&gt; to automatically provision a working Postgres instance. Simply clone the git repository and then &lt;code&gt;vagrant up&lt;&#x2F;code&gt;. I am using the default values of &lt;code&gt;myapp&lt;&#x2F;code&gt; for username, &lt;code&gt;dbpass&lt;&#x2F;code&gt; for the password and &lt;code&gt;myapp&lt;&#x2F;code&gt; for the database name. I also have a script called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;webservice-demo-rs&#x2F;blob&#x2F;blog-post-2&#x2F;db-migrate.sh&quot;&gt;db-migrate.sh&lt;&#x2F;a&gt; that will create the orders schema necessary to get this example working.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;crate-dependencies&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#crate-dependencies&quot; aria-label=&quot;Anchor link for: crate-dependencies&quot;&gt;Crate Dependencies&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;At this point we have a working database instance with an orders tables containing two rows. The first thing we need to do is update our &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; file with our postgres dependency. We also need to add the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rustc-serialize&quot;&gt;rustc-serialize crate&lt;&#x2F;a&gt; so we can serialize a native Rust data structure into json format. Next time we run &lt;code&gt;cargo build&lt;&#x2F;code&gt; both crates will automatically be downloaded and made available to our webservice.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[package]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;authors &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Your Name &amp;lt;your.name@example.com&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nickel &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.8.1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;postgres &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.11.7&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rustc-serialize &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.3.19&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Note: The rustc-serialize crate works, but it is not being actively developed. The future of json serialization is the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;serde_json&quot;&gt;serde_json crate&lt;&#x2F;a&gt;. Unfortunately, serde&#x27;s ability to automatically serialize data structures is only available on Rust nightly (the version of Rust in active development). Due to this restriction, I have chosen to use rustc-serialize instead.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We now need to open up &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt; and start adding our dependencies. We need to import the &lt;code&gt;postgres&lt;&#x2F;code&gt; and &lt;code&gt;rustc_serialize&lt;&#x2F;code&gt; crates. These two crates are not exporting macros, so we can leave off the &lt;code&gt;#[macro_use]&lt;&#x2F;code&gt; attribute. Also, notice that the crate name &lt;code&gt;rustc-serialize&lt;&#x2F;code&gt; (hyphen) is imported as &lt;code&gt;rustc_serialize&lt;&#x2F;code&gt; (underbar). The rustc-serialize crate is from early Rust days and the rules around crate names has changed.&lt;&#x2F;p&gt;
&lt;p&gt;Now we will alias which parts of the crates we want to use. We will be using the postgres &lt;code&gt;Connection&lt;&#x2F;code&gt; struct and the &lt;code&gt;SslMode&lt;&#x2F;code&gt; enum. We also will be using the rustc_serialize &lt;code&gt;json&lt;&#x2F;code&gt; module.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; nickel;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; postgres;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; rustc_serialize;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;nickel::{Nickel, MediaType};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;postgres::{Connection, SslMode};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rustc_serialize::json;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;order-struct&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#order-struct&quot; aria-label=&quot;Anchor link for: order-struct&quot;&gt;Order Struct&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We will be querying the database for orders and then mapping the resulting rows into one more objects. Our database schema contains an orders table with an order id, an order total, the type of currency that was used and the status of the order. We need to create an &lt;code&gt;Order&lt;&#x2F;code&gt; struct to map each row to. The postgres crate provides &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sfackler&#x2F;rust-postgres#type-correspondence&quot;&gt;type correspondence&lt;&#x2F;a&gt; documentation that maps each Postgres type to a Rust type. Using that information, we can create the &lt;code&gt;Order&lt;&#x2F;code&gt; struct with the correct types.&lt;&#x2F;p&gt;
&lt;p&gt;Once the query result has been mapped into an &lt;code&gt;Order&lt;&#x2F;code&gt; struct, we want to serialize that into json. We could &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc-serialize&#x2F;rustc_serialize&#x2F;json&#x2F;index.html#verbose-example-of-tojson-usage&quot;&gt;manually implement&lt;&#x2F;a&gt; the &lt;code&gt;ToJson&lt;&#x2F;code&gt; trait that tells rustc_serialize how to convert an &lt;code&gt;Order&lt;&#x2F;code&gt; struct into json, but I do not want to write code unless I have to. Instead, we can use the &lt;code&gt;#[derive()]&lt;&#x2F;code&gt; attribute and automatically generate the trait implementation for &lt;code&gt;RustcEncodable&lt;&#x2F;code&gt;. The &lt;code&gt;RustcEncodable&lt;&#x2F;code&gt; trait will allow us to call &lt;code&gt;json::encode()&lt;&#x2F;code&gt; on our &lt;code&gt;Order&lt;&#x2F;code&gt; struct.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(RustcEncodable)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Order {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currency&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using &lt;code&gt;#[derive()]&lt;&#x2F;code&gt; can feel a bit like magic. The &lt;code&gt;Order&lt;&#x2F;code&gt; struct is just a shell around some primitive Rust types. The rustc_serialize crate has &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc-serialize&#x2F;rustc_serialize&#x2F;trait.Encodable.html&quot;&gt;already implemeted&lt;&#x2F;a&gt; &lt;code&gt;Encodable&lt;&#x2F;code&gt; for pretty much all the primitive types. As such, the compiler has enough information to automatically implement the &lt;code&gt;RustcEncodable&lt;&#x2F;code&gt; trait for the &lt;code&gt;Order&lt;&#x2F;code&gt; struct. If we had used a type that did not already implement &lt;code&gt;Encodable&lt;&#x2F;code&gt;, then the compiler would have thrown an error.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Note: If you are wondering why we derive &lt;code&gt;RustcEncodable&lt;&#x2F;code&gt; to automatically implement the &lt;code&gt;Encoding&lt;&#x2F;code&gt; trait, know that the rustc_serialize crate used to be part of the std library, was deprecated and migrated out to &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&quot;&gt;crates.io&lt;&#x2F;a&gt;. In order for the rustc_serialize crate not to clash with the code still in the stdlib, the name we derive was modified. You can look to this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;commit&#x2F;a76a80276852f05f30adaa4d2a8a2729b5fc0bfa&quot;&gt;commit&lt;&#x2F;a&gt; for more details. This is a unique case. In the vast majority of cases, the name of the trait and the name of the trait we are deriving are the same.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;database-connection&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#database-connection&quot; aria-label=&quot;Anchor link for: database-connection&quot;&gt;Database Connection&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We are now ready to setup our database connection. Based on the Postgres connection information provided during the &lt;a href=&quot;https:&#x2F;&#x2F;hermanradtke.com&#x2F;2016&#x2F;05&#x2F;23&#x2F;connecting-webservice-database-rust.html&#x2F;#preparation&quot;&gt;Preparation&lt;&#x2F;a&gt; section, we can create a database url. We then create a &lt;code&gt;Connection&lt;&#x2F;code&gt; object that represents our connection to the Postgres database. Using the &lt;code&gt;SslMode&lt;&#x2F;code&gt; enum, we opt to make create the connection over plain-text.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; db_url = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgresql:&#x2F;&#x2F;myapp:dbpass@localhost:15432&#x2F;myapp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; db = Connection::connect(db_url, SslMode::None)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to connect to database&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Connecting to the database can fail, so &lt;code&gt;Connection::connect()&lt;&#x2F;code&gt; is returning a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;result&#x2F;enum.Result.html&quot;&gt;Result&lt;&#x2F;a&gt; type. Most examples you will see choose to &lt;code&gt;.unwrap()&lt;&#x2F;code&gt; the &lt;code&gt;Result&lt;&#x2F;code&gt; type, which would yield the connection on &lt;code&gt;Ok&lt;&#x2F;code&gt; or panic on &lt;code&gt;Err&lt;&#x2F;code&gt;. I will be using &lt;code&gt;.expect()&lt;&#x2F;code&gt; instead of &lt;code&gt;.unwrap()&lt;&#x2F;code&gt;. Using &lt;code&gt;.expect()&lt;&#x2F;code&gt; is just like using &lt;code&gt;.unwrap()&lt;&#x2F;code&gt; except that it allows for a more user-friendly error message if something goes wrong. This will help us debug any issues we may encounter, especially if you are modifying these exmaples.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;querying-the-database&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#querying-the-database&quot; aria-label=&quot;Anchor link for: querying-the-database&quot;&gt;Querying the Database&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let us now jump down to our &lt;code&gt;&#x2F;orders&lt;&#x2F;code&gt; route and replace the static json response with an actual database result. We create our SQL string to fetch rows from the orders table. We also need to create a mutable &lt;code&gt;orders&lt;&#x2F;code&gt; vector (array) to store the &lt;code&gt;Order&lt;&#x2F;code&gt; objects we are mapping. We then fire off the query by passing in our SQL string and any paramters we wanted to bind. In this case, we have no parameters to bind so we pass a reference to an empty &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;primitive.slice.html&quot;&gt;slice&lt;&#x2F;a&gt; (&lt;code&gt;&amp;amp;[]&lt;&#x2F;code&gt;). We loop over each row in the result, manually convert the result into an &lt;code&gt;Order&lt;&#x2F;code&gt; struct and store it in the &lt;code&gt;orders&lt;&#x2F;code&gt; vector. After all the rows have been converted, we call &lt;code&gt;json::encode()&lt;&#x2F;code&gt; on the orders vector and return that result. Remember, we derived &lt;code&gt;RustcEncodable&lt;&#x2F;code&gt; on the &lt;code&gt;Order&lt;&#x2F;code&gt; struct. The rustc_serialize crate already implemented &lt;code&gt;Encodable&lt;&#x2F;code&gt; on the &lt;code&gt;Vec&lt;&#x2F;code&gt; too. The combination of all these &lt;code&gt;Encodable&lt;&#x2F;code&gt; trait implementations allows for the automatic serialization of &lt;code&gt;orders&lt;&#x2F;code&gt; using &lt;code&gt;json::encode()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;   get &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; query = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SELECT id, total, currency, status FROM orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; orders = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; row in &amp;amp;db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;(query, &amp;amp;[]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to select orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; order = Order {
&lt;&#x2F;span&gt;&lt;span&gt;               id: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;               total: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;               currency: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;               status: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;           };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;           orders.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(order);
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(MediaType::Json);
&lt;&#x2F;span&gt;&lt;span&gt;       json::encode(&amp;amp;orders).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to serialize orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;sync-error&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sync-error&quot; aria-label=&quot;Anchor link for: sync-error&quot;&gt;Sync Error&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Below are all the changes we have made so far:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; nickel;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; postgres;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; rustc_serialize;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;nickel::{Nickel, MediaType};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;postgres::{Connection, SslMode};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rustc_serialize::json;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(RustcEncodable)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Order {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currency&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; db_url = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgresql:&#x2F;&#x2F;myapp:dbpass@localhost:15432&#x2F;myapp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; db = Connection::connect(db_url, SslMode::None)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to connect to database&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; server = Nickel::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;utilize&lt;&#x2F;span&gt;&lt;span&gt;(router! {
&lt;&#x2F;span&gt;&lt;span&gt;        get &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; query = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SELECT id, total, currency, status FROM orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; orders = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; row in &amp;amp;db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;(query, &amp;amp;[]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to select orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; order = Order {
&lt;&#x2F;span&gt;&lt;span&gt;                    id: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    total: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    currency: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    status: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                orders.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(order);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(MediaType::Json);
&lt;&#x2F;span&gt;&lt;span&gt;            json::encode(&amp;amp;orders).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to serialize orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1:6767&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In our &lt;code&gt;main&lt;&#x2F;code&gt; function, we setup a connection to the database, create a nickel webserver and define our &lt;code&gt;&#x2F;orders&lt;&#x2F;code&gt; route. Our &lt;code&gt;&#x2F;orders&lt;&#x2F;code&gt; route calls a closure that uses the above database connection to fetch orders from the database and then serializes them into json. This looks pretty straight-forward, but if we try to compile this code we will get a rather initimidating error message. If we parse through multi-line error message, we can pull out two peices of information:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;error: the trait &lt;code&gt;core::marker::Sync&lt;&#x2F;code&gt; is not implemented for the type &lt;code&gt;core::cell::UnsafeCell&amp;lt;postgres::InnerConnection&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;core::cell::UnsafeCell&amp;lt;postgres::InnerConnection&amp;gt;&lt;&#x2F;code&gt; cannot be shared between threads safely&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Here in lies the beauty of Rust. The &lt;code&gt;Connection&lt;&#x2F;code&gt; object is not thread safe and, while it may not have been apparent, nickel serves requests in different threads. Rust only allows types that implement the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;marker&#x2F;trait.Sync.html&quot;&gt;Sync&lt;&#x2F;a&gt; trait to be shared between threads. For a moment, let us be pragmatic about this. Rather than try and figure out how to make &lt;code&gt;Connection&lt;&#x2F;code&gt; thread safe we will just work around it by establishing the postgres connection as part of the &lt;code&gt;&#x2F;orders&lt;&#x2F;code&gt; request.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; db_url = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgresql:&#x2F;&#x2F;myapp:dbpass@localhost:15432&#x2F;myapp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; server = Nickel::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;utilize&lt;&#x2F;span&gt;&lt;span&gt;(router! {
&lt;&#x2F;span&gt;&lt;span&gt;        get &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; db = Connection::connect(db_url, SslMode::None)
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to connect to database&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; query = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SELECT id, total, currency, status FROM orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; orders = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; row in &amp;amp;db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;(query, &amp;amp;[]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to select orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; order = Order {
&lt;&#x2F;span&gt;&lt;span&gt;                    id: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    total: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    currency: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    status: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                orders.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(order);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(MediaType::Json);
&lt;&#x2F;span&gt;&lt;span&gt;            json::encode(&amp;amp;orders).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to serialize orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1:6767&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can now do &lt;code&gt;cargo run&lt;&#x2F;code&gt; and make a curl request in another window see our json response:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo run
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target&#x2F;debug&#x2F;orders`
&lt;&#x2F;span&gt;&lt;span&gt;Listening on http:&#x2F;&#x2F;127.0.0.1:6767
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-C to shutdown server
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl --silent localhost:6767&#x2F;orders | python -mjson.tool
&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;currency&amp;quot;: &amp;quot;USD&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;id&amp;quot;: 123,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;status&amp;quot;: &amp;quot;shipped&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;total&amp;quot;: 30.0
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;currency&amp;quot;: &amp;quot;USD&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;id&amp;quot;: 124,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;status&amp;quot;: &amp;quot;processing&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;total&amp;quot;: 20.0
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fixing-the-sync-error&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fixing-the-sync-error&quot; aria-label=&quot;Anchor link for: fixing-the-sync-error&quot;&gt;Fixing the Sync Error&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we have a functioning webservice that connects to a Postgres database, let us stop and consider our approach. Making a connection per request may be fine for a database like MySQL, where connections are &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;99565&#x2F;775246&quot;&gt;stateful and cheap to create&lt;&#x2F;a&gt;, but not recommended for Postgres. We need to create a pool of connections that can be shared across the many different requests. Luckily for us, the creator of the postgres create also created a connection pool called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sfackler&#x2F;r2d2&quot;&gt;r2d2&lt;&#x2F;a&gt; with a Postgres specific &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sfackler&#x2F;r2d2-postgres&quot;&gt;adapter&lt;&#x2F;a&gt;. The connection pool internally uses a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;struct.Mutex.html&quot;&gt;Mutex&lt;&#x2F;a&gt;, which implements &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;marker&#x2F;trait.Sync.html&quot;&gt;Sync&lt;&#x2F;a&gt;, allowing the connections to be shared across threads.&lt;&#x2F;p&gt;
&lt;p&gt;We also need to consider how we are passing our connection pool to the request. The &lt;code&gt;&#x2F;orders&lt;&#x2F;code&gt; route is implemented using a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;closures.html#move-closures&quot;&gt;move closure&lt;&#x2F;a&gt;, which will take ownership of the connection pool once we try to use it. If we create another route and try to use the connection pool, the compiler will throw an error because we now have two closures trying to take ownership of the same value. We need to take advantage of nickel middlware in order to properly share the connection pool. The nickel framework already provides &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nickel-org&#x2F;nickel-postgres&quot;&gt;nickel-postgres&lt;&#x2F;a&gt; middleware for this very use-case.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-connection-pool-middleware&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#using-connection-pool-middleware&quot; aria-label=&quot;Anchor link for: using-connection-pool-middleware&quot;&gt;Using Connection Pool Middleware&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We need to add three more crates to Cargo.toml. The &lt;code&gt;nickel_postgres&lt;&#x2F;code&gt; crate requires a patch that has not been merged yet, so we are specifying a git revision. If&#x2F;when the PR is accepted, I will update this section.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;r2d2 = &amp;quot;0.7.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;r2d2_postgres = &amp;quot;0.10.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;nickel_postgres = { git = &amp;quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;nickel-postgres&amp;quot;, rev = &amp;quot;9c1e21f&amp;quot; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once that is done, we need to import those three crates and then start specifying what parts of those crates we are going to use. The &lt;code&gt;r2d2_postgres&lt;&#x2F;code&gt; crate has a &lt;code&gt;PostgresConnectionmanager&lt;&#x2F;code&gt; that wraps the standard &lt;code&gt;Connection&lt;&#x2F;code&gt; struct provided by the &lt;code&gt;postgres&lt;&#x2F;code&gt; crate. The &lt;code&gt;r2d2_postgres&lt;&#x2F;code&gt; crate also provides a different &lt;code&gt;SslMode&lt;&#x2F;code&gt; enum (I am not sure why?), so we need to use that instead. This means we can get rid of the explicit postgres crate dependency and we can remove &lt;code&gt;postgres = &quot;0.11.7&quot;&lt;&#x2F;code&gt; from our Cargo.toml file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; nickel;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; rustc_serialize;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; r2d2;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; r2d2_postgres;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; nickel_postgres;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;nickel::{Nickel, MediaType};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rustc_serialize::json;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;r2d2::{Config, Pool};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;r2d2_postgres::{PostgresConnectionManager, SslMode};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;nickel_postgres::{PostgresMiddleware, PostgresRequestExtensions};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We will be passing the &lt;code&gt;PostgresConnectionManager&lt;&#x2F;code&gt; into a &lt;code&gt;Pool&lt;&#x2F;code&gt; provided by the &lt;code&gt;r2d2&lt;&#x2F;code&gt; crate. The &lt;code&gt;Pool&lt;&#x2F;code&gt; manages all of the complexity around sharing a fixed number of database connections across different threads. The &lt;code&gt;PostgresConnectionManager&lt;&#x2F;code&gt; implements the correct trait so the &lt;code&gt;Pool&lt;&#x2F;code&gt; can interact with Postgres connections. The &lt;code&gt;Pool&lt;&#x2F;code&gt; also accepts a &lt;code&gt;Config&lt;&#x2F;code&gt; struct that configures how the &lt;code&gt;Pool&lt;&#x2F;code&gt; will work. I chose to use the default settings, but you can customize it if you want a different number of connections.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have our connection pool setup, we need to create the middleware. The &lt;code&gt;PostgresMiddleware&lt;&#x2F;code&gt; struct abstracts away all the details of how the middleware works. We only need to create the middleware and pass on our connection pool. You will also notice that we use &lt;code&gt;PostgresRequestExtensions&lt;&#x2F;code&gt; from &lt;code&gt;nickel_postgres&lt;&#x2F;code&gt;. This is a trait that makes it easier for us to get a connection from the pool when inside of our request.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; db_url = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgresql:&#x2F;&#x2F;myapp:dbpass@localhost:15432&#x2F;myapp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; db_mgr = PostgresConnectionManager::new(db_url, SslMode::None)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to connect to database&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; db_pool = Pool::new(Config::default(), db_mgr)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to initialize connection pool&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; server = Nickel::new();
&lt;&#x2F;span&gt;&lt;span&gt;    server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;utilize&lt;&#x2F;span&gt;&lt;span&gt;(PostgresMiddleware::new(db_pool));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When each request comes in, the middleware will put a reference to the connection pool on the request object. We can use &lt;code&gt;request.db_conn()&lt;&#x2F;code&gt;, made possible by the &lt;code&gt;PostgresRequestExtensions&lt;&#x2F;code&gt; trait, to get a database connection from the pool. Now we can use that connection just like we were before. Once our request goes out of scope, the connection will automatically be returned to the pool.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tldr&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tldr&quot; aria-label=&quot;Anchor link for: tldr&quot;&gt;TL;DR&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Here is our finished product:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; nickel;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; rustc_serialize;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; r2d2;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; r2d2_postgres;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; nickel_postgres;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;nickel::{Nickel, MediaType};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rustc_serialize::json;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;r2d2::{Config, Pool};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;r2d2_postgres::{PostgresConnectionManager, SslMode};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;nickel_postgres::{PostgresMiddleware, PostgresRequestExtensions};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(RustcEncodable)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Order {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currency&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; db_url = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgresql:&#x2F;&#x2F;myapp:dbpass@localhost:15432&#x2F;myapp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; db_mgr = PostgresConnectionManager::new(db_url, SslMode::None)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to connect to database&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; db_pool = Pool::new(Config::default(), db_mgr)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to initialize connection pool&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; server = Nickel::new();
&lt;&#x2F;span&gt;&lt;span&gt;    server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;utilize&lt;&#x2F;span&gt;&lt;span&gt;(PostgresMiddleware::new(db_pool));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;utilize&lt;&#x2F;span&gt;&lt;span&gt;(router! {
&lt;&#x2F;span&gt;&lt;span&gt;        get &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; query = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SELECT id, total, currency, status FROM orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; orders = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; db = request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;db_conn&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to get a connection from pool&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; row in &amp;amp;db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;(query, &amp;amp;[]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to select orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; order = Order {
&lt;&#x2F;span&gt;&lt;span&gt;                    id: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    total: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    currency: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    status: row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                orders.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(order);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(MediaType::Json);
&lt;&#x2F;span&gt;&lt;span&gt;            json::encode(&amp;amp;orders).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to serialize orders&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1:6767&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It was a bit of a journey, but we now have a webservice that can properly make requests to a Postgres database and return the result as a json response. Our first attempt ran into a compiler issue when &lt;code&gt;Connection&lt;&#x2F;code&gt; did not implement &lt;code&gt;Sync&lt;&#x2F;code&gt;. We had to modify our orginal approach to fit within the rules that the Rust compiler enforces. That, briefly, meant creating a database connection per request. Realizing this approach was not recommended, we refactored our webservice to use a connection pool that provided thread safety. We also decided to use nickel middlware to expose the connection pool to each request. It added a bit more complexity to our code, but the tradeoff is that we are now guaranteed to be free of data races when serving requests on different threads. You can find the complete working example on github at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;webservice-demo-rs&#x2F;tree&#x2F;blog-post-2&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;webservice-demo-rs&#x2F;tree&#x2F;blog-post-2&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Creating a basic webservice in Rust</title>
        <published>2016-05-16T00:00:00+00:00</published>
        <updated>2016-05-16T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2016/05/16/creating-a-basic-webservice-in-rust.html/" type="text/html"/>
        <id>https://hermanradtke.com/2016/05/16/creating-a-basic-webservice-in-rust.html/</id>
        
        <content type="html">&lt;p&gt;In this post I am going to walk through the creation of a webservice in Rust. This is a &lt;em&gt;Getting Started&lt;&#x2F;em&gt; post that will serve as a foundation for future posts. The webservice will return a static json response to start. There are a few different options for web frameworks in Rust, but practically all of them use the underlying HTTP library called &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;hyper&quot;&gt;hyper&lt;&#x2F;a&gt;. I am most familiar with &lt;a href=&quot;http:&#x2F;&#x2F;nickel.rs&#x2F;&quot;&gt;nickel&lt;&#x2F;a&gt;, so we will be using that. Once the code is complete, we will be creating a release build that is a completely static (standalone) binary. We will then be able to deploy this binary on any modern Linux distro, including Ubuntu and Alpine Linux.&lt;&#x2F;p&gt;
&lt;p&gt;Before we get into any real code, I want to document the environment I am using so you can follow along. I am using a MacBook Air with OS X version 10.11.4. I installed Rust using &lt;a href=&quot;https:&#x2F;&#x2F;www.rustup.rs&#x2F;&quot;&gt;rustup.rs&lt;&#x2F;a&gt; and am using the current stable Rust version 1.8.0. At the time of this writing, rustup is in beta. However, it is quite stable and will soon be the official way to install Rust. I will not go into detail on how to install rustup. Please see the official documentation for that. Finally, I will be using a docker container to build a static binary using musl. I will be doing all development on my laptop and only using the docker container and musl to create a &lt;em&gt;release&lt;&#x2F;em&gt; build.&lt;&#x2F;p&gt;
&lt;p&gt;Mac OS X information:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sw_vers
&lt;&#x2F;span&gt;&lt;span&gt;ProductName:	Mac OS X
&lt;&#x2F;span&gt;&lt;span&gt;ProductVersion:	10.11.4
&lt;&#x2F;span&gt;&lt;span&gt;BuildVersion:	15E65
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rust version (and toolchain):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ rustup show
&lt;&#x2F;span&gt;&lt;span&gt;stable-x86_64-apple-darwin (default)
&lt;&#x2F;span&gt;&lt;span&gt;rustc 1.8.0 (db2939409 2016-04-11)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Docker version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ docker -v
&lt;&#x2F;span&gt;&lt;span&gt;Docker version 1.11.1, build 5604cbe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I mentioned earlier that we are going to using a web framework that is based on the hyper crate. The hyper crate supports TLS&#x2F;SSL using the OpenSSL library. Unfortunately, Mac OS X 10.11 switched to using LibreSSL instead. In order to compile our webservice, we need to first install OpenSSL. While annoying, this is trivially easy using homebrew.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ brew install openssl
&lt;&#x2F;span&gt;&lt;span&gt;$ brew link --force openssl
&lt;&#x2F;span&gt;&lt;span&gt;$ openssl version
&lt;&#x2F;span&gt;&lt;span&gt;OpenSSL 0.9.8zh 14 Jan 2016
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: If you really do not want to install OpenSSL, you can build &lt;em&gt;debug&lt;&#x2F;em&gt; versions on the docker container too. Build times will be slow and testing&#x2F;debugging will be significantly more difficult.&lt;&#x2F;p&gt;
&lt;p&gt;Now we can finally get to coding. Let us start by creating a new project using Cargo.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo new --bin demo
&lt;&#x2F;span&gt;&lt;span&gt;$ cd demo
&lt;&#x2F;span&gt;&lt;span&gt;$ cargo build
&lt;&#x2F;span&gt;&lt;span&gt;Compiling demo v0.1.0 (file:&#x2F;&#x2F;&#x2F;Users&#x2F;herman&#x2F;projects&#x2F;demo)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we need to add the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;nickel&quot;&gt;nickel&lt;&#x2F;a&gt; web framework so we can accept HTTP requests and deliver responses. We can be a little less conservative than crates.io when specifying my dependencies. None of these crates are 1.0 yet, but they are being developed and maintained. We do not want to wildcard (&lt;code&gt;&quot;*&quot;&lt;&#x2F;code&gt;) the entire version number for each dependency as that will leave our webservice suscepitble to backwards compatibility breaks in the future. Leaving the &lt;em&gt;patch version&lt;&#x2F;em&gt; a wildcard will allow us to update the libraries when they have bug fixes in the future without risking a major backwards compatibility break. &lt;strong&gt;Edit: As was explained to me, cargo will update to the latest compatible version (in accordance with SemVer) by default. So &lt;code&gt;0.8.1&lt;&#x2F;code&gt;, &lt;code&gt;0.8.*&lt;&#x2F;code&gt; and &lt;code&gt;^0.8.1&lt;&#x2F;code&gt; all mean the same thing. The standard convention is to specify the version shown to you on crates.io. I have updated the below &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; example.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cat Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;[package]
&lt;&#x2F;span&gt;&lt;span&gt;name = &amp;quot;demo&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;version = &amp;quot;0.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;authors = [&amp;quot;Your Name &amp;lt;yourname@example.com&amp;gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span&gt;nickel = &amp;quot;0.8.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;$ cargo build
&lt;&#x2F;span&gt;&lt;span&gt;   Updating registry `https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;crates.io-index`
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling regex-syntax v0.3.1
&lt;&#x2F;span&gt;&lt;span&gt;   ...
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling demo v0.1.0 (file:&#x2F;&#x2F;&#x2F;Users&#x2F;herman&#x2F;projects&#x2F;demo)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we &lt;code&gt;cargo build&lt;&#x2F;code&gt;, we will download and compile 45 total crates into our webservice. This will also create a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;getting-started.html#what-is-that-cargolock&quot;&gt;Cargo.lock&lt;&#x2F;a&gt; file that contains exact information about our dependencies. Since we are building a binary&#x2F;executable, we will commit the lock file with the rest of our code.&lt;&#x2F;p&gt;
&lt;p&gt;Now we can open up &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt; and start creating our service. In this first step, I will show how to write a handler for an HTTP GET request that generates a very simple json response.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; nickel;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;nickel::{Nickel, MediaType};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; server = Nickel::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;utilize&lt;&#x2F;span&gt;&lt;span&gt;(router! {
&lt;&#x2F;span&gt;&lt;span&gt;        get &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(MediaType::Json);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;#&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{ &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot; }&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;#
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1:6767&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let us walk through the above code. We start by importing the nickel crate. The nickel crate includes macros and in order to use them we need to put &lt;code&gt;#[macro_use]&lt;&#x2F;code&gt; in front of the import statement. We then need to specify which parts of the nickel crate we want to use. It is valid to put &lt;code&gt;use nickel::*&lt;&#x2F;code&gt;, but I prefer to be explicit about which parts of a crate I am using.&lt;&#x2F;p&gt;
&lt;p&gt;Our main function is the entry point of our program. We create a new server object, declare what routes we want to handle and then start listening for requests. The design of nickel is similar to the &lt;a href=&quot;http:&#x2F;&#x2F;expressjs.com&#x2F;&quot;&gt;Express&lt;&#x2F;a&gt; node.js framework. The &lt;code&gt;server.utilize&lt;&#x2F;code&gt; function is used to register middleware with the server object. Using the &lt;code&gt;router!&lt;&#x2F;code&gt; macro, we can specify each route we want to handle. To start, we want to accept an HTTP GET request for &lt;code&gt;&#x2F;foo&lt;&#x2F;code&gt;. We can now specify how we want to handle that request inside of a lambda function.&lt;&#x2F;p&gt;
&lt;p&gt;The lambda function includes &lt;code&gt;request&lt;&#x2F;code&gt; and &lt;code&gt;response&lt;&#x2F;code&gt; parameters. Since we are not looking at any information from the request, we prepend it with an underbar (&lt;code&gt;_&lt;&#x2F;code&gt;) so the compiler does not throw a warning. We will be modifying the response to set the media type, so we prepend that with &lt;code&gt;mut&lt;&#x2F;code&gt;. We then set the media type for the response as json and create a literal json string to return. The &lt;code&gt;r#...#&lt;&#x2F;code&gt; syntax is the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference.html#raw-string-literals&quot;&gt;raw literal string notation&lt;&#x2F;a&gt; in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;We now have a working webservice. Let us see it in action.&lt;&#x2F;p&gt;
&lt;p&gt;Start the server:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$cargo run
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling demo v0.1.0 (file:&#x2F;&#x2F;&#x2F;Users&#x2F;herman&#x2F;projects&#x2F;demo)
&lt;&#x2F;span&gt;&lt;span&gt;   Running `target&#x2F;debug&#x2F;demo`
&lt;&#x2F;span&gt;&lt;span&gt;Listening on http:&#x2F;&#x2F;127.0.0.1:6767
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-C to shutdown server
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Make a request in another terminal:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl --silent localhost:6767&#x2F;foo | python -mjson.tool
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last thing we will do is create a static binary that can run on a modern Linux server. This is known as &lt;a href=&quot;http:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2016&#x2F;05&#x2F;13&#x2F;rustup.html&quot;&gt;cross-compiling&lt;&#x2F;a&gt; and it is becoming a first-class feature of the Rust ecosystem. By default, compiling a Rust program to run on Linux has a few dynamic dependencies. There are many pros and cons to the &lt;em&gt;static vs dynamic&lt;&#x2F;em&gt; debate, but in this example I want to make the webservice completely static so I can deploy it without relying on the presence of any dynamic libraries. Mac OS X uses clang instead of gcc. In order to use musl, we will need gcc. I am going to use a docker container rather than install gcc. At the time of this writing, I am using Docker for Mac (beta). It should not matter how you have docker running on OS X though. I am going to use the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emk&#x2F;rust-musl-builder&quot;&gt;rust-musl-builder&lt;&#x2F;a&gt; docker container, which was built specifically for this purpose.&lt;&#x2F;p&gt;
&lt;p&gt;If you do not have the container installed, running the below command will first pull that container. Annoyingly, it will not execute the command after it downloads the container.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ docker run --rm -it -v &amp;quot;$(pwd)&amp;quot;:&#x2F;home&#x2F;rust&#x2F;src ekidd&#x2F;rust-musl-builder cargo build --release
&lt;&#x2F;span&gt;&lt;span&gt;Unable to find image &amp;#39;ekidd&#x2F;rust-musl-builder:latest&amp;#39; locally
&lt;&#x2F;span&gt;&lt;span&gt;latest: Pulling from ekidd&#x2F;rust-musl-builder
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;Digest: sha256:0c2e9357d1cff9fc9c37396953749ca601fe4d3ee1b47104cd46d99a1a90f576
&lt;&#x2F;span&gt;&lt;span&gt;Status: Downloaded newer image for ekidd&#x2F;rust-musl-builder:latest
&lt;&#x2F;span&gt;&lt;span&gt;$ docker run --rm -it -v &amp;quot;$(pwd)&amp;quot;:&#x2F;home&#x2F;rust&#x2F;src ekidd&#x2F;rust-musl-builder cargo build --release
&lt;&#x2F;span&gt;&lt;span&gt;    Updating registry `https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;crates.io-index`
&lt;&#x2F;span&gt;&lt;span&gt; Downloading nickel v0.8.1
&lt;&#x2F;span&gt;&lt;span&gt; ...
&lt;&#x2F;span&gt;&lt;span&gt;    Compiling utf8-ranges v0.1.3
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    Compiling demo v0.1.0 (file:&#x2F;&#x2F;&#x2F;home&#x2F;rust&#x2F;src)
&lt;&#x2F;span&gt;&lt;span&gt;$ ls -lah target&#x2F;x86_64-unknown-linux-musl&#x2F;release&#x2F;demo
&lt;&#x2F;span&gt;&lt;span&gt;-rwxr-xr-x  1 herman  staff   2.5M May 16 08:34 target&#x2F;x86_64-unknown-linux-musl&#x2F;release&#x2F;demo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we have the container, we can create the release build. It is going to take a bit of time. Rust has to download all the dependencies on that container, compile each of them and then compile our main program. We also specified the &lt;code&gt;--release&lt;&#x2F;code&gt; flag so Rust is optimizing each step of the build process.&lt;&#x2F;p&gt;
&lt;p&gt;We now have a 2.5MB statically compiled executable. We can run our webservice on any modern Linux distro just by copying the file there and running it. There is still a lot more to do to make a &lt;em&gt;production ready&lt;&#x2F;em&gt; webservice, but this is the basic foundation that we will refer back to when making future improvements. You can find the complete working example on github at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;webservice-demo-rs&#x2F;tree&#x2F;blog-post-1&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;webservice-demo-rs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Working with C unions in Rust FFI</title>
        <published>2016-03-17T00:00:00+00:00</published>
        <updated>2016-03-17T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2016/03/17/unions-rust-ffi.html/" type="text/html"/>
        <id>https://hermanradtke.com/2016/03/17/unions-rust-ffi.html/</id>
        
        <content type="html">&lt;p&gt;When building a foreign function interface to C code, we will inevitably run into a struct that has a union. Rust has no built-in support for unions, so we must come up with a strategy on our own. A union is a type in C that stores different data types in the same memory location. There are a number of reasons why someone may want to choose a union, including: converting between binary representations of integers and floats, implementing pseudo-polymorphism and direct access to bits. I am going to focus on the pseudo-polymorphism case.&lt;&#x2F;p&gt;
&lt;p&gt;Edit: Added a &lt;a href=&quot;https:&#x2F;&#x2F;hermanradtke.com&#x2F;2016&#x2F;03&#x2F;17&#x2F;unions-rust-ffi.html&#x2F;#warning&quot;&gt;warning&lt;&#x2F;a&gt; at the bottom based on feedback from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jckarter&#x2F;status&#x2F;710875695539310592&quot;&gt;Joe Groff&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note: This post assumes the reader is familiar with &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ffi.html&quot;&gt;Rust FFI&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Endianness&quot;&gt;endianess&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ioctl&quot;&gt;ioctl&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As an example, let us get the MAC address based on an interface name. We can summarize the steps to get the MAC address as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Specify a request type to be used with &lt;code&gt;ioctl&lt;&#x2F;code&gt;. If I want to get the MAC (or hardware) address, I specify &lt;code&gt;SIOCGIFHWADDR&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Write the interface name to &lt;code&gt;ifr_name&lt;&#x2F;code&gt;. An interface name is something like &lt;code&gt;eth0&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Make the request using &lt;code&gt;ioctl&lt;&#x2F;code&gt;. A successful request will write some data to &lt;code&gt;ifr_ifru&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For more details on how to get a MAC address, read this &lt;a href=&quot;http:&#x2F;&#x2F;www.microhowto.info&#x2F;howto&#x2F;get_the_mac_address_of_an_ethernet_interface_in_c_using_siocgifhwaddr.html&quot;&gt;howto&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We need to use the C &lt;code&gt;ioctl&lt;&#x2F;code&gt; function and also pass the &lt;code&gt;ifreq&lt;&#x2F;code&gt; struct to the function. Looking in &lt;code&gt;&#x2F;usr&#x2F;include&#x2F;net&#x2F;if.h&lt;&#x2F;code&gt;, we can see that &lt;code&gt;ifreq&lt;&#x2F;code&gt; is defined as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct  &lt;&#x2F;span&gt;&lt;span&gt;ifreq {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;    ifr_name[IFNAMSIZ];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt;  sockaddr ifru_addr;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt;  sockaddr ifru_dstaddr;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt;  sockaddr ifru_broadaddr;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;short&lt;&#x2F;span&gt;&lt;span&gt;   ifru_flags;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;     ifru_metric;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;     ifru_mtu;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;     ifru_phys;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;     ifru_media;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;     ifru_intval;
&lt;&#x2F;span&gt;&lt;span&gt;                caddr_t ifru_data;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt;  ifdevmtu ifru_devmtu;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt;  ifkpi   ifru_kpi;
&lt;&#x2F;span&gt;&lt;span&gt;                u_int32_t ifru_wake_flags;
&lt;&#x2F;span&gt;&lt;span&gt;                u_int32_t ifru_route_refcnt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;     ifru_cap[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        } ifr_ifru;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;ifr_ifru&lt;&#x2F;code&gt; union is where things start to get tricky. Glancing at the possible types in &lt;code&gt;ifr_ifru&lt;&#x2F;code&gt;, we notice that they are not all the same size. A &lt;code&gt;short&lt;&#x2F;code&gt; is 2 bytes and &lt;code&gt;u_int32_t&lt;&#x2F;code&gt; is 4 bytes. To complicate matters, we have a number of different struct definitions of unknown size. It is important that we figure out exactly what the size of the &lt;code&gt;ifreq&lt;&#x2F;code&gt; struct so we can write the proper Rust code. I wrote a small C program and figured out that &lt;code&gt;ifreq&lt;&#x2F;code&gt; uses 16 bytes for &lt;code&gt;ifr_name&lt;&#x2F;code&gt; and 24 bytes for &lt;code&gt;ifr_ifru&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Armed with the knowledge of how large teh struct is, we can start representing this in Rust. One strategy is to make a specialized struct for each type in the union.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;IfReqShort {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ifr_name&lt;&#x2F;span&gt;&lt;span&gt;: [c_char; 16],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ifru_flags&lt;&#x2F;span&gt;&lt;span&gt;: c_short,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can use &lt;code&gt;IfReqShort&lt;&#x2F;code&gt; when making a request of type &lt;code&gt;SIOCGIFINDEX&lt;&#x2F;code&gt;. This struct is smaller than the &lt;code&gt;ifreq&lt;&#x2F;code&gt; struct in C though. Even though we are expecting only 2 bytes to be written, the external ioctl interface expects there to be a total of 24 bytes. To be safe, let us add 22 bytes of padding at the end:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;IfReqShort {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ifr_name&lt;&#x2F;span&gt;&lt;span&gt;: [c_char; 16],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ifru_flags&lt;&#x2F;span&gt;&lt;span&gt;: c_short,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_padding&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;; 22],
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We would then repeat this process for each type in the union. I find this a bit tedious to do as we need to make a lot of structs and be very careful to make them the correct size. Another way to represent the union is to have a buffer of raw bytes. We can make a single C representation of &lt;code&gt;ifreq&lt;&#x2F;code&gt; in Rust like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;IfReq {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ifr_name&lt;&#x2F;span&gt;&lt;span&gt;: [c_char; 16],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;; 24],
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This &lt;code&gt;union&lt;&#x2F;code&gt; buffer can store the raw bytes for any type. We can now define methods to convert the raw bytes into the type we want. We will avoid unsafe code by not using transmute. Let us create a method to get the MAC address by converting the raw bytes in a &lt;code&gt;sockaddr&lt;&#x2F;code&gt; C type.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;IfReq {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ifr_hwaddr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; sockaddr {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; s = sockaddr {
&lt;&#x2F;span&gt;&lt;span&gt;            sa_family: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;::from_be((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;| (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;            sa_data: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; basically a memcpy
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i, b) in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            s.sa_data[i] = *b as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        s
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this strategy, we have one struct and a method to convert the raw bytes into the concrete type that we want. Looking back at our &lt;code&gt;ifr_ifru&lt;&#x2F;code&gt; union, we will notice that there are at least two others requests that will also require me to create a &lt;code&gt;sockaddr&lt;&#x2F;code&gt; from raw bytes. To &lt;em&gt;DRY&lt;&#x2F;em&gt; this up, we could implement a private method on &lt;code&gt;IfReq&lt;&#x2F;code&gt; to convert raw bytes to &lt;code&gt;sockaddr&lt;&#x2F;code&gt;. However, we can do better by abstracting away the details of creating a &lt;code&gt;sockaddr&lt;&#x2F;code&gt;, &lt;code&gt;short&lt;&#x2F;code&gt;, &lt;code&gt;int&lt;&#x2F;code&gt;, etc from &lt;code&gt;IfReq&lt;&#x2F;code&gt;. We really just want to &lt;em&gt;tell&lt;&#x2F;em&gt; the union to give me back a specified type. So, let us make a &lt;code&gt;IfReqUnion&lt;&#x2F;code&gt; type to do that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;IfReqUnion {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;; 24],
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;IfReqUnion {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;as_sockaddr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; sockaddr {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; s = sockaddr {
&lt;&#x2F;span&gt;&lt;span&gt;            sa_family: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;::from_be((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;| (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;            sa_data: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; basically a memcpy
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i, b) in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            s.sa_data[i] = *b as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        s
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;as_int&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; c_int {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;c_int&lt;&#x2F;span&gt;&lt;span&gt;::from_be((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;c_int&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;24 &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;                       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;c_int&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16 &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;                       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;c_int&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;&amp;lt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;                       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;c_int&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;as_short&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; c_short {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;c_short&lt;&#x2F;span&gt;&lt;span&gt;::from_be((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;c_short&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;                         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;c_short&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We implement methods for each of the various types that make up the union. Now that our type conversions are handled by &lt;code&gt;IfReqUnion&lt;&#x2F;code&gt;, we can now implement the methods on &lt;code&gt;IfReq&lt;&#x2F;code&gt; like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;IfReq {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ifr_name&lt;&#x2F;span&gt;&lt;span&gt;: [c_char; IFNAMESIZE],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;: IfReqUnion,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;IfReq {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ifr_hwaddr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; sockaddr {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.union.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_sockaddr&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ifr_dstaddr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; sockaddr {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.union.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_sockaddr&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ifr_broadaddr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; sockaddr {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.union.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_sockaddr&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ifr_ifindex&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; c_int {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.union.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_int&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ifr_media&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; c_int {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.union.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_int&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ifr_flags&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; c_short {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.union.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_short&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We ended up with two structs. We have &lt;code&gt;IfReq&lt;&#x2F;code&gt; that represents the memory layout of the C struct &lt;code&gt;ifreq&lt;&#x2F;code&gt;. We will implement a method on &lt;code&gt;IfReq&lt;&#x2F;code&gt; for each type of &lt;code&gt;ioctl&lt;&#x2F;code&gt; request. We also have the &lt;code&gt;IfRequnion&lt;&#x2F;code&gt; struct that handles the various types the &lt;code&gt;ifr_ifru&lt;&#x2F;code&gt; union might be. We will create a method to for each type we need to handle. This is less work than creating a specialized struct for each type in the union and provides a better interface than doing the type conversion in &lt;code&gt;IfReq&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a more complete working &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;carp-rs&#x2F;blob&#x2F;5d56a62b1a698949a7252db637d3fbeadbb62e3b&#x2F;src&#x2F;mac.rs&quot;&gt;example&lt;&#x2F;a&gt;. This is still a bit of a work in progress, but the tests pass and the code incorporates the above concepts discussed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;warning&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#warning&quot; aria-label=&quot;Anchor link for: warning&quot;&gt;Warning&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The above approach is not without problems. In the case of &lt;code&gt;ifreq&lt;&#x2F;code&gt;, we were fortunate that &lt;code&gt;ifr_name&lt;&#x2F;code&gt; was 16 bytes and was aligned on a word boundary. If &lt;code&gt;ifr_name&lt;&#x2F;code&gt; was not aligned to a 4 byte word boundary, then we will run into a problem. Our &lt;code&gt;union&lt;&#x2F;code&gt; type is &lt;code&gt;[u8; 24]&lt;&#x2F;code&gt; which has an alignment of a single byte. This is not the same alignment as a type of size 24 bytes. Here is a short example to illustrate this point. If we have a C struct with the following union:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;foo {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;short&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    } y;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above &lt;code&gt;foo&lt;&#x2F;code&gt; struct has a size of 8 bytes. Two bytes for &lt;code&gt;x&lt;&#x2F;code&gt;, two more bytes for padding and four bytes for &lt;code&gt;y&lt;&#x2F;code&gt;. If we tried to write this in Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Foo {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;; 4],
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above &lt;code&gt;Foo&lt;&#x2F;code&gt; struct is only 6 bytes. Two bytes for x and then we can fit the first two &lt;code&gt;u8&lt;&#x2F;code&gt; elements of &lt;code&gt;y&lt;&#x2F;code&gt; in the same 4 byte &lt;em&gt;word&lt;&#x2F;em&gt; as &lt;code&gt;x&lt;&#x2F;code&gt;. This subtle difference may cause problems when being passed to a C function that is expecting a struct of 8 bytes.&lt;&#x2F;p&gt;
&lt;p&gt;Until Rust natively supports unions, this sort of FFI is difficult to get right. Good luck, but be careful!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Exploring the Rust Standard Library</title>
        <published>2016-01-18T00:00:00+00:00</published>
        <updated>2016-01-18T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2016/01/18/exploring-rust-std-library.html/" type="text/html"/>
        <id>https://hermanradtke.com/2016/01/18/exploring-rust-std-library.html/</id>
        
        <content type="html">&lt;p&gt;I was writing some Rust with a colleague when they asked me about the cases where Rust deferences types for us automatically. I said that Rust will &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;28552082&quot;&gt;automatically dereference pointers when making method calls&lt;&#x2F;a&gt;, but otherwise there was no compiler magic. This conflicted with their experience with Rust and presented an example like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c = a + &amp;amp;b;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The basic question is: &lt;em&gt;&quot;How does this code work without us dereferencing &lt;code&gt;b&lt;&#x2F;code&gt;?&quot;&lt;&#x2F;em&gt;. I think this is a great question and touches on an aspect of Rust that I really like.&lt;&#x2F;p&gt;
&lt;p&gt;Rust is written in, well, Rust. While I myself do not understand much of the type checking code, I can read and understand the vast majority of the core and standard libraries. Many languages, especially scripted ones, are not like this. Often times the core and standard libraries are written in C. In order to see how this code works you have to not only understand C, but also understand how the data structures in C relate to your language. The barrier to entry is quite high. The net result is that most people rely on documentation, blogs or stack overflow to understand how major parts of the language work. They cannot go see for themselves. I really like that major parts of &lt;em&gt;Rust proper&lt;&#x2F;em&gt; are much more accessible.&lt;&#x2F;p&gt;
&lt;p&gt;Let us go see for ourselves why we can add a type &lt;code&gt;T&lt;&#x2F;code&gt; and a reference to a type &lt;code&gt;&amp;amp;U&lt;&#x2F;code&gt;. Along the way we will learn how to explore some of the inner workings of Rust. To start, we need to bring up the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;&quot;&gt;std library documentation&lt;&#x2F;a&gt; webpage. We can then search for the word &quot;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;?search=add&quot;&gt;add&lt;&#x2F;a&gt;&quot; and the first result will be &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ops&#x2F;trait.Add.html&quot;&gt;std::ops::Add&lt;&#x2F;a&gt; with a summary descriptipn of &lt;em&gt;The Add trait is used to specify the functionality of +&lt;&#x2F;em&gt;. That seems like a good place to start. We now know that adding two things together is implemented using the &lt;code&gt;Add&lt;&#x2F;code&gt; trait. The webpage for the &lt;code&gt;Add&lt;&#x2F;code&gt; trait even shows us a simple implementation.&lt;&#x2F;p&gt;
&lt;p&gt;Scrolling down the webpage will list all the implementations of the &lt;code&gt;Add&lt;&#x2F;code&gt; trait that exist in the standard library. Looking at 14th item in that list, you will see &lt;code&gt;impl&amp;lt;&#x27;a&amp;gt; Add&amp;lt;&amp;amp;&#x27;a usize&amp;gt; for usize&lt;&#x2F;code&gt;. The standard library has a specific implementation of the &lt;code&gt;Add&lt;&#x2F;code&gt; trait for the case when the right hand side (rhs) of the addition is a reference to a type. If you scroll down more you will see that all the numeric types are listed. Each numeric type has implementations of the &lt;code&gt;Add&lt;&#x2F;code&gt; trait for &lt;code&gt;T + U&lt;&#x2F;code&gt;, &lt;code&gt;&amp;amp;T + U&lt;&#x2F;code&gt;, &lt;code&gt;T + &amp;amp;U&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;T + &amp;amp;U&lt;&#x2F;code&gt;. You can also find similar results for subtraction, multiplication and division.&lt;&#x2F;p&gt;
&lt;p&gt;You will find this pattern repeated over and over in Rust. Some generic functionality is represented as a trait. In order to specify that functionality, that trait must be implemented. It is not uncommon to see long lists of implementations for traits in the standard library. While this may appear to be a lot of boilerplate, the benefit is that Rust can check our code at compile time (the alternative would be to wait until runtime which is less safe and makes our code slower).&lt;&#x2F;p&gt;
&lt;p&gt;If we jump back to the list of implementations for the &lt;code&gt;Add&lt;&#x2F;code&gt; trait you might notice something interesting. The standard library does not specify implementations for addition between different types. This code will not work:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c = a + b;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you ever ran into a compiler error about adding two different numeric types together before and wondered why that does not work, now you know. It is not some compiler magic, but instead the simple fact that the standard library does not list &lt;code&gt;impl Add&amp;lt;u32&amp;gt; for u64&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I mentioned above that we should not have to rely on the documentation to understand how standard features work. So far, we have been relying on the &lt;em&gt;excellent&lt;&#x2F;em&gt; documentation of the Rust standard library. If we scroll back up the webpage, we should see the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;src&#x2F;core&#x2F;ops.rs.html#182-190&quot;&gt;[src]&lt;&#x2F;a&gt; link to the actual source code for the &lt;code&gt;Add&lt;&#x2F;code&gt; trait. If we follow that link, we will see the definition of the &lt;code&gt;Add&lt;&#x2F;code&gt; trait and then a macro called &lt;code&gt;add_impl!&lt;&#x2F;code&gt; being defined. Macros can be a little hard to understand, but if we can generally understand that this macro defines &lt;code&gt;T + T&lt;&#x2F;code&gt;. Right below that macro we should see something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;add_impl! { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we see how all the numeric types implement the &lt;code&gt;Add&lt;&#x2F;code&gt; trait for &lt;code&gt;T + T&lt;&#x2F;code&gt;. We need to look a little deeper to understand how references are handled. If we look back at the bottom of the &lt;code&gt;add_impl!&lt;&#x2F;code&gt; macro we will see another macro called &lt;code&gt;forward_ref_binop!&lt;&#x2F;code&gt;. If we scroll up the page we can find the definition for &lt;code&gt;forward_ref_binop!&lt;&#x2F;code&gt; and we will notice that it defines the behavior for &lt;code&gt;&amp;amp;T + U&lt;&#x2F;code&gt;, &lt;code&gt;T + &amp;amp;U&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;T + &amp;amp;U&lt;&#x2F;code&gt;. Take note that the use of macros greatly decreased the amount of boilerplate in the Rust standard library. Macros are harder to read, but they are certainly powerful.&lt;&#x2F;p&gt;
&lt;p&gt;I find myself following the above approach when I run into something about Rust I do not understand. This even works for crates listed on crates.io that generate documentation. For example, the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mio&#x2F;&quot;&gt;mio crate&lt;&#x2F;a&gt; hosts &lt;a href=&quot;http:&#x2F;&#x2F;rustdoc.s3-website-us-east-1.amazonaws.com&#x2F;mio&#x2F;v0.5.x&#x2F;mio&#x2F;&quot;&gt;documentation&lt;&#x2F;a&gt; on Amazon S3 but the look, feel and functionality are the same as the official Rust documentation webpages. There are other ancillary benefits to exploring the Rust standard library. Along the way you learn things you were not explicitly looking for. The standard library can also be a great reference for how to implement something. The code is written to a high standard and puts a lot of emphasis on correctness. Reading the core and standard libraries may seem daunting at first, especially if you are not familar with macros, but stick with it. With some practice and patience it will become much more familiar to you. At that point, you can start contributing too!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Managing Connection State With mio</title>
        <published>2015-10-23T00:00:00+00:00</published>
        <updated>2015-10-23T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/10/23/managing-connection-state-with-mio-rust.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/10/23/managing-connection-state-with-mio-rust.html/</id>
        
        <content type="html">&lt;p&gt;I would wager most people who choose mio to solve their async IO problems are expecting more abstraction in the library. The oft repeated question of &lt;em&gt;Why doesn&#x27;t mio have callbacks?&lt;&#x2F;em&gt; is evidence of this. In fact, it is a design goal of mio to add only as much abstraction necessary to provide a consistent API for the various OS async IO implementations. A consequence of this design decision is that there are subtle behavioral differences between platforms. It may be tempting to let mio manage the state of various connections, but I have found that this can have unintended consequences. For example, until recently &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;mio&#x2F;pull&#x2F;270&quot;&gt;mio internally buffered kqueue events&lt;&#x2F;a&gt;. The way epoll is designed does not warrant buffering events and those of us using kqueue encountered some &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;mio&#x2F;pull&#x2F;265&quot;&gt;interesting panic behavior on kqueue&lt;&#x2F;a&gt;. I was able to avoid this issue when I started managing connection state in conjunction with the recently added &lt;code&gt;Handler::tick()&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;The idea for adding &lt;code&gt;Handler::tick()&lt;&#x2F;code&gt; came from a discussion abbout &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;mio&#x2F;issues&#x2F;219&quot;&gt;deregister bevhavior&lt;&#x2F;a&gt;. The idea is that at the end of each event loop &lt;em&gt;tick&lt;&#x2F;em&gt;, the &lt;code&gt;Handler::tick()&lt;&#x2F;code&gt; function will be called. By default this function does nothing. We can implement this function to act as a checkpoint to sync the state of our connections with mio before the start of the next event loop &lt;em&gt;tick&lt;&#x2F;em&gt;. We have three types of state:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;socket state&lt;&#x2F;strong&gt; - whether the connection is reset or not.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;event state&lt;&#x2F;strong&gt; - whether we need to register, reregister or do nothing.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;read&#x2F;write state&lt;&#x2F;strong&gt; - whether we are in the middle of a read&#x2F;write or not. I discussed a solution to this in my post on &lt;a href=&quot;&#x2F;2015&#x2F;09&#x2F;12&#x2F;creating-a-simple-protocol-when-using-rust-and-mio.html&quot;&gt;Creating A Simple Protocol When Using Rust and mio&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;socket-state&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#socket-state&quot; aria-label=&quot;Anchor link for: socket-state&quot;&gt;Socket State&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Our connection socket can stop working for many different reasons. When this does happen, we need to remove the connection from the connection slab. One straight-forward approach is to immediately remove the connection from the slab when there is an error related to the socket. Keep in mind though that just because we had an error when trying to handle an event does not mean that there is not another event for that same token. If we try to handle that later event by looking up that connection using a token, we will inadvertently panic. We are now forced to try and keep track of whether a token still exists in the slab inside our &lt;code&gt;Handler&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of removing the connection from the slab immediately, we can keep track of whether the connection is reset or not inside the &lt;code&gt;Connection&lt;&#x2F;code&gt; struct. If we encounter an error, we will mark the socket as reset and leave the connection in the connection slab until the event loop tick is finished. Now that we have this information local to the connection, our &lt;code&gt;Handler&lt;&#x2F;code&gt; can check whether or not the connection is reset before trying to dispatch events to it. Finally, when our &lt;code&gt;Handler::tick()&lt;&#x2F;code&gt; method is called, we can check each connection to see if it is reset. If the connection is reset, we can then remove the connection from the slab. Since we did this at the end of the event loop, we can now be confident there are no more spurious events for our token.&lt;&#x2F;p&gt;
&lt;p&gt;Let us implement a simple way to keep track of socket state. The first thing we need to do is add an &lt;code&gt;is_reset: bool&lt;&#x2F;code&gt; variable to our &lt;code&gt;Connection&lt;&#x2F;code&gt; struct. If &lt;code&gt;is_reset&lt;&#x2F;code&gt; is &lt;em&gt;true&lt;&#x2F;em&gt;, then we will remove the connection from our connection slab. We will also create two new functions on our &lt;code&gt;Connection&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Connection {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mark_reset&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      trace!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;connection mark_reset; token={:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.token);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.is_reset = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;is_reset&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.is_reset
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the server can quickly determine if a connection has already been reset. If a connection is reset, we want to drop any &lt;em&gt;readable&lt;&#x2F;em&gt; or &lt;em&gt;writeable&lt;&#x2F;em&gt; events. If the connection is not reset, we are confident that we can dispatch an event to that connection. If there is an error when dispatching the event to the connection, then we want to mark that connection as reset.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; conn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find_connection_by_token&lt;&#x2F;span&gt;&lt;span&gt;(token);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_reset&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   info!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{:?} has already been reset&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, token);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;writable&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;   warn!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Write event failed for {:?}, {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, token, e);
&lt;&#x2F;span&gt;&lt;span&gt;   conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mark_reset&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the end of the event loop tick, we can loop through our connections and check if any are reset. If they are, we then remove them from the connection slab. Unfortunately, there is not a real good way to iterate over the slab and remove connections from it. Future changes to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;slab&quot;&gt;slab crate&lt;&#x2F;a&gt; should make this easier by adding features like &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;collections&#x2F;vec&#x2F;struct.Vec.html#method.retain&quot;&gt;Vec::retain&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;tick&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event_loop&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;EventLoop&amp;lt;Server&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;   trace!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Handling end of tick&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; reset_tokens = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; c in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.conns.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_reset&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;         reset_tokens.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(c.token);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; token in reset_tokens {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.conns.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(token) {
&lt;&#x2F;span&gt;&lt;span&gt;         Some(_c) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reset connection; token={:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, token);
&lt;&#x2F;span&gt;&lt;span&gt;         }
&lt;&#x2F;span&gt;&lt;span&gt;         None =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            warn!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to remove connection for {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, token);
&lt;&#x2F;span&gt;&lt;span&gt;         }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that we do not call the &lt;code&gt;EventLoop::deregister()&lt;&#x2F;code&gt; method when a connection is removed from the slab. When we remove a connection from the slab, mio will internally deregister the connection so no more events will be sent. If we call deregister too early, some async I&#x2F;O implementations (such as kqueue) will send that event as &lt;code&gt;Token(0)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;event-state&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#event-state&quot; aria-label=&quot;Anchor link for: event-state&quot;&gt;Event State&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;When I started using mio, I put calls to rereregister &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;mob&#x2F;blob&#x2F;multi-echo-blog-post&#x2F;src&#x2F;main.rs&quot;&gt;all over the place&lt;&#x2F;a&gt;. I found a couple of problems with this approach. The first problem is that it becomes increasingly difficult to keep track of when connections are getting added to or removed from the event loop. The second problem is that any spurious event has a good chance of causing a panic. Remember, this is asynchronous behavior and our mental model is often incorrect. I believe the best strategy is to handle all registration related activities inside of &lt;code&gt;Handler::tick()&lt;&#x2F;code&gt;. We can make it a goal not to reregister a connection more than once per event loop tick. We should also make it a goal not to reregister if the connection has not received an event.&lt;&#x2F;p&gt;
&lt;p&gt;Similar to our strategy with tracking socket state, we can add an &lt;code&gt;is_idle: bool&lt;&#x2F;code&gt; to our &lt;code&gt;Connection&lt;&#x2F;code&gt; struct. We will also add two similar functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Connection {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mark_idle&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      trace!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;connection mark_idle; token={:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.token);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.is_idle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;is_idle&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.is_idle
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the bottom of our &lt;code&gt;Handler::ready()&lt;&#x2F;code&gt; method, we need to mark the connection as being idle:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; self.token is our `Server` token. we do not want to mark that idle
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.token != token {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find_connection_by_token&lt;&#x2F;span&gt;&lt;span&gt;(token).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mark_idle&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;code&gt;Handler::tick()&lt;&#x2F;code&gt; method will now need to reregister any connection that is in an idle state. We can add combine the check for reregisration with the check for reset connections in the same loop. We end up with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;tick&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event_loop&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;EventLoop&amp;lt;Server&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    trace!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Handling end of tick&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; reset_tokens = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; c in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.conns.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_reset&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            reset_tokens.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(c.token);
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_idle&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reregister&lt;&#x2F;span&gt;&lt;span&gt;(event_loop)
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;                    warn!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Reregister failed {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span&gt;                    c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mark_reset&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    reset_tokens.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(c.token);
&lt;&#x2F;span&gt;&lt;span&gt;                });
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; token in reset_tokens {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.conns.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(token) {
&lt;&#x2F;span&gt;&lt;span&gt;            Some(_c) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reset connection; token={:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, token);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            None =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                warn!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to remove connection for {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, token);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The full code can be found here: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;mob&#x2F;tree&#x2F;state-blog-post&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;mob&#x2F;tree&#x2F;state-blog-post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We now have four variables tracking various parts of our &lt;code&gt;Connection&lt;&#x2F;code&gt; state: &lt;code&gt;is_reset&lt;&#x2F;code&gt;, &lt;code&gt;is_idle&lt;&#x2F;code&gt;, &lt;code&gt;read_continuation&lt;&#x2F;code&gt; and &lt;code&gt;write_continuation&lt;&#x2F;code&gt;. The latter two being discussed in a &lt;a href=&quot;&#x2F;2015&#x2F;09&#x2F;12&#x2F;creating-a-simple-protocol-when-using-rust-and-mio.html&quot;&gt;previous blog post&lt;&#x2F;a&gt;. There is some overlap amongst these variables and I am thinking about how to represent all this state with one &lt;em&gt;state&lt;&#x2F;em&gt; variable on the &lt;code&gt;Connection&lt;&#x2F;code&gt; class.&lt;&#x2F;p&gt;
&lt;p&gt;We are also doing a loop over the connection slab for each event loop tick. This can get heavy if we have a lot of connections in the slab. Usually connections are not dropping off that often and we if we are not under load we may not have many connections eligible to be reregistered. Right now, I am willing to take the perf hit in order to not crash. However, I am thinking about ways to accomplish the safety without having to loop so often.&lt;&#x2F;p&gt;
&lt;p&gt;While the soluations may not be ideal, I think it is worth talking about some of the challenges I faced getting mob working on top of mio. Some of the answers have been organic in nature and I will continue to improve them as I learn more.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Get Data From A URL In Rust</title>
        <published>2015-09-21T00:00:00+00:00</published>
        <updated>2015-09-21T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/09/21/get-data-from-a-url-rust.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/09/21/get-data-from-a-url-rust.html/</id>
        
        <content type="html">&lt;p&gt;&lt;strong&gt;Tested on Rust 1.3&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here is a high level of example of how to make a HTTP GET request to some URL. To make the example a little more interesting, the URL will have a json response body. We will parse the body and pluck some values from the parsed json.&lt;&#x2F;p&gt;
&lt;p&gt;There are a number of crates we could use to make an HTTP GET request, but I am partial to &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;curl&quot;&gt;curl&lt;&#x2F;a&gt;. The curl library should be familiar to a wide set of audiences and libcurl is rock solid. Also, I think the Rust interface to curl is really easy to read and use. I am going to request the &lt;a href=&quot;https:&#x2F;&#x2F;www.hautelook.com&quot;&gt;HauteLook&lt;&#x2F;a&gt; API root because that is where I work and it will return &lt;a href=&quot;http:&#x2F;&#x2F;stateless.co&#x2F;hal_specification.html&quot;&gt;Hal&lt;&#x2F;a&gt; json.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;curl::http;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; url = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.hautelook.com&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp = http::handle()
&lt;&#x2F;span&gt;&lt;span&gt;     .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(url)
&lt;&#x2F;span&gt;&lt;span&gt;     .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;     .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;         panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to get {}; error is {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, url, e);
&lt;&#x2F;span&gt;&lt;span&gt;     });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A few things to point out. The curl crate allows the functions to be chained together so it reads really nice. We can map the methods directly to the curl C interface:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http::handle()&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;curl_easy_init()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;get(url)&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;curl_easy_setopt(handle, CURLOPT_URL, url);&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;exec()&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;curl_easy_perform(handle);&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The C interface would normally require us to explicitly close the handle, but Rust does this automatically for us. In Rust, we also need to unwrap the &lt;code&gt;Result&amp;lt;Response, ErrCode&amp;gt;&lt;&#x2F;code&gt; returned by the call to &lt;code&gt;exec()&lt;&#x2F;code&gt;. Rather than just use &lt;code&gt;unwrap()&lt;&#x2F;code&gt;, we can use &lt;code&gt;unwrap_or_else()&lt;&#x2F;code&gt; and generate a more user-friendly error message. I will be using &lt;code&gt;unwrap_or_else()&lt;&#x2F;code&gt; throughout this example.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have a response, we need to parse the json. Again, there are a number of crates we can use for this task. Let us choose &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;serde_json&quot;&gt;serde_json&lt;&#x2F;a&gt; as that looks to be the successor to &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rustc-serialize&quot;&gt;rustc_serialize&lt;&#x2F;a&gt;. Before we start parsing json, we need to get at the response body. In curl, &lt;code&gt;resp.get_body()&lt;&#x2F;code&gt; will return a reference to a slice of unsigned 8 bit intgers &lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt;. We need to turn those bytes into a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;std&#x2F;str&#x2F;index.html&quot;&gt;unicode string slice&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; body = std::str::from_utf8(resp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_body&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to parse response from {}; error is {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, url, e);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we have our string slice, we can attempt to parse than string into a json &lt;code&gt;Value&lt;&#x2F;code&gt; type. This type will allow us to access specific fields within the json data.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; json: Value = serde_json::from_str(body).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to parse json; error is {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let us take a look at the json response before we look at the code to pluck values from it. Without going into specifics about Hal or hypermedia, we have a json object that contains one key named &lt;code&gt;_links&lt;&#x2F;code&gt;. This key &lt;code&gt;_links&lt;&#x2F;code&gt; has a number of &lt;a href=&quot;http:&#x2F;&#x2F;www.iana.org&#x2F;assignments&#x2F;link-relations&#x2F;link-relations.xhtml&quot;&gt;link relations&lt;&#x2F;a&gt; that correspond to an object that contains an &lt;code&gt;href&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_links&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;hautelook.com&#x2F;rels&#x2F;events&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.hautelook.com&#x2F;v4&#x2F;events&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;hautelook.com&#x2F;rels&#x2F;image-resizer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.hautelook.com&#x2F;resizer&#x2F;{width}x{height}&#x2F;{imgPath}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;templated&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;hautelook.com&#x2F;rels&#x2F;login&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.hautelook.com&#x2F;api&#x2F;login&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;hautelook.com&#x2F;rels&#x2F;login&#x2F;soft&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.hautelook.com&#x2F;api&#x2F;login&#x2F;soft&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;hautelook.com&#x2F;rels&#x2F;members&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.hautelook.com&#x2F;v4&#x2F;members&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;hautelook.com&#x2F;rels&#x2F;search2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.hautelook.com&#x2F;api&#x2F;search2&#x2F;catalog&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;profile&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.hautelook.com&#x2F;api&#x2F;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.hautelook.com&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let us write some code to print out each link relation with the corresponding href value. This will involve us first getting &lt;code&gt;_links&lt;&#x2F;code&gt; and then iterating over the link releations inside of &lt;code&gt;_links&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; links = json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_object&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span&gt;| object.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_links&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;links&lt;&#x2F;span&gt;&lt;span&gt;| links.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_object&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| {
&lt;&#x2F;span&gt;&lt;span&gt;        panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to get &amp;#39;_links&amp;#39; value from json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(rel, link) in links.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; href = link.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;| value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_string&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| {
&lt;&#x2F;span&gt;&lt;span&gt;            panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to get &amp;#39;href&amp;#39; value from within &amp;#39;_links&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, rel, href);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In serde, the &lt;code&gt;Value&lt;&#x2F;code&gt; type represents all possible json values. Before we can do something meaningful, we must convert the value to a more specific json type. Since our json starts out as an object with one key, we need to first use the &lt;code&gt;as_object()&lt;&#x2F;code&gt; function. The &lt;code&gt;as_object()&lt;&#x2F;code&gt; function will convert the &lt;code&gt;Value&lt;&#x2F;code&gt; into a &lt;code&gt;BTreeMap&lt;&#x2F;code&gt; type. We can then use the &lt;code&gt;get&lt;&#x2F;code&gt; function that comes with &lt;code&gt;BTreeMap&lt;&#x2F;code&gt; to get at our link relations. I am using the &lt;code&gt;and_then()&lt;&#x2F;code&gt; funtion avoid dealing with &lt;code&gt;unwrap()&lt;&#x2F;code&gt; over and over. I could have also written the code to get &lt;code&gt;links&lt;&#x2F;code&gt; like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; oject = json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_object&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; links_value = object.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_links&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; links = links.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_object&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since &lt;code&gt;links&lt;&#x2F;code&gt; is just a BTreeMap, we can iterate over all the key value pairs using &lt;code&gt;links.iter()&lt;&#x2F;code&gt;. The link relation, &lt;code&gt;rel&lt;&#x2F;code&gt;,  is the key and the &lt;code&gt;link&lt;&#x2F;code&gt; is the value. I am using the &lt;code&gt;find()&lt;&#x2F;code&gt; function to get the &lt;code&gt;href&lt;&#x2F;code&gt; out of the &lt;code&gt;link&lt;&#x2F;code&gt;. The &lt;code&gt;find()&lt;&#x2F;code&gt; function basically combines &lt;code&gt;as_object()&lt;&#x2F;code&gt; and &lt;code&gt;get()&lt;&#x2F;code&gt;. In order to get the actual URL string, we need to use the &lt;code&gt;as_string()&lt;&#x2F;code&gt; function. All the functions to convert &lt;code&gt;Value&lt;&#x2F;code&gt; to a more specific type are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serde-rs&#x2F;json&#x2F;blob&#x2F;e950b51a773a48281ad943c1bbf8c67fc266804a&#x2F;json&#x2F;src&#x2F;value.rs#L147&quot;&gt;here&lt;&#x2F;a&gt;. There are also some more advanced functions like &lt;code&gt;lookup()&lt;&#x2F;code&gt; and &lt;code&gt;search()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the code in its entirety:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; curl;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; serde_json;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;curl::http;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;serde_json::Value;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; url = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.hautelook.com&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp = http::handle()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(url)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to get {}; error is {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, url, e);
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; resp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_code&lt;&#x2F;span&gt;&lt;span&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to handle HTTP response code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, resp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_code&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; body = std::str::from_utf8(resp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_body&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to parse response from {}; error is {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, url, e);
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; json: Value = serde_json::from_str(body).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to parse json; error is {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; links = json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_object&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span&gt;| object.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_links&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;links&lt;&#x2F;span&gt;&lt;span&gt;| links.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_object&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| {
&lt;&#x2F;span&gt;&lt;span&gt;            panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to get &amp;#39;_links&amp;#39; value from json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(rel, link) in links.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; href = link.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;| value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_string&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| {
&lt;&#x2F;span&gt;&lt;span&gt;                panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to get &amp;#39;href&amp;#39; value from within &amp;#39;_links&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;            });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, rel, href);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We now have all the knowledge we need to work with URLs that return a json response. I put the complete &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;rust-get-data-from-url&quot;&gt;working example&lt;&#x2F;a&gt; on github.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Creating A Simple Protocol When Using Rust and mio</title>
        <published>2015-09-12T00:00:00+00:00</published>
        <updated>2015-09-12T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/09/12/creating-a-simple-protocol-when-using-rust-and-mio.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/09/12/creating-a-simple-protocol-when-using-rust-and-mio.html/</id>
        
        <content type="html">&lt;p&gt;This post is going to walk through establishing a simple protocol when using mio.&lt;&#x2F;p&gt;
&lt;p&gt;Let us first talk about why a protocol is needed. There are two common network protocols in use today: UDP and TCP. UDP is a message oriented protocol that delivers the message in one chunk. The downside to UDP is that there is no guarantee of message delivery because UDP does not handle packet loss. Many people want to protect against packet loss so they choose TCP instead. TCP is a stream oriented protocol. Data is sent byte by byte. A &quot;message&quot; may come one byte at a time, in multi-byte chunks or all at once. The only thing we can count on with TCP is that the bytes will arrive in the same order they were sent. And here is the reason we need a higher level protocol: It is task of the receiving socket to determine when it has enough data to make any sense of it.&lt;&#x2F;p&gt;
&lt;p&gt;I have seen two basic approaches to building a higher level protocol. The HTTP standard uses both, so let us look at how it works. An HTTP request is split into two parts: a header section and a body section. The header section contains meta information, mostly in the form of headers, used to precisely describe the request. We do not know ahead of time how long a header is or how many headers a request sends. However, HTTP uses &lt;code&gt;\r\n&lt;&#x2F;code&gt; to signal the end of the header. Within the header section is the &lt;em&gt;Content-Length&lt;&#x2F;em&gt; header that specifies how many bytes the body section is. So one approach is to use a marker, such as &lt;code&gt;\r\n&lt;&#x2F;code&gt;, to signal the end of the message. Another approach is to explicitly specify how many bytes to read. HTTP also has a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chunked_transfer_encoding&quot;&gt;chunked transfer encoding&lt;&#x2F;a&gt; option in in HTTP 1.1 that combines both of these approaches to read the body section.&lt;&#x2F;p&gt;
&lt;p&gt;There are some really powerful tools for building protocols, such as &lt;a href=&quot;https:&#x2F;&#x2F;capnproto.org&#x2F;&quot;&gt;capnproto&lt;&#x2F;a&gt;. I wanted something very simple that I could implement. I decided to tell the receiver how many bytes of data they should be expecting. To do this, I use the first 64 bits to specify how many bytes I am sending over the wire. My custom protocol is not &lt;em&gt;discoverable&lt;&#x2F;em&gt;. Both the sender and receiver have to agree ahead of time on this protocol and implement it.&lt;&#x2F;p&gt;
&lt;p&gt;The basic strategy for receiving is as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Read the first 64 bits from the socket.&lt;&#x2F;li&gt;
&lt;li&gt;Convert those bits into a &lt;code&gt;u64&lt;&#x2F;code&gt; type and determine the length of the message.&lt;&#x2F;li&gt;
&lt;li&gt;Read &lt;code&gt;message_length&lt;&#x2F;code&gt; bytes from the socket.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Either of the reads can receieve &lt;code&gt;WouldBlock&lt;&#x2F;code&gt; which, &lt;a href=&quot;&#x2F;2015&#x2F;07&#x2F;12&#x2F;my-basic-understanding-of-mio-and-async-io.html#i-would-block-you&quot;&gt;we know&lt;&#x2F;a&gt;, means we have to try again later. This is not a problem for our first read of the 64 bytes. However, if we receive &lt;code&gt;WouldBlock&lt;&#x2F;code&gt; during the second read then we have to remember to not try and read the first 64 bytes from the socket when we try again. This means we have to keep some state around reads. We need to keep track of two peices of information. The first is whether or not we are in the middle of reading. The second is if we are in the middle of reading then we need to keep track of how many bytes the message is. I added &lt;code&gt;read_continuation: Option&amp;lt;u64&amp;gt;&lt;&#x2F;code&gt; to my &lt;code&gt;Connection&lt;&#x2F;code&gt; struct to capture this.&lt;&#x2F;p&gt;
&lt;p&gt;Here is how we read the message length:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;read_message_length&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; io::Result&amp;lt;Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(n) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.read_continuation {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Ok(Some(n));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buf = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bytes = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.sock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_read&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buf) {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(None) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Ok(None);
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(Some(n)) =&amp;gt; n,
&lt;&#x2F;span&gt;&lt;span&gt;        Err(e) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Err(e);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; bytes &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        warn!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Found message length of {} bytes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, bytes);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Err(Error::new(ErrorKind::InvalidData, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Invalid message length&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; msg_len = BigEndian::read_u64(buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(Some(msg_len))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The function starts out by checking if we are in the middle of a read. If we are in the middle of a read, we already know the message length and can just return it immediately. Otherwise, I try to read 8 bytes from the socket. The &lt;code&gt;try_read&lt;&#x2F;code&gt; function is provided by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;mio&#x2F;blob&#x2F;272fb3d06e8f7134c9611e1877b3ff71642ced67&#x2F;src&#x2F;io.rs#L57&quot;&gt;mio&lt;&#x2F;a&gt; and will return &lt;code&gt;Ok(None)&lt;&#x2F;code&gt; on &lt;code&gt;WouldBlock&lt;&#x2F;code&gt;. If the read fails or less than 8 bytes were received, we return an error that will cause this connection to be reset. Finally, I use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;byteorder&quot;&gt;byteorder&lt;&#x2F;a&gt; crate to convert the bytes into a &lt;code&gt;u64&lt;&#x2F;code&gt; that will tell us how long the message is.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;readable&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; io::Result&amp;lt;Option&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; msg_len = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;try!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_message_length&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;        None =&amp;gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Ok(None); },
&lt;&#x2F;span&gt;&lt;span&gt;        Some(n) =&amp;gt; n,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Expected message length: {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, msg_len);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; recv_buf : Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Vec::with_capacity(msg_len as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; resolve &amp;quot;multiple applicable items in scope [E0034]&amp;quot; error
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sock_ref = &amp;lt;TcpStream as Read&amp;gt;::by_ref(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.sock);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; sock_ref.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;(msg_len as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_read_buf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; recv_buf) {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(None) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CONN : read encountered WouldBlock&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We are being forced to try again, but we already read the two bytes off of
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the wire that determined the length. We need to store the message length
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; so we can resume next time we get readable.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.read_continuation = Some(msg_len as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(None)
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(Some(n)) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CONN : we read {} bytes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, n);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; n &amp;lt; msg_len as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Err(Error::new(ErrorKind::InvalidData, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Did not read enough bytes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.read_continuation = None;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(Some(recv_buf))
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        Err(e) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to read buffer for token {:?}, error: {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.token, e);
&lt;&#x2F;span&gt;&lt;span&gt;            Err(e)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;code&gt;readable&lt;&#x2F;code&gt; function starts out by determining the length of the message and then creates a vector with a capacity that is at least message length. I would have preferred a fixed slice, but I do not know of a way to create that slice dynamically. Then we need to read at &lt;em&gt;most&lt;&#x2F;em&gt; &lt;code&gt;msg_len&lt;&#x2F;code&gt; bytes from the socket. We can do this using the &lt;code&gt;take&lt;&#x2F;code&gt; function. This starts to look a bit messy due to some Rust issues. If we just call &lt;code&gt;self.sock.by_ref()&lt;&#x2F;code&gt; Rust is not able to determine which &lt;code&gt;by_ref&lt;&#x2F;code&gt; function to use. The error message looks something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;src&#x2F;connection.rs:76:25: 76:33 error: multiple applicable items in scope [E0034]
&lt;&#x2F;span&gt;&lt;span&gt;src&#x2F;connection.rs:76         match self.sock.by_ref().take(msg_len as u64).try_read_buf(&amp;amp;mut recv_buf) {
&lt;&#x2F;span&gt;&lt;span&gt;                                             ^~~~~~~~
&lt;&#x2F;span&gt;&lt;span&gt;src&#x2F;connection.rs:76:25: 76:33 help: run `rustc --explain E0034` to see a detailed explanation
&lt;&#x2F;span&gt;&lt;span&gt;src&#x2F;connection.rs:76:25: 76:33 note: candidate #1 is defined in an impl of the trait `std::io::Read` for the type `&amp;amp;mut _`
&lt;&#x2F;span&gt;&lt;span&gt;src&#x2F;connection.rs:76         match self.sock.by_ref().take(msg_len as u64).try_read_buf(&amp;amp;mut recv_buf) {
&lt;&#x2F;span&gt;&lt;span&gt;                                             ^~~~~~~~
&lt;&#x2F;span&gt;&lt;span&gt;src&#x2F;connection.rs:76:25: 76:33 note: candidate #2 is defined in an impl of the trait `std::io::Write` for the type `&amp;amp;mut _`
&lt;&#x2F;span&gt;&lt;span&gt;src&#x2F;connection.rs:76         match self.sock.by_ref().take(msg_len as u64).try_read_buf(&amp;amp;mut recv_buf) {
&lt;&#x2F;span&gt;&lt;span&gt;                                             ^~~~~~~~
&lt;&#x2F;span&gt;&lt;span&gt;src&#x2F;connection.rs:76:25: 76:33 note: candidate #3 is defined in an impl of the trait `core::iter::Iterator` for the type `&amp;amp;mut _`
&lt;&#x2F;span&gt;&lt;span&gt;src&#x2F;connection.rs:76         match self.sock.by_ref().take(msg_len as u64).try_read_buf(&amp;amp;mut recv_buf) {
&lt;&#x2F;span&gt;&lt;span&gt;                                             ^~~~~~~~
&lt;&#x2F;span&gt;&lt;span&gt;src&#x2F;connection.rs:76:25: 76:33 note: candidate #4 is defined in an impl of the trait `std::io::Read` for the type `mio::net::tcp::TcpStream`
&lt;&#x2F;span&gt;&lt;span&gt;src&#x2F;connection.rs:76         match self.sock.by_ref().take(msg_len as u64).try_read_buf(&amp;amp;mut recv_buf) {
&lt;&#x2F;span&gt;&lt;span&gt;                                             ^~~~~~~~
&lt;&#x2F;span&gt;&lt;span&gt;src&#x2F;connection.rs:76:25: 76:33 note: candidate #5 is defined in an impl of the trait `std::io::Write` for the type `mio::net::tcp::TcpStream`
&lt;&#x2F;span&gt;&lt;span&gt;src&#x2F;connection.rs:76         match self.sock.by_ref().take(msg_len as u64).try_read_buf(&amp;amp;mut recv_buf) {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to resolve this, we need to use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ufcs.html&quot;&gt;Universal Function Call Syntax&lt;&#x2F;a&gt;, also called UFCS. Using UFCS, we can be explicit about which &lt;code&gt;by_ref&lt;&#x2F;code&gt; function we want. We can then use that reference to &lt;code&gt;take&lt;&#x2F;code&gt; at &lt;em&gt;most&lt;&#x2F;em&gt; &lt;code&gt;msg_len&lt;&#x2F;code&gt; bytes from the socket. Now we just need to handle the the different responses from the socket. If &lt;code&gt;try_read&lt;&#x2F;code&gt; returns &lt;code&gt;None&lt;&#x2F;code&gt; (meaning &lt;code&gt;WouldBlock&lt;&#x2F;code&gt;), then we need to store the length of the message in &lt;code&gt;self.read_continuation&lt;&#x2F;code&gt; so we can try again later. If we successfully read from the socket, we set &lt;code&gt;self.read_continuation&lt;&#x2F;code&gt; to &lt;code&gt;None&lt;&#x2F;code&gt; so the next readable event will know to first determine the message length.&lt;&#x2F;p&gt;
&lt;p&gt;I have tested this a fair bit and find it works well. The fact that mob echos every received message to every connected socket causes messages to naturally coalecse. Knowing the message length ahead of time helps separate the messages out. The write strategy is similar to the read strategy that I will not go over it here. The working code is located on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;mob&#x2F;tree&#x2F;protocol-blog-post&quot;&gt;on github&lt;&#x2F;a&gt;, so please use that as a reference for the write strategy if you are curious. Having a basic protocol like this is exiciting as it will set us up to handle sending or receiving json, xml or other data format later on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;related&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#related&quot; aria-label=&quot;Anchor link for: related&quot;&gt;Related&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;2015&#x2F;07&#x2F;12&#x2F;my-basic-understanding-of-mio-and-async-io.html&quot;&gt;Creating A Multi-echo Server using Rust and mio&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Using Docker to Test Rust on Linux</title>
        <published>2015-08-23T00:00:00+00:00</published>
        <updated>2015-08-23T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/08/23/using-docker-to-test-rust-on-linux.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/08/23/using-docker-to-test-rust-on-linux.html/</id>
        
        <content type="html">&lt;p&gt;I use a MacBook Air as my main laptop. I have been using Vagrant to test rust programs on linux. This feels a little heavy to me though as I have to create a Vagrant machine for each repository. The up and halt phases of the Vagrant box are a little slow and each machine eats away at my available hard drive space. I do not need an entire virutalized operating system, just a place to test my programs. This seems like a good use case for &lt;a href=&quot;https:&#x2F;&#x2F;www.docker.com&#x2F;&quot;&gt;Docker&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing I had to do was get &lt;a href=&quot;http:&#x2F;&#x2F;boot2docker.io&#x2F;&quot;&gt;boot2docker&lt;&#x2F;a&gt; installed. This was pretty straight-forward, but did take a fair bit of time. The second thing was finding an upstream Rust container (I think this is called an image) to use. I do not want to build one myself. Doing a &lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;search&#x2F;?q=rust&amp;amp;page=1&amp;amp;isAutomated=0&amp;amp;isOfficial=0&amp;amp;starCount=0&amp;amp;pullCount=0&quot;&gt;search on Docker Hub&lt;&#x2F;a&gt; I chose the &lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;schickling&#x2F;rust&#x2F;&quot;&gt;schickling&#x2F;rust&lt;&#x2F;a&gt; container. The repo info had a simple walkthrough, the Dockerfile itself seemed straightforward and it included gdb.&lt;&#x2F;p&gt;
&lt;p&gt;This container is setup to be used interatively or to run commands. To run cargo tests:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --rm -it -v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;):&#x2F;source schickling&#x2F;rust cargo test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let us go over the command. If you are familiar with Docker, you can skip this section. To start, &lt;code&gt;docker run&lt;&#x2F;code&gt; runs a command in a new contianer. The &lt;code&gt;--rm&lt;&#x2F;code&gt;, &lt;code&gt;-it&lt;&#x2F;code&gt; and &lt;code&gt;-v&lt;&#x2F;code&gt; flags are very common when running Docker containers. Here is what they mean:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;&#x2F;code&gt; - automatically remove the container when it exists. This means when the command is over, the container will stop running. This removes the &lt;em&gt;container&lt;&#x2F;em&gt;, but not the &lt;code&gt;schickling&#x2F;rust&lt;&#x2F;code&gt; &lt;em&gt;image&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-it&lt;&#x2F;code&gt; - make the docker container interactive and allocate a tty. This basically means your shell will work.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;&#x2F;code&gt; - mount a volume. In the example above, it binds the local &lt;em&gt;present working directory&lt;&#x2F;em&gt; to the &lt;code&gt;&#x2F;source&lt;&#x2F;code&gt; directory inside the container.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After the flags, we specify the upstream Docker container name &lt;code&gt;schickling&#x2F;rust&lt;&#x2F;code&gt; and then finally our command.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to run experiment inside the linux container, just omit a command. The docker file used to build&lt;code&gt;schickling&#x2F;rust&lt;&#x2F;code&gt; specifies &lt;code&gt;bash&lt;&#x2F;code&gt; as the default command.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --rm -it -v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;):&#x2F;source schickling&#x2F;rust cargo test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is basically like a &lt;code&gt;vagrant ssh&lt;&#x2F;code&gt; command. You will be given a shell inside the container. I do this when playing with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;mob&quot;&gt;mob&lt;&#x2F;a&gt; because I want to run the server, then the client in various ways. Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --rm -it -v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;):&#x2F;source schickling&#x2F;rust
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root@f237a067addb:&#x2F;source#&lt;&#x2F;span&gt;&lt;span&gt; cargo build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root@f237a067addb:&#x2F;source#&lt;&#x2F;span&gt;&lt;span&gt; RUST_LOG=trace .&#x2F;target&#x2F;debug&#x2F;mob-server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; server.log &amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root@f237a067addb:&#x2F;source#&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;target&#x2F;debug&#x2F;mob-client
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root@f237a067addb:&#x2F;source#&lt;&#x2F;span&gt;&lt;span&gt; fg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Make sure you run &lt;code&gt;cargo build&lt;&#x2F;code&gt; inside the container as Linux cannot run the executable built on OS X. If you see the error &lt;code&gt;bash: .&#x2F;target&#x2F;debug&#x2F;mob-server: cannot execute binary file&lt;&#x2F;code&gt; then you need to &lt;code&gt;cargo build&lt;&#x2F;code&gt;. I then run the mob server in the background and send the log output to a file. I run the mob client (sometimes repeatedly). When done, I use the &lt;code&gt;fg&lt;&#x2F;code&gt; command to bring the mob server process back into the foreground where I can terminate it (using Ctrl-C). I then exit the container (using Ctrl-D), the container is cleaned up and I can start fresh again if I want.&lt;&#x2F;p&gt;
&lt;p&gt;Docker was fairly easy to get setup and I have found it to be more efficient for these types of use-cases. The hardest part was getting &lt;a href=&quot;http:&#x2F;&#x2F;boot2docker.io&#x2F;&quot;&gt;boot2docker&lt;&#x2F;a&gt; installed correctly. Docker will not completely replace Vagrant on my machine, but it certainly has found a place.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Creating a PHP Extension to Rust</title>
        <published>2015-08-03T00:00:00+00:00</published>
        <updated>2015-08-03T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/08/03/creating-a-php-extension-to-rust.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/08/03/creating-a-php-extension-to-rust.html/</id>
        
        <content type="html">&lt;p&gt;I am going to walk through the creation of a PHP extension that works with a Rust library. I have a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;rust-php-ext&quot;&gt;working example&lt;&#x2F;a&gt; here. I also created a PHP extension for my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;selecta&#x2F;tree&#x2F;php-ext&quot;&gt;Rust selecta port&lt;&#x2F;a&gt;. Both examples use the same foreign function interface (ffi). I made sure to pick an example that uses strings because strings add additional complexity that numbers do not introduce.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;before-getting-started&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#before-getting-started&quot; aria-label=&quot;Anchor link for: before-getting-started&quot;&gt;Before Getting Started&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;note: I created a &lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;hjr3&#x2F;rust-php-ext&#x2F;&quot;&gt;docker container&lt;&#x2F;a&gt; that will set environment up.&lt;&#x2F;p&gt;
&lt;p&gt;You are going to need a development version of PHP. You can test if you have it by running:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ which phpize
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the &lt;code&gt;which&lt;&#x2F;code&gt; command finds something like &lt;code&gt;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;phpize&lt;&#x2F;code&gt;, you are in business. If you do not have it, I believe you can run &lt;code&gt;yum install php-devel&lt;&#x2F;code&gt; on CentOS or &lt;code&gt;apt-get install php5-dev&lt;&#x2F;code&gt; on Debian&#x2F;Ubuntu. You can also compile PHP from source to get it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compiling-the-extension&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#compiling-the-extension&quot; aria-label=&quot;Anchor link for: compiling-the-extension&quot;&gt;Compiling The Extension&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;rust-php-ext&#x2F;blob&#x2F;master&#x2F;rust&#x2F;src&#x2F;lib.rs&quot;&gt;Rust library&lt;&#x2F;a&gt; exposes a single function named &lt;code&gt;ext_score&lt;&#x2F;code&gt;. It takes two parameters of &lt;code&gt;*const char&lt;&#x2F;code&gt; and returns a 64-bit floating point type (or a double). To build the Rust library:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cd rust
&lt;&#x2F;span&gt;&lt;span&gt;$ cargo build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;rust-php-ext&#x2F;blob&#x2F;master&#x2F;php-ext&#x2F;score.c&quot;&gt;PHP extension&lt;&#x2F;a&gt; defines a single function named &lt;code&gt;score&lt;&#x2F;code&gt; that will glue PHP userland to our &lt;code&gt;ext_score&lt;&#x2F;code&gt; Rust function. To build the PHP extension:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cd php-ext
&lt;&#x2F;span&gt;&lt;span&gt;$ phpize
&lt;&#x2F;span&gt;&lt;span&gt;$ .&#x2F;configure --with-score=..&#x2F;rust&#x2F;target&#x2F;debug
&lt;&#x2F;span&gt;&lt;span&gt;$ make
&lt;&#x2F;span&gt;&lt;span&gt;$ php -d extension=modules&#x2F;score.so -r &amp;quot;var_dump(score(&amp;#39;vim&amp;#39;, &amp;#39;vi&amp;#39;));&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we have a working example, we can explore what each of the files are actually doing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;configuring-the-extension&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#configuring-the-extension&quot; aria-label=&quot;Anchor link for: configuring-the-extension&quot;&gt;Configuring The Extension&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I am going to dive right into the autotools stuff. I think autoconf is magic and the PHP wrappers around autoconf is &lt;em&gt;dark magic&lt;&#x2F;em&gt;. However, it is the biggest hurdle to getting a PHP extension working. All the stuff going on here is dense and it would take a whole blog post to go through it enough detail. You can usually get away with copy&#x2F;pasting this stuff and tinkering with it so it works. I will try and touch on a number of things that have tripped me up though. If you make it through this section, the rest is easy.&lt;&#x2F;p&gt;
&lt;p&gt;If this is way more than you need, feel free to just start hardcoding stuff in your extension. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;selecta&#x2F;commit&#x2F;b48de0ae95618447a5d237bf48e2dbd8ac45e203#diff-ec28c2fa28e17d40dbe2bee40768b51fR7&quot;&gt;I did&lt;&#x2F;a&gt;! You can then skip down to where I start talking about the source code.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the &lt;code&gt;config.m4&lt;&#x2F;code&gt; file I wrote for my extension. Let us walk through what is going on inside here.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;PHP_ARG_WITH(score,
&lt;&#x2F;span&gt;&lt;span&gt;    [whether to enable the &amp;quot;score&amp;quot; extension],
&lt;&#x2F;span&gt;&lt;span&gt;    [  --enable-score          Enable &amp;quot;score&amp;quot; extension support])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;if test &amp;quot;$PHP_SCORE&amp;quot; != &amp;quot;no&amp;quot;; then
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    SEARCH_PATH=&amp;quot;&#x2F;usr&#x2F;local &#x2F;usr&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    SEARCH_FOR=&amp;quot;libscore.so&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    if test -r $PHP_SCORE&#x2F;$SEARCH_FOR; then # path given as parameter
&lt;&#x2F;span&gt;&lt;span&gt;      SCORE_LIB_DIR=$PHP_SCORE
&lt;&#x2F;span&gt;&lt;span&gt;    else # search default path list
&lt;&#x2F;span&gt;&lt;span&gt;      AC_MSG_CHECKING([for score files in default path])
&lt;&#x2F;span&gt;&lt;span&gt;      for i in $SEARCH_PATH ; do
&lt;&#x2F;span&gt;&lt;span&gt;        if test -r $i&#x2F;lib&#x2F;$SEARCH_FOR; then
&lt;&#x2F;span&gt;&lt;span&gt;          SCORE_LIB_DIR=$i
&lt;&#x2F;span&gt;&lt;span&gt;          AC_MSG_RESULT(found in $i)
&lt;&#x2F;span&gt;&lt;span&gt;        fi
&lt;&#x2F;span&gt;&lt;span&gt;      done
&lt;&#x2F;span&gt;&lt;span&gt;    fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    if test -z &amp;quot;$SCORE_LIB_DIR&amp;quot;; then
&lt;&#x2F;span&gt;&lt;span&gt;      AC_MSG_RESULT([not found])
&lt;&#x2F;span&gt;&lt;span&gt;      AC_MSG_ERROR([Please reinstall the score rust library])
&lt;&#x2F;span&gt;&lt;span&gt;    fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    PHP_CHECK_LIBRARY(score, ext_score,
&lt;&#x2F;span&gt;&lt;span&gt;    [
&lt;&#x2F;span&gt;&lt;span&gt;        PHP_ADD_LIBRARY_WITH_PATH(score, $SCORE_LIB_DIR, SCORE_SHARED_LIBADD)
&lt;&#x2F;span&gt;&lt;span&gt;        AC_DEFINE(HAVE_SCORE, 1, [whether ext_score function exists])
&lt;&#x2F;span&gt;&lt;span&gt;    ],[
&lt;&#x2F;span&gt;&lt;span&gt;        AC_MSG_ERROR([ext_score function not found in libscore])
&lt;&#x2F;span&gt;&lt;span&gt;    ],[
&lt;&#x2F;span&gt;&lt;span&gt;        -L$SCORE_LIB_DIR -R$SCORE_LIB_DIR
&lt;&#x2F;span&gt;&lt;span&gt;    ])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    PHP_SUBST(SCORE_SHARED_LIBADD)
&lt;&#x2F;span&gt;&lt;span&gt;    PHP_NEW_EXTENSION(score, score.c, $ext_shared)
&lt;&#x2F;span&gt;&lt;span&gt;fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;config.m4&lt;&#x2F;code&gt; file is a mix of bash, some autoconf (AC) functions and some custom PHP functions. At a high level, we are writing some code to detect where our Rust library exists and then add that information into a &lt;code&gt;Makefile&lt;&#x2F;code&gt; that we will auto-generated. That &lt;code&gt;Makefile&lt;&#x2F;code&gt; is generated from a script called &lt;code&gt;configure&lt;&#x2F;code&gt;. The majority of the &lt;code&gt;configure&lt;&#x2F;code&gt; script is going to be created for us by PHP tooling. However, we need to add some extension specific information.&lt;&#x2F;p&gt;
&lt;p&gt;Let us start by hooking our extension into the &lt;code&gt;configure&lt;&#x2F;code&gt; script using &lt;code&gt;PHP_ARG_WITH&lt;&#x2F;code&gt;. The &lt;code&gt;PHP_ARG_WITH&lt;&#x2F;code&gt; function takes three parameters:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The name of the extension. This will be used to determine the name of our extension variable. In this case, &lt;code&gt;$PHP_SCORE&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The human readable string shown when &lt;code&gt;.&#x2F;configure --with-score&lt;&#x2F;code&gt; is run. Example: &lt;em&gt;checking whether to enable the &quot;score&quot; extension... yes, shared&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The human readable string shown when &lt;code&gt;.&#x2F;configure --help&lt;&#x2F;code&gt; is run. This is why the spacing of the string is a bit odd.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Now we can run &lt;code&gt;.&#x2F;configure --with-score&lt;&#x2F;code&gt; and the &lt;code&gt;configure&lt;&#x2F;code&gt; script will know what we are talking about. Next, we need to tell the configure script where to find our library so it can add those details to the Makefile.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;no-header-file&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#no-header-file&quot; aria-label=&quot;Anchor link for: no-header-file&quot;&gt;No Header File&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;PHP assumes that a library comes with a header file that describes the functions a library exposes. Rust&#x27;s FFI does not provide a header file. If we were working with a library, such as &lt;a href=&quot;http:&#x2F;&#x2F;gearman.org&#x2F;&quot;&gt;gearman&lt;&#x2F;a&gt;, then we would expect &lt;code&gt;&#x2F;usr&#x2F;include&#x2F;gearman.h&lt;&#x2F;code&gt; to exist. The standard PHP &lt;code&gt;config.m4&lt;&#x2F;code&gt; file uses this header file to check if a library is installed or not. To work around this lack of a header file, we can look for the shared object file instead: &lt;code&gt;SEARCH_FOR=&quot;&#x2F;lib&#x2F;libscore.so&quot;&lt;&#x2F;code&gt;. Now that we have a Rust compatible file to check for, we need to start searching for it.&lt;&#x2F;p&gt;
&lt;p&gt;Before we start checking for our &lt;code&gt;libscore.so&lt;&#x2F;code&gt; shared object in commonly used directories like &lt;code&gt;&#x2F;usr&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;usr&#x2F;local&lt;&#x2F;code&gt;, we want to first allow an override via &lt;code&gt;.&#x2F;configure --with-score=&#x2F;path&#x2F;to&#x2F;library&lt;&#x2F;code&gt;. This is really useful when working on our Rust library in conjunction with the PHP extension. I can run &lt;code&gt;cargo build&lt;&#x2F;code&gt; and that will install &lt;code&gt;libscore.so&lt;&#x2F;code&gt; in &lt;code&gt;&#x2F;home&#x2F;herman&#x2F;projects&#x2F;selecta&#x2F;php-ext&#x2F;target&#x2F;debug&#x2F;&lt;&#x2F;code&gt;. I can then configure my PHP extension using &lt;code&gt;.&#x2F;configure --with-score=&#x2F;home&#x2F;herman&#x2F;projects&#x2F;selecta&#x2F;php-ext&#x2F;target&#x2F;debug&#x2F;&lt;&#x2F;code&gt;. When I specify a path like this, the path will be stored in the &lt;code&gt;$PHP_SCORE&lt;&#x2F;code&gt; variable. This saves us from having to repeatedly &lt;em&gt;install&lt;&#x2F;em&gt; our Rust library. If no override was specified, we can start searching some common places. Feel free to add more directories to search for, such as &lt;code&gt;&#x2F;opt&#x2F;local&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;validating-before-linking&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#validating-before-linking&quot; aria-label=&quot;Anchor link for: validating-before-linking&quot;&gt;Validating Before Linking&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We have located a file called &lt;code&gt;libscore.so&lt;&#x2F;code&gt;, but we need to make sure it is a valid library file. The &lt;code&gt;PHP_CHECK_LIBRARY&lt;&#x2F;code&gt; function is used to validate our shared object contains a known function, or &lt;em&gt;symbol&lt;&#x2F;em&gt;. The &lt;code&gt;PHP_CHECK_LIBRARY&lt;&#x2F;code&gt; function takes five parameters:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The name of the library. In our case &lt;em&gt;score&lt;&#x2F;em&gt; will be transformed into &lt;code&gt;-lscore&lt;&#x2F;code&gt; when compiling. Example: &lt;code&gt;cc -o conftest -g  -O0  -Wl,-rpath,&#x2F;usr&#x2F;local&#x2F;lib -L&#x2F;usr&#x2F;local&#x2F;lib -lscore conftest.c&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The name of the function to try and find within our &lt;em&gt;score&lt;&#x2F;em&gt; library.&lt;&#x2F;li&gt;
&lt;li&gt;The set of actions to take if the function is found. In our case, we are adding to the Makefile code to compile against our library and defining &lt;code&gt;HAVE_SCORE&lt;&#x2F;code&gt; which is used by the during compilation.&lt;&#x2F;li&gt;
&lt;li&gt;The set of actions to take if the function is not found. In our case, we are throwing an error with a human readable error message.&lt;&#x2F;li&gt;
&lt;li&gt;The set of extra library definitions. In our case, we are making sure the compiler knows where to find our shared object.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The &lt;code&gt;PHP_ADD_LIBRARY_WTH_PATH&lt;&#x2F;code&gt; function takes three parameters:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The name of the library.&lt;&#x2F;li&gt;
&lt;li&gt;The path to the library.&lt;&#x2F;li&gt;
&lt;li&gt;The name of a variable to store library information. We will use this with &lt;code&gt;PHP_SUBST&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;final-steps&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#final-steps&quot; aria-label=&quot;Anchor link for: final-steps&quot;&gt;Final Steps&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We are almost there!&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;PHP_SUBST&lt;&#x2F;code&gt; function adds a variable with its value into the Makefile.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;PHP_NEW_EXTENSION&lt;&#x2F;code&gt; function takes a lot of parameters, but I am only going to go over three:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The name of the extension&lt;&#x2F;li&gt;
&lt;li&gt;The list of sources, or files, used to build the extension.&lt;&#x2F;li&gt;
&lt;li&gt;Whether the extension should be dynamically loaded or statically compiled. The &lt;code&gt;$ext_shared&lt;&#x2F;code&gt; variables sets this to the proper value.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;building-your-own-extension&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-your-own-extension&quot; aria-label=&quot;Anchor link for: building-your-own-extension&quot;&gt;Building Your Own Extension&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Normally, you can use the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;php&#x2F;php-src&#x2F;blob&#x2F;master&#x2F;ext&#x2F;ext_skel&quot;&gt;ext_skel&lt;&#x2F;a&gt; program to create an PHP extension out of the box. However, the &lt;code&gt;ext_skel&lt;&#x2F;code&gt; generated &lt;code&gt;config.m4&lt;&#x2F;code&gt; file makes some assumptions that Rust violates. It is a good starting point though. Change to the directory where you want the extension to be created and then run &lt;code&gt;ext_skel&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cd &#x2F;path&#x2F;to&#x2F;projects
&lt;&#x2F;span&gt;&lt;span&gt;$ &#x2F;path&#x2F;to&#x2F;php-src&#x2F;ext&#x2F;ext_skel --ext-name=php-rust-ext
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will create a &lt;code&gt;&#x2F;home&#x2F;herman&#x2F;projects&#x2F;php-rust-ext&lt;&#x2F;code&gt; directory with the following files: &lt;code&gt;config.m4  config.w32  tests&lt;&#x2F;code&gt;. I did not go over &lt;code&gt;config.w32&lt;&#x2F;code&gt; as that is for Windows and I am woefully ignorant when it comes to PHP and Windows. The &lt;code&gt;config.m4&lt;&#x2F;code&gt; has a lot of the comments to help you and you have my notes above to make any necessary changes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;making-changes-to-config-m4&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#making-changes-to-config-m4&quot; aria-label=&quot;Anchor link for: making-changes-to-config-m4&quot;&gt;Making Changes To config.m4&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Once you think you have the &lt;code&gt;config.m4&lt;&#x2F;code&gt; file properly setup, run the &lt;code&gt;phpize&lt;&#x2F;code&gt; command. This program will add a bunch of auto-generated files to your directory. Feel free to &lt;code&gt;.gitignore&lt;&#x2F;code&gt; them and do not check them into version control. Most importantly, it creates our &lt;code&gt;configure&lt;&#x2F;code&gt; file which we will now use to generate our &lt;code&gt;Makefile&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You will need to make changes to the &lt;code&gt;config.m4&lt;&#x2F;code&gt; to get your specific extension working with your library. If you make a change to the &lt;code&gt;config.m4&lt;&#x2F;code&gt; file, then make sure you run &lt;code&gt;phpize&lt;&#x2F;code&gt; again. If you make a change and then just run &lt;code&gt;.&#x2F;configure --with-score&lt;&#x2F;code&gt; then you will not get the benfit of your changes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extension-header-file&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#extension-header-file&quot; aria-label=&quot;Anchor link for: extension-header-file&quot;&gt;Extension Header File&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here is the standard PHP header file for an extension. The convention is to use &lt;code&gt;php_[extension-name].h&lt;&#x2F;code&gt; as the name. In our case, &lt;code&gt;php_score.h&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#ifndef&lt;&#x2F;span&gt;&lt;span&gt; PHP_SCORE_H
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;PHP_SCORE_H
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;PHP_SCORE_EXTNAME &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;score&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;PHP_SCORE_EXTVER  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#ifdef&lt;&#x2F;span&gt;&lt;span&gt; HAVE_CONFIG_H
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;config.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;php.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern&lt;&#x2F;span&gt;&lt;span&gt; zend_module_entry score_module_entry;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;phpext_score_ptr &amp;amp;score_module_entry
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Define our Rust foreign function interface (ffi) here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ext_score&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned char &lt;&#x2F;span&gt;&lt;span&gt;*, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can copy&#x2F;paste most of this and replace &lt;code&gt;SCORE&lt;&#x2F;code&gt; and &lt;code&gt;score&lt;&#x2F;code&gt; with the name of your extension. I chose to define the score libraries functions here. We are telling the compiler that something external to our code is defining a function named &lt;code&gt;ext_score&lt;&#x2F;code&gt;. This allows our code to compile successfully when we go to use this Rust function. Make sure you list all the functions your Rust library is exposing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extension-source-code&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#extension-source-code&quot; aria-label=&quot;Anchor link for: extension-source-code&quot;&gt;Extension Source Code&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;score.c&lt;&#x2F;code&gt; file is a little long and most of it is uninteresting. The full &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;rust-php-ext&#x2F;blob&#x2F;master&#x2F;php-ext&#x2F;score.c&quot;&gt;score.c&lt;&#x2F;a&gt; file is here. Let us explore the relevant portion where we create a PHP userland function named &lt;code&gt;score&lt;&#x2F;code&gt; to call our Rust &lt;code&gt;ext_score&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;PHP_FUNCTION(score)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    char *choice;
&lt;&#x2F;span&gt;&lt;span&gt;    int choice_len;
&lt;&#x2F;span&gt;&lt;span&gt;    char *query;
&lt;&#x2F;span&gt;&lt;span&gt;    int query_len;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, &amp;quot;ss&amp;quot;, &amp;amp;choice, &amp;amp;choice_len, &amp;amp;query, &amp;amp;query_len) == FAILURE) {
&lt;&#x2F;span&gt;&lt;span&gt;        return;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    double s = ext_score(choice, choice_len, query, query_len);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    RETURN_DOUBLE(s);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We declare new PHP functions using the &lt;code&gt;PHP_FUNCTION&lt;&#x2F;code&gt; macro and pass it the name of the function. If you are using gdb and you want to break on this function, the macro transforms it into &lt;code&gt;zif_[func-name]&lt;&#x2F;code&gt;. In our case: &lt;code&gt;zif_score&lt;&#x2F;code&gt;. The &lt;code&gt;zif&lt;&#x2F;code&gt; stands for &lt;em&gt;Zend Interface Fucntion&lt;&#x2F;em&gt;. You will notice the word &lt;em&gt;Zend&lt;&#x2F;em&gt; being used a lot as that is the name of the PHP virutal machine (and the name of the company whose founders built the vm).&lt;&#x2F;p&gt;
&lt;p&gt;We are using the &lt;code&gt;zend_parse_parameters&lt;&#x2F;code&gt; function to parse the paramters being specified in our userland function. In this case, we are expecting two strings. If this function looks a little gnarly, well that is because it is. I will provide some links at the end that explain how this function works in more detail. Suffice to say, we get back two non-nul terminated &lt;code&gt;char *&lt;&#x2F;code&gt; values and their corresponding lengths as &lt;code&gt;int&lt;&#x2F;code&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;We can pass the strings into our &lt;code&gt;ext_score&lt;&#x2F;code&gt; function, get a result back and then return that value to userland PHP. We now have a working end-to-end PHP extension to a Rust library.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#further-reading&quot; aria-label=&quot;Anchor link for: further-reading&quot;&gt;Further Reading&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For some detail on the PHP (or Zend) specific functions and macros:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;devzone.zend.com&#x2F;303&#x2F;extension-writing-part-i-introduction-to-php-and-zend&#x2F;&quot;&gt;Extension Writing Part I: Introduction to PHP and Zend&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;devzone.zend.com&#x2F;317&#x2F;extension-writing-part-ii-parameters-arrays-and-zvals&#x2F;&quot;&gt;Extension Writing Part II: Parameters, Arrays, and ZVALs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you are really serious about building PHP extensions, I suggest purchasing Sara Goleman&#x27;s excellent book on &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Extending-Embedding-PHP-Sara-Golemon&#x2F;dp&#x2F;067232704X&quot;&gt;Extending and Embedding PHP&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Creating A Multi-echo Server using Rust and mio</title>
        <published>2015-07-22T00:00:00+00:00</published>
        <updated>2015-07-22T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/07/22/creating-a-multi-echo-server-using-rust-and-mio.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/07/22/creating-a-multi-echo-server-using-rust-and-mio.html/</id>
        
        <content type="html">&lt;p&gt;This is my second blog post in a series about async IO. You may want to read &lt;a href=&quot;&#x2F;2015&#x2F;07&#x2F;12&#x2F;my-basic-understanding-of-mio-and-async-io.html&quot;&gt;first blog post&lt;&#x2F;a&gt; if you are not familar with mio or epoll&#x2F;kqueue implementations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;basic-setup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#basic-setup&quot; aria-label=&quot;Anchor link for: basic-setup&quot;&gt;Basic Setup&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;At the time of this writing, I am using the newly released mio &lt;code&gt;0.4.x&lt;&#x2F;code&gt;. Until recently if you got mio from crates.io, then you will get &lt;code&gt;0.3.x&lt;&#x2F;code&gt;. There are breaking changes between these two releases.&lt;&#x2F;p&gt;
&lt;p&gt;I have a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;mob&#x2F;blob&#x2F;multi-echo-blog-post&#x2F;src&#x2F;main.rs&quot;&gt;complete working example&lt;&#x2F;a&gt; that has a lot of comments in the source code. I am going to skip over a lot of detail and try to focus on handling a read event and then writing it to all connected clients. If I am making too large of a leap, open up the source to get some more context.&lt;&#x2F;p&gt;
&lt;p&gt;Our example will contain two main parts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A Server that handles events from our event loop and manages all connecitons.&lt;&#x2F;li&gt;
&lt;li&gt;A Connection that represents new client connections.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The code does not use &lt;em&gt;unwrap&lt;&#x2F;em&gt;. I want to properly handle errors to get a feel for something written in mio that is closer to production ready. An error related to a Connection should reset that connection and never tear down the entire server. An error from the server, except during init, should cause a safe shutdown.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;server&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#server&quot; aria-label=&quot;Anchor link for: server&quot;&gt;Server&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here is a quick overview of the &lt;code&gt;Server&lt;&#x2F;code&gt; struct.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Listening socket for our server.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sock&lt;&#x2F;span&gt;&lt;span&gt;: TcpListener,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We keep track of server token here instead of doing `const SERVER = Token(0)`.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;: Token,
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; A list of connections _accepted_ by our server. This commonly referred to as the
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; _connection slab_.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conns&lt;&#x2F;span&gt;&lt;span&gt;: Slab&amp;lt;Connection&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;code&gt;Server&lt;&#x2F;code&gt; object will receive all the events from the event loop by implementing &lt;code&gt;mio::Handler&lt;&#x2F;code&gt;. A read event for the server token means a new client connection is coming in. We need to &lt;em&gt;accept&lt;&#x2F;em&gt; that new request, create a new &lt;code&gt;Connection&lt;&#x2F;code&gt; and add that connection object to our slab. A read event for any other token means we should already have established that connection. We need to forward the read event to that established connection.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ready&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event_loop&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;EventLoop&amp;lt;Server&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;: Token, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;events&lt;&#x2F;span&gt;&lt;span&gt;: EventSet) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; events.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_readable&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.token == token {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;accept&lt;&#x2F;span&gt;&lt;span&gt;(event_loop);
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;readable&lt;&#x2F;span&gt;&lt;span&gt;(event_loop, token)
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find_connection_by_token&lt;&#x2F;span&gt;&lt;span&gt;(token).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reregister&lt;&#x2F;span&gt;&lt;span&gt;(event_loop))
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;                        warn!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Read event failed for {:?}: {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, token, e);
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reset_connection&lt;&#x2F;span&gt;&lt;span&gt;(event_loop, token);
&lt;&#x2F;span&gt;&lt;span&gt;                    });
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our accept function will add a new connection to the connection slab. &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;slab&quot;&gt;Slab&lt;&#x2F;a&gt; is described as a &lt;em&gt;Slab allocator for Rust&lt;&#x2F;em&gt;. I just recently &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hermanradtke&#x2F;status&#x2F;622863648273215488&quot;&gt;discovered&lt;&#x2F;a&gt; where the term &lt;em&gt;slab allocator&lt;&#x2F;em&gt; came from. From what I have read about &lt;code&gt;Slab&lt;&#x2F;code&gt;, it allows us to use custom types as the index for an vector-like data structure. Within mio, the &lt;code&gt;Slab&lt;&#x2F;code&gt; type has been reexported as &lt;code&gt;pub type Slab&amp;lt;T&amp;gt; = ::slab::Slab&amp;lt;T, ::Token&amp;gt;;&lt;&#x2F;code&gt;. This means that the &lt;code&gt;Token&lt;&#x2F;code&gt; type will be the index and our &lt;code&gt;Connection&lt;&#x2F;code&gt; will be the value. Do not get confused, like I was, between the &lt;code&gt;Slab&lt;&#x2F;code&gt; type in the &lt;em&gt;slab&lt;&#x2F;em&gt; crate and the &lt;code&gt;Slab&lt;&#x2F;code&gt; type mio is reexporting.&lt;&#x2F;p&gt;
&lt;p&gt;Also, I will be using the &lt;code&gt;Server#find_connection_by_token&lt;&#x2F;code&gt; method all over the place. It is really just a thin wrapper to look up a connection with a given token: &lt;code&gt;self.conns[token]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let us see the slab allocator in action:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;accept&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event_loop&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;EventLoop&amp;lt;Server&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sock = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ... skip some boilerplate about accepting a new socket connection
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `Slab#insert_with` is a wrapper around `Slab#insert`. I like `#insert_with`
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; because I make the `Token` required for creating a new connection.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `Slab#insert` returns the index where the connection was inserted.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Remember that in mio, the Slab is actually defined as 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `pub type Slab&amp;lt;T&amp;gt; = ::slab::Slab&amp;lt;T, ::Token&amp;gt;;`. Token is just a
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; tuple struct around `usize` and Token implemented `::slab::Index`
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; trait. So, every insert into the connection slab will return a new
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; token needed to register with the event loop. Fancy...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.conns.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert_with&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;registering {:?} with event loop&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, token);
&lt;&#x2F;span&gt;&lt;span&gt;            Connection::new(sock, token)
&lt;&#x2F;span&gt;&lt;span&gt;        }) {
&lt;&#x2F;span&gt;&lt;span&gt;            Some(token) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If we successfully insert, then register our connection.
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find_connection_by_token&lt;&#x2F;span&gt;&lt;span&gt;(token).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(event_loop) {
&lt;&#x2F;span&gt;&lt;span&gt;                    Ok(_) =&amp;gt; {},
&lt;&#x2F;span&gt;&lt;span&gt;                    Err(e) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to register {:?} connection with event loop, {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, token, e);
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.conns.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(token);
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            None =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If we fail to insert, `conn` will go out of scope and be dropped.
&lt;&#x2F;span&gt;&lt;span&gt;                error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to insert connection into slab&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We are using edge-triggered polling. Even our SERVER token needs to reregister.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reregister&lt;&#x2F;span&gt;&lt;span&gt;(event_loop);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Established connections are forwarded to &lt;code&gt;Server#readable&lt;&#x2F;code&gt;. Connections are identified by the token provided to us from the event loop. Once a read has finished, push the receive buffer into the all the existing connections so we can echo it back to all the connections (remember, this is a multi-echo server).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;readable&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event_loop&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;EventLoop&amp;lt;Server&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;: Token) -&amp;gt; io::Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;server conn readable; token={:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, token);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; message = try!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find_connection_by_token&lt;&#x2F;span&gt;&lt;span&gt;(token).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;readable&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; message.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remaining&lt;&#x2F;span&gt;&lt;span&gt;() == message.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;capacity&lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; is_empty
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Ok(());
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; bad_tokens = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Queue up a write for all connected clients.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; conn in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.conns.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; conn_send_buf = ByteBuf::from_slice(message.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;            conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send_message&lt;&#x2F;span&gt;&lt;span&gt;(conn_send_buf)
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|_| conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reregister&lt;&#x2F;span&gt;&lt;span&gt;(event_loop))
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;                    error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to queue message for {:?}: {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, conn.token, e);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We have a mutable borrow for the connection, so we cannot 
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; remove until the loop is finished
&lt;&#x2F;span&gt;&lt;span&gt;                    bad_tokens.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(conn.token)
&lt;&#x2F;span&gt;&lt;span&gt;                });
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; t in bad_tokens {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reset_connection&lt;&#x2F;span&gt;&lt;span&gt;(event_loop, t);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;connection&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#connection&quot; aria-label=&quot;Anchor link for: connection&quot;&gt;Connection&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;Connection&lt;&#x2F;code&gt; object represents a client connection. This looks similar to &lt;code&gt;Server&lt;&#x2F;code&gt;, with a few differences. I need keep track of what events we are interested in. By default, the connection is always interested in a read event. Only when we push messages into the &lt;code&gt;send_queue&lt;&#x2F;code&gt; will the connection be interested in a write event.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Connection {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; handle to the accepted socket
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sock&lt;&#x2F;span&gt;&lt;span&gt;: TcpStream,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; token used to register with the event loop
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;: Token,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set of events we are interested in
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interest&lt;&#x2F;span&gt;&lt;span&gt;: EventSet,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; messages waiting to be sent out
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_queue&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;ByteBuf&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are using &lt;code&gt;MutByteBuf&lt;&#x2F;code&gt; to read data from the socket. MutByteBuf, part of the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;bytes&quot;&gt;bytes crate&lt;&#x2F;a&gt;, is a heap allocated slice that mio supports internally. I prefer to use this as it does the work of tracking how much of our slice has been used. I chose a capacity of 2048 after reading &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;mio&#x2F;blob&#x2F;eed4855c627892b88f7ca68d3283cbc708a1c2b3&#x2F;src&#x2F;io.rs#L23-27&quot;&gt;some mio source code&lt;&#x2F;a&gt; as that seems like a good size of streaming. If you are wondering what the difference between messaged based and continuous streaming read the answer to this &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;3017633&#x2F;difference-between-message-oriented-protocols-and-stream-oriented-protocols&quot;&gt;StackOverflow question&lt;&#x2F;a&gt;. TLDR: UDP vs TCP. We are using TCP.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;readable&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; io::Result&amp;lt;ByteBuf&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; recv_buf = ByteBuf::mut_with_capacity(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2048&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we are PollOpt::edge() and PollOpt::oneshot(), so we _must_ drain
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the entire socket receive buffer, otherwise the server will hang.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.sock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_read_buf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; recv_buf) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the socket receive buffer is empty, so let&amp;#39;s move on
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; try_read_buf internally handles WouldBLock here too
&lt;&#x2F;span&gt;&lt;span&gt;                Ok(None) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                    debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CONN : we read 0 bytes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;                Ok(Some(n)) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                    debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CONN : we read {} bytes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, n);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; if we read less than capacity, then we know the
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; socket is empty and we should stop reading. if we
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; read to full capacity, we need to keep reading so we
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; can drain the socket. if the client sent exactly capacity,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we will match the arm above. the recieve buffer will be
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; full, so extra bytes are being dropped on the floor. to
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; properly handle this, i would need to push the data into
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; a growable Vec&amp;lt;u8&amp;gt;.
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; n &amp;lt; recv_buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;capacity&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;                Err(e) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                    error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to read buffer for token {:?}, error: {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.token, e);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Err(e);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; change our type from MutByteBuf to ByteBuf so we can use it to
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; write
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(recv_buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;flip&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The result of the read is pushed into all the existing connections write queue by &lt;code&gt;Server#readble&lt;&#x2F;code&gt; (we went over this function above). The last thing to do is to then write this message back to the client. The &lt;code&gt;try_write_buf&lt;&#x2F;code&gt; method is similar to the &lt;code&gt;try_read_buf&lt;&#x2F;code&gt; method we used above except that it expects a &lt;code&gt;ByteBuf&lt;&#x2F;code&gt;. I chose to only write one buffer from the queue to the client per write event. If there are still buffers in the queue, we remainig interested in writable events. If queue is empty, then we are no longer interested in write events.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;writable&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; io::Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        try!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.send_queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok_or&lt;&#x2F;span&gt;&lt;span&gt;(Error::new(ErrorKind::Other, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Could not pop send queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.sock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_write_buf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buf) {
&lt;&#x2F;span&gt;&lt;span&gt;                    Ok(None) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;client flushing buf; WouldBlock&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; put message back into the queue so we can try again
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.send_queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(buf);
&lt;&#x2F;span&gt;&lt;span&gt;                        Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                    Ok(Some(n)) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CONN : we wrote {} bytes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, n);
&lt;&#x2F;span&gt;&lt;span&gt;                        Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                    Err(e) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to send buffer for {:?}, error: {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.token, e);
&lt;&#x2F;span&gt;&lt;span&gt;                        Err(e)
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.send_queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.interest.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(EventSet::writable());
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I am just getting into async io and mio, so my implementation may not be ideal, but it works. We have a functioning multi-echo server that is resistant to errors. The source also contains a simple client that will repeatedly write a message to the server and then read a message.&lt;&#x2F;p&gt;
&lt;p&gt;One thing that this code does not do well is handle reads from a client. In order to do that well, we need to establish a simple &lt;em&gt;protocol&lt;&#x2F;em&gt;. I am working through that now and will go over that in my &lt;a href=&quot;&#x2F;2015&#x2F;09&#x2F;12&#x2F;creating-a-simple-protocol-when-using-rust-and-mio.html&quot;&gt;next post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>The _with Function Pattern in Rust</title>
        <published>2015-07-14T00:00:00+00:00</published>
        <updated>2015-07-14T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/07/14/the_with_function_pattern_in_rust.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/07/14/the_with_function_pattern_in_rust.html/</id>
        
        <content type="html">&lt;p&gt;I really like _with style functions that accept a &lt;code&gt;FnOnce&lt;&#x2F;code&gt; callback. The scoping rules work out really well when using these functions. I was working with the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;slab&quot;&gt;slab&lt;&#x2F;a&gt; crate recently and used the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;slab&#x2F;blob&#x2F;master&#x2F;src&#x2F;lib.rs#L142&quot;&gt;Slab#insert_with&lt;&#x2F;a&gt; function. This function takes a callback where an object is supposed to be allocated before being inserted into the slab. The function returns an &lt;code&gt;Option&lt;&#x2F;code&gt; type. I was trying to figure out to &lt;em&gt;drop&lt;&#x2F;em&gt; the newly created object if the function returned &lt;code&gt;None&lt;&#x2F;code&gt; (meaning the insertion failed). After a few minutes it dawned on me that the object was out already dropped!&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; slab;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;MyType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: String
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Slab = ::slab::Slab&amp;lt;MyType, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; slab: Slab = Slab::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;= |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;| -&amp;gt; MyType {
&lt;&#x2F;span&gt;&lt;span&gt;        MyType {
&lt;&#x2F;span&gt;&lt;span&gt;            index: index,
&lt;&#x2F;span&gt;&lt;span&gt;            value: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a very very very long string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; slab.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert_with&lt;&#x2F;span&gt;&lt;span&gt;(f) {
&lt;&#x2F;span&gt;&lt;span&gt;        Some(index) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Inserted MyType at index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index);
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        None =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If insertion fails, `MyType` will go out of scope and be dropped&#x2F;freed.
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to insert into slab&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The newly allocated &lt;code&gt;MyType&lt;&#x2F;code&gt; is &lt;em&gt;moved&lt;&#x2F;em&gt; from the callback into the &lt;code&gt;Slab#insert_with&lt;&#x2F;code&gt; scope. If the insert fails, then &lt;code&gt;Slab#insert_with&lt;&#x2F;code&gt; returns &lt;code&gt;None&lt;&#x2F;code&gt;. The newly allocated type is left within the &lt;code&gt;Slab::insert_with&lt;&#x2F;code&gt; function scope. Once &lt;code&gt;Slab#insert_with&lt;&#x2F;code&gt; returns, the newly allocated type will be automatically dropped. When an object is dropped, the destructor is called and any allocated memory will be freed.&lt;&#x2F;p&gt;
&lt;p&gt;[edit: An explanation of drop semantics can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;0320-nonzeroing-dynamic-drop.md#appendices&quot;&gt;here&lt;&#x2F;a&gt;.]&lt;&#x2F;p&gt;
&lt;p&gt;The slab crate is an elegant little library that allocates a chunk of memory on the heap and stores values using a custom type for the index. It incorporates a lot of the core Rust concepts. I am learning a lot by studying the code.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>My Basic Understanding of mio and Asynchronous IO</title>
        <published>2015-07-12T00:00:00+00:00</published>
        <updated>2015-07-12T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/07/12/my-basic-understanding-of-mio-and-async-io.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/07/12/my-basic-understanding-of-mio-and-async-io.html/</id>
        
        <content type="html">&lt;p&gt;I needed async IO for a Rust project I was working on. My server needs to read some bytes from a client and then send those bytes back to all registered clients. I decided to use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;mio&quot;&gt;mio&lt;&#x2F;a&gt;, the Rust async IO library, to build a server. All the examples I found showcased reading from a socket and then writing back to that same socket. Also, many of the examples had caveats about unhandled edge cases and used a lot of &lt;code&gt;unwrap&lt;&#x2F;code&gt;. Over the next three posts, I am going to walk through everything I learned about async (or evented) IO as it relates to mio, how I setup my server and talk in depth about some of the ways I thought about handling errors. Let us start with the an overview of how async IO works within the context of mio.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-mio-exposes-async-io&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-mio-exposes-async-io&quot; aria-label=&quot;Anchor link for: how-mio-exposes-async-io&quot;&gt;How mio Exposes Async IO&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I initially thought the mio library was a Rust wrapper around &lt;a href=&quot;http:&#x2F;&#x2F;software.schmorp.de&#x2F;pkg&#x2F;libev.html&quot;&gt;libev&lt;&#x2F;a&gt;. To my surprise, I realized mio is a replacement for libev. The name mio (metal IO) starts to make a lot more sense. The mio library is interfacing directly with &lt;a href=&quot;http:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man7&#x2F;epoll.7.html&quot;&gt;epoll&lt;&#x2F;a&gt; if you are on linux and &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;mac&#x2F;documentation&#x2F;Darwin&#x2F;Reference&#x2F;ManPages&#x2F;man2&#x2F;kqueue.2.html&quot;&gt;kqueue&lt;&#x2F;a&gt; if you are on FreeBSD (or OS X). The mio event loop interface expects us to know how the epoll&#x2F;kqueue implementations work. Mio gives us complete control over how the async IO works, but it also means there is quite a bit to learn. After a decent amount of a reading, I believe I have a basic understanding of what some of the affordances mio exposes actually do.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;registration&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#registration&quot; aria-label=&quot;Anchor link for: registration&quot;&gt;Registration&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;EventLoop&lt;&#x2F;code&gt; object provided by mio is our main point of contact. Interaction with the event loop is in the form of the &lt;code&gt;register&lt;&#x2F;code&gt;, &lt;code&gt;register_opt&lt;&#x2F;code&gt;, &lt;code&gt;reregister&lt;&#x2F;code&gt; and &lt;code&gt;deregister&lt;&#x2F;code&gt; functions. These functions allow our code to control how the event loop interacts with the incoming client connections. All the functions, with the exception of deregister, require four arguments: a &lt;code&gt;TcpStream&lt;&#x2F;code&gt; socket for our client connection, a &lt;code&gt;Token&lt;&#x2F;code&gt; to identify connections, an &lt;code&gt;EventSet&lt;&#x2F;code&gt; to control what events we are notified of and a &lt;code&gt;PollOpt&lt;&#x2F;code&gt; to determine how we should be notified. The deregister function only needs the socket.&lt;&#x2F;p&gt;
&lt;p&gt;Understanding how these functions work are key to understanding how to use mio. The concept of registering with an event loop is fairly straight forward, especially once you start looking at the code. It is the arguments to these registration functions that are more dense. I am going to assume you understand the basics of how a socket works and how to read and write bytes using that socket. The other arguments require some more in-depth discussion.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tokens&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tokens&quot; aria-label=&quot;Anchor link for: tokens&quot;&gt;Tokens&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I found the use of tokens strange at first. I am more familiar with the use of callbacks to deal with asynchronous events. Mio uses tokens as an alternative to callbacks in order to achieve the design goal of zero allocations at runtime. The &lt;code&gt;Token&lt;&#x2F;code&gt; type is really just a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;book&#x2F;structs.html#tuple-structs&quot;&gt;tuple struct&lt;&#x2F;a&gt; wrapper around &lt;code&gt;usize&lt;&#x2F;code&gt;. This means it is cheap to compare and copy. This will be important later when we start using the &lt;code&gt;Token&lt;&#x2F;code&gt; type.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;Token&lt;&#x2F;code&gt; is used to identify the state related to a connected socket. We register with the event loop using a token. Later on, the event loop will specify this token when notifying us of an event. A feedback loop of sorts is created. The &lt;code&gt;Token&lt;&#x2F;code&gt; is stored, along with the connection state, in the &lt;em&gt;connection slab&lt;&#x2F;em&gt;. I am going to discuss the connection slab when we start looking at the code. Trying to explain it without code feels overly complicated.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;eventset-formerly-known-as-interest&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#eventset-formerly-known-as-interest&quot; aria-label=&quot;Anchor link for: eventset-formerly-known-as-interest&quot;&gt;EventSet (Formerly Known As Interest)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;EventSet&lt;&#x2F;code&gt; object represents the set of events we are interested in being notified of. Until recently, the &lt;code&gt;EventSet&lt;&#x2F;code&gt; type was name &lt;code&gt;Interest&lt;&#x2F;code&gt;. The &lt;code&gt;0.3.x&lt;&#x2F;code&gt; branch still refers to it as &lt;code&gt;Interest&lt;&#x2F;code&gt;. There are four types of events:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;readable - Tells the event loop we want to read data from a client connection.&lt;&#x2F;li&gt;
&lt;li&gt;writable - Tells the event loop we want to write data to a client connection.&lt;&#x2F;li&gt;
&lt;li&gt;hup - Tells the event loop that we want to be notified when a client closes the connection (hangs up).&lt;&#x2F;li&gt;
&lt;li&gt;error - Tells the event loop that we want to listen for errors.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you are curious as to why &lt;code&gt;Interest&lt;&#x2F;code&gt; was renamed to &lt;code&gt;EventSet&lt;&#x2F;code&gt;, you can read the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;mio&#x2F;issues&#x2F;184&quot;&gt;full discussion&lt;&#x2F;a&gt; that ultimately resulted in the change. Essentially, epoll and kqueue have slightly different interfaces and this change made it easier for people using the mio library to handle those differences. The &lt;code&gt;EventSet&lt;&#x2F;code&gt; type removed the notion of a &lt;em&gt;read hint&lt;&#x2F;em&gt; that is present in many mio examples currently out there.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;write-notifications&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#write-notifications&quot; aria-label=&quot;Anchor link for: write-notifications&quot;&gt;Write Notifications&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;One thing that confused me a lot was &lt;em&gt;when&lt;&#x2F;em&gt; to use writable. A lot of the examples are just echoing back what the client sent them or they are performing some very simple task. In these cases, you do not need to register &lt;code&gt;EventSet::writable()&lt;&#x2F;code&gt; if you want to immediately write back to the socket you just read from. You can just perform the write as part of the current &lt;em&gt;readable&lt;&#x2F;em&gt; event. If you are performing an expensive task between the read and write, you may want to handle this differently. Whether you are reading or writing from the socket, you also need to be aware that the kernel might not be ready for your read or write.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;i-would-block-you&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-would-block-you&quot; aria-label=&quot;Anchor link for: i-would-block-you&quot;&gt;I Would Block You&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;[edit: I updated this section to replace the word &lt;em&gt;block&lt;&#x2F;em&gt; with more correct language like &lt;em&gt;reject&lt;&#x2F;em&gt; and &lt;em&gt;not ready&lt;&#x2F;em&gt;.]&lt;&#x2F;p&gt;
&lt;p&gt;Even though we are using asynchronous IO, the kernel is not always ready for our reads and writes. When the kernel&#x27;s internal send or receive buffers are full and it needs to flush them we will be asked to try again. Typically, the kernel communicates &lt;em&gt;try again&lt;&#x2F;em&gt; to us in the form of an error. In Rust, we have &lt;code&gt;std::io::ErrorKind::WouldBlock&lt;&#x2F;code&gt;. In C, it is referred to as &lt;code&gt;EAGAIN&lt;&#x2F;code&gt;. This error is the kernel&#x27;s way of letting us know it is not ready for our read or write and they we need to try again. This &lt;code&gt;WouldBlock&lt;&#x2F;code&gt; error &lt;em&gt;must&lt;&#x2F;em&gt; be handled. In mio, we are provided with the traits, &lt;code&gt;TryRead&lt;&#x2F;code&gt; and &lt;code&gt;TryWrite&lt;&#x2F;code&gt;, which catch &lt;code&gt;WouldBlock&lt;&#x2F;code&gt; and treat it as a 0 byte read. These traits are convenient to use as our error handling can now assume any &lt;code&gt;Err(_)&lt;&#x2F;code&gt; is an unexpected error. More about this when we get to some code samples.&lt;&#x2F;p&gt;
&lt;p&gt;You might be wondering what it means to &lt;em&gt;try again&lt;&#x2F;em&gt; when the kernel is not ready for our read or write. In order to understand this, we need to understand the polling options.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;poll-options&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#poll-options&quot; aria-label=&quot;Anchor link for: poll-options&quot;&gt;Poll Options&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;PollOpts&lt;&#x2F;code&gt; exposed by mio really tripped me up at first because I did not understand how epoll&#x2F;kqueue worked at all. There are basically two different polling options, or &lt;em&gt;triggers&lt;&#x2F;em&gt;, we can use. By default, mio will specify &lt;code&gt;PollOpt::level()&lt;&#x2F;code&gt; when registering with the event loop. Level-triggered polling is what you would expect from a straight-forward polling implementation. If you are familiar with &lt;code&gt;select()&lt;&#x2F;code&gt; in C, this is basically the same thing. The downside to level-triggered polling is that we are expected to handle the events immediately. If we do not handle them immediately, then the event loop will notify us constantly of the event and we end up wasting resources.&lt;&#x2F;p&gt;
&lt;p&gt;What most people opt for is edge-triggered, &lt;code&gt;PollOpt::edge()&lt;&#x2F;code&gt;, polling. Edge-triggred polling means that when we receive a read or write event, the event loop will automatically deregister our connection. This means we can get notified of an event and then have the option of handling it now or later. If more events come in for that connection, the event loop will queue those up for us until we register again. This requires us to have to manage the state of our connections, but gives us the flexibility we really want.&lt;&#x2F;p&gt;
&lt;p&gt;We can also combine edge-triggered polling with another option: &lt;code&gt;PollOpt::oneshot()&lt;&#x2F;code&gt;. Not only does this option sound super cool, it also guarantees that only one thread will be woken up. This allows us to be thread-safe when reading or writing. Thread safely unlocks the ability for allows us to write multi-threaded epoll processes on top of mio. For my server, I decided to register connections using &lt;code&gt;PollOpt::edge() | PollOpt::oneshot()&lt;&#x2F;code&gt; when registering with the event loop.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;trying-again&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#trying-again&quot; aria-label=&quot;Anchor link for: trying-again&quot;&gt;Trying Again&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Now that we are familiar with what events we can be notified of and what our polling options are, we need to revisit the notion of trying our read or write again when the kernel not ready for us. Using edge-triggering, a read or write event means our connection will be deregistered from the event loop. To try again, we need to first save our work and then reregister our connection with the event loop, using our token, so we can be notified after the kernel is done flushing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#next-steps&quot; aria-label=&quot;Anchor link for: next-steps&quot;&gt;Next Steps&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We now have the necessary context to start using mio. It took days for these concepts to really sink in with me. If you grok this already, you are awesome. If not, give it time! I am going to apply these above concepts to actual code in my &lt;a href=&quot;&#x2F;2015&#x2F;07&#x2F;22&#x2F;creating-a-multi-echo-server-using-rust-and-mio.html&quot;&gt;next post&lt;&#x2F;a&gt;. If you want to get started before my next post, I would start with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;mio&#x2F;blob&#x2F;master&#x2F;test&#x2F;test_echo_server.rs&quot;&gt;test echo server&lt;&#x2F;a&gt; that is part of the mio test suite. There is also the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;mio&#x2F;blob&#x2F;docs&#x2F;doc&#x2F;getting-started.md&quot;&gt;getting started&lt;&#x2F;a&gt; documentation that mio provides, though it is somewhat out of date for the &lt;code&gt;0.4.x&lt;&#x2F;code&gt; branch.&lt;&#x2F;p&gt;
&lt;p&gt;There are also a few projects that are abstracting a lot of the details needed to get mio working. These can be great example to learn from. The two I have looked at are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rrichardson&#x2F;reactor&quot;&gt;Reactor&lt;&#x2F;a&gt; - Evented polling + network utilities to make life easier&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dpc&#x2F;mioco&quot;&gt;mioco&lt;&#x2F;a&gt; - Allows handling mio connections inside coroutines&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;sources&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sources&quot; aria-label=&quot;Anchor link for: sources&quot;&gt;Sources&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In addition to reading the mio soure code and example code, I did a lot of reading about epoll itself. Here is a list of some sources I used to get more familiar with epoll&#x2F;kqueue:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;13568962&#x2F;775246&quot;&gt;Overview of epoll options&lt;&#x2F;a&gt; - StackOverflow post on the differences between level-triggered and edge-triggered polling&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;9162805&#x2F;775246&quot;&gt;Purpose of edge-triggered polling&lt;&#x2F;a&gt; - StackOverflow post describing the real advantage of edge-triggered polling&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;banu.com&#x2F;blog&#x2F;2&#x2F;how-to-use-epoll-a-complete-example-in-c&#x2F;&quot;&gt;Complete epoll example in C&lt;&#x2F;a&gt; - A blog post walking through an epoll implementation in C. This is great if you are familar with C and not quite as comfortable with Rust.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;dankamongmen&#x2F;libtorque&#x2F;master&#x2F;doc&#x2F;mteventqueues&quot;&gt;Event Queues and Threads&lt;&#x2F;a&gt; - Detailed document primarily describing Linux&#x27;s epoll(7) I&#x2F;O event notification facility as of the 2.6 kernel series.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Effectively Using Iterators In Rust</title>
        <published>2015-06-22T00:00:00+00:00</published>
        <updated>2015-06-22T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/06/22/effectively-using-iterators-in-rust.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/06/22/effectively-using-iterators-in-rust.html/</id>
        
        <content type="html">&lt;p&gt;In Rust, you quickly learn that vector and slice types are not iterable themselves. Depending on which tutorial or example you see first, you call &lt;code&gt;.iter()&lt;&#x2F;code&gt; or &lt;code&gt;.into_iter()&lt;&#x2F;code&gt;. If you do not realize both of these functions exist or that they do different things, you may find yourself fighting with the compiler to get your code to work. Let us take a journey through the world of iterators and figure out the differences between iter() and into_iter() in Rust.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;iter&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#iter&quot; aria-label=&quot;Anchor link for: iter&quot;&gt;Iter&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Most examples I have found use &lt;code&gt;.iter()&lt;&#x2F;code&gt;. We can call &lt;code&gt;v.iter()&lt;&#x2F;code&gt; on something like a vector or slice. This creates an &lt;code&gt;Iter&amp;lt;&#x27;a, T&amp;gt;&lt;&#x2F;code&gt; type and it is this &lt;code&gt;Iter&amp;lt;&#x27;a, T&amp;gt;&lt;&#x2F;code&gt; type that implements the &lt;code&gt;Iterator&lt;&#x2F;code&gt; trait and allows us to call functions like &lt;code&gt;.map()&lt;&#x2F;code&gt;. It is important to note that this &lt;code&gt;Iter&amp;lt;&#x27;a, T&amp;gt;&lt;&#x2F;code&gt; type only has a reference to &lt;code&gt;T&lt;&#x2F;code&gt;. This means that calling &lt;code&gt;v.iter()&lt;&#x2F;code&gt; will create a struct that &lt;em&gt;borrows&lt;&#x2F;em&gt; from &lt;code&gt;v&lt;&#x2F;code&gt;. Use the &lt;code&gt;iter()&lt;&#x2F;code&gt; function if you want to iterate over the values by &lt;em&gt;reference&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let us write a simple map&#x2F;reduce example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;use_names_for_something_else&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_names&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; names = vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jane&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; total_bytes = names
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;| name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;| acc + len );
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(total_bytes, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;use_names_for_something_else&lt;&#x2F;span&gt;&lt;span&gt;(names);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, we are using &lt;code&gt;.map()&lt;&#x2F;code&gt; and &lt;code&gt;.fold()&lt;&#x2F;code&gt; to count the number of bytes (not characters! Rust strings are UTF-8) for all strings in the &lt;code&gt;names&lt;&#x2F;code&gt; vector. We &lt;a href=&quot;&#x2F;2015&#x2F;06&#x2F;09&#x2F;strategies-for-solving-cannot-move-out-of-borrowing-errors-in-rust.html&quot;&gt;know&lt;&#x2F;a&gt; that the &lt;code&gt;len()&lt;&#x2F;code&gt; function can use an immutable reference. As such, we prefer &lt;code&gt;iter()&lt;&#x2F;code&gt; instead of &lt;code&gt;iter_mut()&lt;&#x2F;code&gt; or &lt;code&gt;into_iter()&lt;&#x2F;code&gt;. This allows us to &lt;em&gt;move&lt;&#x2F;em&gt; the &lt;code&gt;names&lt;&#x2F;code&gt; vector later if we want. I put a bogus &lt;code&gt;use_names_for_something()&lt;&#x2F;code&gt; function in the example just to prove this. If we had used &lt;code&gt;into_iter()&lt;&#x2F;code&gt; instead, the compiler would have given us an &lt;em&gt;error: use of moved value: &lt;code&gt;names&lt;&#x2F;code&gt;&lt;&#x2F;em&gt; response.&lt;&#x2F;p&gt;
&lt;p&gt;The closure used in &lt;code&gt;map()&lt;&#x2F;code&gt; does not require the &lt;code&gt;name&lt;&#x2F;code&gt; parameter to have a type, but I specified the type to show how it is being passed as a reference. Notice that the type of name is &lt;code&gt;&amp;amp;&amp;amp;str&lt;&#x2F;code&gt; and not &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;. The string &lt;code&gt;&quot;Jane&quot;&lt;&#x2F;code&gt; is of type &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;. The &lt;code&gt;iter()&lt;&#x2F;code&gt; function creates an iterator that has a &lt;em&gt;reference&lt;&#x2F;em&gt; to each element in the &lt;code&gt;names&lt;&#x2F;code&gt; vector. Thus, we have a &lt;em&gt;reference&lt;&#x2F;em&gt; to a &lt;em&gt;reference&lt;&#x2F;em&gt; of a string slice. This can get a little unwieldy and I generally do not worry about the type. However, if we are destructuring the type, we do need to specify the reference:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; player_scores = [
&lt;&#x2F;span&gt;&lt;span&gt;        (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;), (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jane&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;23&lt;&#x2F;span&gt;&lt;span&gt;), (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;), (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;19&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; players = player_scores
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;player&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_score&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;            player
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(players, [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jane&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the above example, the compiler will complain that we are specifying the type &lt;code&gt;(_, _)&lt;&#x2F;code&gt; instead of &lt;code&gt;&amp;amp;(_, _)&lt;&#x2F;code&gt;. Changing the pattern to &lt;code&gt;&amp;amp;(player, _score)&lt;&#x2F;code&gt; will satisfy the compiler.&lt;&#x2F;p&gt;
&lt;p&gt;Rust is immutable by default and iterators make it easy to manipulate data without needing mutability. If you do find yourself wanting to mutate some data, you can use the &lt;code&gt;iter_mut()&lt;&#x2F;code&gt; method to get a mutable reference to the values. Example use of &lt;code&gt;iter_mut()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; teams = [
&lt;&#x2F;span&gt;&lt;span&gt;        [ (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;), (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jane&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;23&lt;&#x2F;span&gt;&lt;span&gt;), (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;), (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;19&lt;&#x2F;span&gt;&lt;span&gt;), ],
&lt;&#x2F;span&gt;&lt;span&gt;        [ (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;), (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Brenda&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;), (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Brad&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;), (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Barbara&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;), ]
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; teams_in_score_order = teams
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;team&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            team.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sort_by&lt;&#x2F;span&gt;&lt;span&gt;(|&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;| a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;            team
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Teams: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, teams_in_score_order);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we are using a mutable reference to sort the list of players on each team by highest score. The &lt;code&gt;sort_by()&lt;&#x2F;code&gt; function performs the sorting of the Vector&#x2F;slice in place. This means we need the ability to mutate &lt;code&gt;team&lt;&#x2F;code&gt; in order to sort. I do not use &lt;code&gt;.iter_mut()&lt;&#x2F;code&gt; often, but sometimes functions like &lt;code&gt;.sort_by()&lt;&#x2F;code&gt; provide no immutable alternative.&lt;&#x2F;p&gt;
&lt;p&gt;I tend to use &lt;code&gt;.iter()&lt;&#x2F;code&gt; most. I try to be very concious and deliberate about when I &lt;em&gt;move&lt;&#x2F;em&gt; resources and default to borrowing (or referencing) first. The reference created by &lt;code&gt;.iter()&lt;&#x2F;code&gt; is short-lived, so we can &lt;em&gt;move&lt;&#x2F;em&gt; or use our original value afterwards. If you find yourself running into &lt;em&gt;does not live long enough&lt;&#x2F;em&gt;, &lt;em&gt;move&lt;&#x2F;em&gt; errors or using the &lt;code&gt;.clone()&lt;&#x2F;code&gt; function, this is a sign that you probably want to use &lt;code&gt;.into_iter()&lt;&#x2F;code&gt; instead.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;intoiter&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#intoiter&quot; aria-label=&quot;Anchor link for: intoiter&quot;&gt;IntoIter&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Use the &lt;code&gt;into_iter()&lt;&#x2F;code&gt; function when you want to &lt;em&gt;move&lt;&#x2F;em&gt;, instead of &lt;em&gt;borrow&lt;&#x2F;em&gt;, your value. The &lt;code&gt;.into_iter()&lt;&#x2F;code&gt; function creates a &lt;code&gt;IntoIter&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; type that now has ownership of the original value. Like &lt;code&gt;Iter&amp;lt;&#x27;a, T&amp;gt;&lt;&#x2F;code&gt;, it is this &lt;code&gt;IntoIter&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; type that actually implements the &lt;code&gt;Iterator&lt;&#x2F;code&gt; trait. The word &lt;em&gt;into&lt;&#x2F;em&gt; is commonly used in Rust to signal that &lt;code&gt;T&lt;&#x2F;code&gt; is being &lt;em&gt;moved&lt;&#x2F;em&gt;. The docs also use the words &lt;em&gt;owned&lt;&#x2F;em&gt; or &lt;em&gt;consumed&lt;&#x2F;em&gt; interchangeably with &lt;em&gt;moved&lt;&#x2F;em&gt;. I normally find myself using &lt;code&gt;.into_iter()&lt;&#x2F;code&gt; when I have a function that is transforming some values:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_names&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;(String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;) -&amp;gt; Vec&amp;lt;String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_score&lt;&#x2F;span&gt;&lt;span&gt;)| name)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v = vec!( (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; names = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_names&lt;&#x2F;span&gt;&lt;span&gt;(v);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(names, [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;get_names&lt;&#x2F;code&gt; function is plucking out the name from a list of tuples. I chose &lt;code&gt;.into_iter()&lt;&#x2F;code&gt; here because we are transforming the tuple into a &lt;code&gt;String&lt;&#x2F;code&gt; type.&lt;&#x2F;p&gt;
&lt;p&gt;The concept behind &lt;code&gt;.into_iter()&lt;&#x2F;code&gt; is similar to the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;core&#x2F;convert&#x2F;trait.Into.html&quot;&gt;core::convert::Into&lt;&#x2F;a&gt; trait we discussed when accepting &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; and &lt;code&gt;String&lt;&#x2F;code&gt; in a function. In fact, the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html&quot;&gt;std::iter::Iterator&lt;&#x2F;a&gt; type implements &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;b5b3a99f84f2b4dbf9495dccd7112c74f4357acc&#x2F;src&#x2F;libcore&#x2F;iter.rs#L1184-1192&quot;&gt;std::iter::IntoIterator&lt;&#x2F;a&gt; too. That means we can do something like &lt;code&gt;vec![1, 2, 3, 4].into_iter().into_iter().into_iter()&lt;&#x2F;code&gt;. In each subsequent call to &lt;code&gt;.into_iter()&lt;&#x2F;code&gt; just returns itself. This is an example of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Identity_function&quot;&gt;identity function&lt;&#x2F;a&gt;. I mention that only because I find it interesting to identify functional concepts that I see being used in the wild.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-for-loops-actually-work&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-for-loops-actually-work&quot; aria-label=&quot;Anchor link for: how-for-loops-actually-work&quot;&gt;How for Loops Actually Work&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;One of the first errors a new Rustacean will run into is the &lt;em&gt;move&lt;&#x2F;em&gt; error after using a for loop:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; values = vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; x in values {
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y = values; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; move error
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The question we immediately ask ourselves is &quot;How do I create a for loop that uses a reference?&quot;. A &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;iter&#x2F;index.html&quot;&gt;for loop&lt;&#x2F;a&gt; in Rust is really just syntatic sugar around &lt;code&gt;.into_iter()&lt;&#x2F;code&gt;. From the manual:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Rough translation of the iteration without a `for` iterator.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; it = values.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; it.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        Some(x) =&amp;gt; println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x),
&lt;&#x2F;span&gt;&lt;span&gt;        None =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we know &lt;code&gt;.into_iter()&lt;&#x2F;code&gt; creates a type &lt;code&gt;IntoIter&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; that &lt;em&gt;moves&lt;&#x2F;em&gt; &lt;code&gt;T&lt;&#x2F;code&gt;, this behavior makes perfect sense. If we want to use &lt;code&gt;values&lt;&#x2F;code&gt; after the for loop, we just need to use a reference instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; values = vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; x in &amp;amp;values {
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y = values; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; perfectly valid
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead of moving &lt;code&gt;values&lt;&#x2F;code&gt;, which is type &lt;code&gt;Vec&amp;lt;i32&amp;gt;&lt;&#x2F;code&gt;, we are moving &lt;code&gt;&amp;amp;values&lt;&#x2F;code&gt;, which is type &lt;code&gt;&amp;amp;Vec&amp;lt;i32&amp;gt;&lt;&#x2F;code&gt;. The for loop only &lt;em&gt;borrows&lt;&#x2F;em&gt; &lt;code&gt;&amp;amp;values&lt;&#x2F;code&gt; for the duration of the loop and we are able to &lt;em&gt;move&lt;&#x2F;em&gt; &lt;code&gt;values&lt;&#x2F;code&gt; as soon as the for loop is done.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;core-iter-cloned&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#core-iter-cloned&quot; aria-label=&quot;Anchor link for: core-iter-cloned&quot;&gt;core::iter::Cloned&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;There are times when you want create a new value when iterating over your original value. You might first try something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x = vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jane&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = x
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Exercise for the reader: &lt;em&gt;Why would &lt;code&gt;.iter()&lt;&#x2F;code&gt; not work in this example?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;While this is valid, we want to give Rust every chance to optimize our code. What if we only wanted the first two names from that list?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x = vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jane&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = x
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we clone all of &lt;code&gt;x&lt;&#x2F;code&gt;, then we are cloning all four elements, but we only need two of them. We can do better by using &lt;code&gt;.map()&lt;&#x2F;code&gt; to clone the elements of the underlying iterator:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x = vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jane&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y = x
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;| i.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Rust compiler can now optimize this code and only clone two out of the four elements of &lt;code&gt;x&lt;&#x2F;code&gt;. This pattern is used so often that Rust core now has a special function that does this for us called &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html#method.cloned&quot;&gt;cloned()&lt;&#x2F;a&gt;. This is a recent addition and will be stable in Rust 1.1. Our code now looks something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x = vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jane&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y = x
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;iterators-outside-of-core&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#iterators-outside-of-core&quot; aria-label=&quot;Anchor link for: iterators-outside-of-core&quot;&gt;Iterators Outside of Core&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;There is a really great crate, called &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;itertools&quot;&gt;itertools&lt;&#x2F;a&gt;, that provides extra iterator adaptors, iterator methods and macros. If you are looking for some iterator functionality in the Rust docs and do not see it, there is a good chance it is part of itertools. I recently added an &lt;a href=&quot;http:&#x2F;&#x2F;bluss.github.io&#x2F;rust-itertools&#x2F;doc&#x2F;itertools&#x2F;trait.Itertools.html#method.sort_by&quot;&gt;itertools::IterTools::sort_by()&lt;&#x2F;a&gt; function so we can sort collections without needed to use a mutable iterator. One of the nice things about working with Rust is that the documentation looks the same across all these crates. The &lt;a href=&quot;http:&#x2F;&#x2F;bluss.github.io&#x2F;rust-itertools&#x2F;doc&#x2F;itertools&#x2F;index.html&quot;&gt;documentation for itertools&lt;&#x2F;a&gt; looks the same as the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;&quot;&gt;documentation for Rust std library&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;related&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#related&quot; aria-label=&quot;Anchor link for: related&quot;&gt;Related&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;2015&#x2F;05&#x2F;06&#x2F;creating-a-rust-function-that-accepts-string-or-str.html&quot;&gt;Creating a Rust function that accepts String or &amp;amp;str&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Strategies for solving &#x27;cannot move out of&#x27; borrowing errors in Rust</title>
        <published>2015-06-09T00:00:00+00:00</published>
        <updated>2015-06-09T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/06/09/strategies-for-solving-cannot-move-out-of-borrowing-errors-in-rust.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/06/09/strategies-for-solving-cannot-move-out-of-borrowing-errors-in-rust.html/</id>
        
        <content type="html">&lt;p&gt;The rules around &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;book&#x2F;references-and-borrowing.html#the-rules&quot;&gt;references and borrowing&lt;&#x2F;a&gt; in Rust are fairly straight-forward. Given an owned variable, we are allowed to have as many &lt;em&gt;immutable&lt;&#x2F;em&gt; references to that variable as we want. Rust defaults to immutability, so even functions like &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;primitive.str.html#method.trim&quot;&gt;trim&lt;&#x2F;a&gt; are written in such a way that the result is a reference to the original string:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; Herman &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trimmed_name = name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; == &amp;amp;[1..n-1]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only caveat is that I cannot &lt;em&gt;move&lt;&#x2F;em&gt; the &lt;code&gt;name&lt;&#x2F;code&gt; variable anymore. If I try to move &lt;code&gt;name&lt;&#x2F;code&gt;, the compiler will give me an error: &lt;em&gt;cannot move out of &lt;code&gt;name&lt;&#x2F;code&gt; because it is borrowed&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; Herman &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trimmed_name = name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; owned_name = name; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; move error
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The compiler knows that &lt;code&gt;trimmed_name&lt;&#x2F;code&gt; is a reference to &lt;code&gt;name&lt;&#x2F;code&gt;. As long as &lt;code&gt;trimmed_name&lt;&#x2F;code&gt; is still in scope, the compiler will not let us pass &lt;code&gt;name&lt;&#x2F;code&gt; to a function, reassign it or do any other &lt;em&gt;move&lt;&#x2F;em&gt; operation. We could &lt;code&gt;clone()&lt;&#x2F;code&gt; the &lt;code&gt;name&lt;&#x2F;code&gt; variable and then trim it, but we really just want to let the compiler know when we are done &lt;em&gt;borrowing&lt;&#x2F;em&gt; &lt;code&gt;name&lt;&#x2F;code&gt;. The key word here is &lt;em&gt;scope&lt;&#x2F;em&gt;. If the reference to &lt;code&gt;name&lt;&#x2F;code&gt; goes out of scope, the compiler will let us &lt;em&gt;move&lt;&#x2F;em&gt; &lt;code&gt;name&lt;&#x2F;code&gt; because it is no longer being &lt;em&gt;borrowed&lt;&#x2F;em&gt;. Let us wrap the call to &lt;code&gt;trim()&lt;&#x2F;code&gt; in curly braces to denote a different scope.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; Herman &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trimmed_name = name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; owned_name = name;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is simple enough, but let us take it a step further. Suppose we wanted to get back the length of the trimmed string from within our scope. If we do that inside our curly braces, then &lt;code&gt;trimmed_name_len&lt;&#x2F;code&gt; will no longer exist once we leave that scope.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; Herman &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trimmed_name = name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trimmed_name_len = trimmed_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Length of trimmed string is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, trimmed_name_len); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; no such variable error
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; owned_name = name;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;strategies&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#strategies&quot; aria-label=&quot;Anchor link for: strategies&quot;&gt;Strategies&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;There are a few ways to deal with this. They all look pretty similar, but have different trade-offs. We can return the value from a scoped block of code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; Herman &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trimmed_name_len = {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trimmed_name = name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      trimmed_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;   };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Length of trimmed string is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, trimmed_name_len);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; owned_name = name;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a cheap and quick way to force the reference to go out of scope. It does not require us to specify parameters or their types nor does it require us to specify the return type. It is not reusable though. We can get some more reuse if we use an anonymous function (or closure):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; Herman &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;= |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trimmed_name = name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      trimmed_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;   };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trimmed_name_len = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;name);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Length of trimmed string is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, trimmed_name_len);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; owned_name = name;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A closure requires us to specify parameters and their types, but makes specifying the return type optional. The way this is written, the anonymous function &lt;code&gt;f&lt;&#x2F;code&gt; is only usable within the function scope. If we want complete reusuability we can use a normal function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;len_of_trimmed_string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trimmed_name = name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      trimmed_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; Herman &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trimmed_name_len = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len_of_trimmed_string&lt;&#x2F;span&gt;&lt;span&gt;(name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Length of trimmed string is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, trimmed_name_len);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; owned_name = name;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These strategies only work if we are calling immutable functions. We are temporarily keeping the reference to get some other peice of information. This works really well that information is something like implements the &lt;code&gt;Copy&lt;&#x2F;code&gt; trait, such as numbers or booleans. If we wanted to do something like remove all spaces on a string like &lt;code&gt;&quot;H e r m a n&quot;&lt;&#x2F;code&gt; then we are mutating the string. We would have to call &lt;code&gt;name.clone()&lt;&#x2F;code&gt; in order to later &lt;em&gt;move&lt;&#x2F;em&gt; the original &lt;code&gt;name&lt;&#x2F;code&gt; variable.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;closure-without-parameters&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#closure-without-parameters&quot; aria-label=&quot;Anchor link for: closure-without-parameters&quot;&gt;Closure Without Parameters&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You may have wondered if we really did have to specify parameters when using a closure. If we try to access the &lt;code&gt;name&lt;&#x2F;code&gt; variable from within the closure, it will create a reference during compile time. That reference will continue to exist, even if we try to remove the closure &lt;code&gt;f&lt;&#x2F;code&gt; from scope. Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; Herman &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;= || {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trimmed_name = name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      trimmed_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;   };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trimmed_name_len = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Length of trimmed string is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, trimmed_name_len);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; owned_name = name; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; move error
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;error: cannot move out of `name` because it is borrowed
&lt;&#x2F;span&gt;&lt;span&gt;   let owned_name = name;
&lt;&#x2F;span&gt;&lt;span&gt;               ^~~~~~~~~~
&lt;&#x2F;span&gt;&lt;span&gt;note: borrow of `name` occurs here
&lt;&#x2F;span&gt;&lt;span&gt;    let f = || {
&lt;&#x2F;span&gt;&lt;span&gt;       let trimmed_name = name.trim();
&lt;&#x2F;span&gt;&lt;span&gt;       trimmed_name.len()
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;note: in expansion of closure expansion
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;real-world-example&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#real-world-example&quot; aria-label=&quot;Anchor link for: real-world-example&quot;&gt;Real World Example&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The above examples are pretty contrived. However, you will run into this when you are breaking down functions into smaller parts. In this below example, I was using a &lt;code&gt;find_matches&lt;&#x2F;code&gt; function that required an input of type &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;. Given a &lt;code&gt;PathBuf&lt;&#x2F;code&gt;, I needed to call the immutable &lt;code&gt;file_name()&lt;&#x2F;code&gt; method on it and then convert it to a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; by calling &lt;code&gt;to_str()&lt;&#x2F;code&gt; before calling &lt;code&gt;find_matches(file_name)&lt;&#x2F;code&gt;. In order to return a tuple of &lt;code&gt;(p, matches)&lt;&#x2F;code&gt;, I had to make sure reference created by &lt;code&gt;file_name&lt;&#x2F;code&gt; was out of scope. I chose to use a function, but could have use curly braces or a closure as we discussed above.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;find_matches&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;count_filename_matches&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Path) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; file_name = path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;file_name&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_str&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| {
&lt;&#x2F;span&gt;&lt;span&gt;            debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to determine filename for {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, path);
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find_matches&lt;&#x2F;span&gt;&lt;span&gt;(file_name)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;find_filename_matches_in_path&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Vec&amp;lt;(PathBuf, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    fs::read_dir(path).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;| p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; matches = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count_filename_matches&lt;&#x2F;span&gt;&lt;span&gt;(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;(), cmd);
&lt;&#x2F;span&gt;&lt;span&gt;            (p, matches)
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|&amp;amp;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ref _p&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matches&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;            matches &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Creating a Rust function that returns a &amp;str or String</title>
        <published>2015-05-29T00:00:00+00:00</published>
        <updated>2015-05-29T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/05/29/creating-a-rust-function-that-returns-string-or-str.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/05/29/creating-a-rust-function-that-returns-string-or-str.html/</id>
        
        <content type="html">&lt;link rel=&quot;alternate&quot; href=&quot;http:&#x2F;&#x2F;habrahabr.ru&#x2F;post&#x2F;274565&#x2F;&quot; hreflang=&quot;ru&quot; &#x2F;&gt;
&lt;link rel=&quot;alternate&quot; href=&quot;&#x2F;2015&#x2F;05&#x2F;29&#x2F;creating-a-rust-function-that-returns-string-or-str.html&quot; hreflang=&quot;en&quot; &#x2F;&gt;
&lt;link rel=&quot;alternate&quot; href=&quot;&#x2F;2015&#x2F;05&#x2F;29&#x2F;creating-a-rust-function-that-returns-string-or-str.html&quot; hreflang=&quot;x-default&quot; &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;habrahabr.ru&#x2F;post&#x2F;274565&#x2F;&quot;&gt;Russian Translation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We learned how to &lt;a href=&quot;&#x2F;2015&#x2F;05&#x2F;06&#x2F;creating-a-rust-function-that-accepts-string-or-str.html&quot;&gt;create a function that accepts String or &amp;amp;str&lt;&#x2F;a&gt; as an argument. Now I want to show you how to create a function that returns either &lt;code&gt;String&lt;&#x2F;code&gt; or &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;. I also want to discuss why we would want to do this. To start, let us write a function to remove all the spaces from a given string. Our function might look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove_spaces&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buf = String::with_capacity(input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; c in input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chars&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; c != &amp;#39; &amp;#39; {
&lt;&#x2F;span&gt;&lt;span&gt;         buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(c);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   buf
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This function allocates memory for a string buffer, loops through each character of &lt;code&gt;input&lt;&#x2F;code&gt; and appends all non-space characters to the string buffer. Now I ask: what if my input did not contain spaces at all? The value &lt;code&gt;input&lt;&#x2F;code&gt; would be the same as &lt;code&gt;buf&lt;&#x2F;code&gt;. In that case, it would be more efficient to not create &lt;code&gt;buf&lt;&#x2F;code&gt; in the first place. Instead, we would like to just return the given &lt;code&gt;input&lt;&#x2F;code&gt; back to the caller. The type of &lt;code&gt;input&lt;&#x2F;code&gt; is a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; but our function returns a String though. We could change the type of &lt;code&gt;input&lt;&#x2F;code&gt; to a &lt;code&gt;String&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove_spaces&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; String { ... }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;but this causes two problems. First, by making &lt;code&gt;input&lt;&#x2F;code&gt; of type &lt;code&gt;String&lt;&#x2F;code&gt; we are forcing the caller to &lt;em&gt;move&lt;&#x2F;em&gt; the ownership of &lt;code&gt;input&lt;&#x2F;code&gt; into our function. This prevents the caller from using that value in the future. We should only take ownership of &lt;code&gt;input&lt;&#x2F;code&gt; if we actually need it. Second, the input might already be of type &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; and we are now forcing the caller to convert it into a &lt;code&gt;String&lt;&#x2F;code&gt; which defeats our attempts to not allocate new memory when creating &lt;code&gt;buf&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;clone-on-write&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#clone-on-write&quot; aria-label=&quot;Anchor link for: clone-on-write&quot;&gt;Clone-on-write&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;What we really want is the ability to return our input string (&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;) if there are no spaces and to return a new string (&lt;code&gt;String&lt;&#x2F;code&gt;) if there are spaces we need to remove. This is where the clone-on-write or &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;borrow&#x2F;enum.Cow.html&quot;&gt;Cow&lt;&#x2F;a&gt; type can be used. The &lt;code&gt;Cow&lt;&#x2F;code&gt; type allows us to abstract away whether something is &lt;code&gt;Owned&lt;&#x2F;code&gt; or &lt;code&gt;Borrowed&lt;&#x2F;code&gt;. In our example, the &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; is a reference to an existing string so that would be &lt;em&gt;borrowed&lt;&#x2F;em&gt; data. If there are spaces, then we need to allocate memory for a new &lt;code&gt;String&lt;&#x2F;code&gt;. That new &lt;code&gt;String&lt;&#x2F;code&gt; is &lt;em&gt;owned&lt;&#x2F;em&gt; by the &lt;code&gt;buf&lt;&#x2F;code&gt; variable. Normally, we would &lt;em&gt;move&lt;&#x2F;em&gt; the ownership of &lt;code&gt;buf&lt;&#x2F;code&gt; by returning it to the caller. When using &lt;code&gt;Cow&lt;&#x2F;code&gt;, we want to &lt;em&gt;move&lt;&#x2F;em&gt; the ownership of &lt;code&gt;buf&lt;&#x2F;code&gt; into the &lt;code&gt;Cow&lt;&#x2F;code&gt; type and return that.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::borrow::Cow;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove_spaces&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39; &amp;#39;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buf = String::with_capacity(input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; c in input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chars&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; c != &amp;#39; &amp;#39; {
&lt;&#x2F;span&gt;&lt;span&gt;                buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(c);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Cow::Owned(buf);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Cow::Borrowed(input);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our function now checks to see if the given &lt;code&gt;input&lt;&#x2F;code&gt; contains a space and only then allocates memory for a new buffer. If the &lt;code&gt;input&lt;&#x2F;code&gt; does not contain a space, the &lt;code&gt;input&lt;&#x2F;code&gt; is simply returned. We are adding a bit of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Analysis_of_algorithms&quot;&gt;runtime complexity&lt;&#x2F;a&gt; to optimize how we allocate memory. Notice that our &lt;code&gt;Cow&lt;&#x2F;code&gt; type has the same lifetime of the &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; type. As we discussed previously, the compiler needs to track the &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; reference to know when it can safely free (or &lt;code&gt;Drop&lt;&#x2F;code&gt;) the memory.&lt;&#x2F;p&gt;
&lt;p&gt;The beauty of &lt;code&gt;Cow&lt;&#x2F;code&gt; is that it implements the &lt;code&gt;Deref&lt;&#x2F;code&gt; trait so you can call immutable functions without knowing whether or not the result is a new string buffer or not. Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove_spaces&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman Radtke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Length of string is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If I do need to mutate &lt;code&gt;s&lt;&#x2F;code&gt;, then I can convert it into an &lt;em&gt;owned&lt;&#x2F;em&gt; variable using the &lt;code&gt;into_owned()&lt;&#x2F;code&gt; function. If the variant of &lt;code&gt;Cow&lt;&#x2F;code&gt; was already &lt;code&gt;Owned&lt;&#x2F;code&gt; then we are simply moving ownership. If the variant of &lt;code&gt;Cow&lt;&#x2F;code&gt; is &lt;code&gt;Borrowed&lt;&#x2F;code&gt;, then we are allocating memory. This allows us to lazily clone (allocate memory) only when we want to write (or mutate) the variable.&lt;&#x2F;p&gt;
&lt;p&gt;Example where a &lt;code&gt;Cow::Borrowed&lt;&#x2F;code&gt; is mutated:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove_spaces&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; s is a Cow::Borrowed variant
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len = s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; immutable function call using Deref
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; owned: String = s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_owned&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; memory is allocated for a new string
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Example where a &lt;code&gt;Cow::Owned&lt;&#x2F;code&gt; is mutated:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove_spaces&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman Radtke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; s is a Cow::Owned variant
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len = s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; immutable function call using Deref
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; owned: String = s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_owned&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; no new memory allocated as we already had a String
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The idea behind &lt;code&gt;Cow&lt;&#x2F;code&gt; is two-fold:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Delay the allocation of memory for as long as possible. In the best case, we never have to allocate any new memory.&lt;&#x2F;li&gt;
&lt;li&gt;Allow the caller of our &lt;code&gt;remove_spaces&lt;&#x2F;code&gt; function to not care if memory was allocated or not. The usage of the &lt;code&gt;Cow&lt;&#x2F;code&gt; type is the same in either case.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;leveraging-the-into-trait&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#leveraging-the-into-trait&quot; aria-label=&quot;Anchor link for: leveraging-the-into-trait&quot;&gt;Leveraging the &lt;code&gt;Into&lt;&#x2F;code&gt; Trait&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We previously discussed using the &lt;a href=&quot;&#x2F;2015&#x2F;05&#x2F;06&#x2F;creating-a-rust-function-that-accepts-string-or-str.html&quot;&gt;&lt;code&gt;Into&lt;&#x2F;code&gt; trait&lt;&#x2F;a&gt; to convert a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; into a &lt;code&gt;String&lt;&#x2F;code&gt;. We can also use the &lt;code&gt;Into&lt;&#x2F;code&gt; trait to convert the &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; or &lt;code&gt;String&lt;&#x2F;code&gt; into the proper &lt;code&gt;Cow&lt;&#x2F;code&gt; variant. By calling &lt;code&gt;.into()&lt;&#x2F;code&gt; the compiler will perform the conversion automatically. Using &lt;code&gt;.into()&lt;&#x2F;code&gt; will not speed up or slow down the code. It is simply an option to avoid having to specify &lt;code&gt;Cow::Owned&lt;&#x2F;code&gt; or &lt;code&gt;Cow::Borrowed&lt;&#x2F;code&gt; explicitly.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove_spaces&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39; &amp;#39;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buf = String::with_capacity(input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chars&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; c in v {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; c != &amp;#39; &amp;#39; {
&lt;&#x2F;span&gt;&lt;span&gt;                buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(c);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can also clean this up a bit using just iterators:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove_spaces&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39; &amp;#39;) {
&lt;&#x2F;span&gt;&lt;span&gt;        input
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chars&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x != &amp;#39; &amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;        .collect::&amp;lt;std::string::String&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;real-world-uses-of-cow&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#real-world-uses-of-cow&quot; aria-label=&quot;Anchor link for: real-world-uses-of-cow&quot;&gt;Real World Uses of &lt;code&gt;Cow&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My example of removing spaces may seem a bit contrived, but there are some great real-world applications of this strategy. Inside of Rust core there is a function that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;720735b9430f7ff61761f54587b82dab45317938&#x2F;src&#x2F;libcollections&#x2F;string.rs#L153&quot;&gt;converts bytes to UTF-8 in a lossy manner&lt;&#x2F;a&gt; and a function that will &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;c23a9d42ea082830593a73d25821842baf9ccf33&#x2F;src&#x2F;libsyntax&#x2F;parse&#x2F;lexer&#x2F;mod.rs#L271&quot;&gt;translate CRLF to LF&lt;&#x2F;a&gt;. Both of these functions have a case where a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; can be returned in the optimal case and another case where a &lt;code&gt;String&lt;&#x2F;code&gt; has to be allocated. Other examples I can think of are properly encoding an xml&#x2F;html string or properly escaping a SQL query. In many cases, the input is already properly encoded or escaped. In those cases, it is better to just return the input string back to the caller. When the input does need to be modified we are forced to allocate new memory, in the form of a String buffer, and return that to the caller.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-use-string-with-capacity&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-use-string-with-capacity&quot; aria-label=&quot;Anchor link for: why-use-string-with-capacity&quot;&gt;Why use &lt;code&gt;String::with_capacity()&lt;&#x2F;code&gt; ?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;While we are on the topic of efficient memory management, notice that I used &lt;code&gt;String::with_capacity()&lt;&#x2F;code&gt; instead of &lt;code&gt;String::new()&lt;&#x2F;code&gt; when creating the string buffer. You can use &lt;code&gt;String::new()&lt;&#x2F;code&gt; instead of &lt;code&gt;String::with_capacity()&lt;&#x2F;code&gt;, but it is more efficient to allocate memory for the buffer all at once instead of re-allocating memory as we push more &lt;code&gt;char&lt;&#x2F;code&gt;s onto the buffer. Let us walk through what Rust does when we use &lt;code&gt;String::new()&lt;&#x2F;code&gt; and then push characters onto the string.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;String&lt;&#x2F;code&gt; is really a &lt;code&gt;Vec&lt;&#x2F;code&gt; of UTF-8 code points. When &lt;code&gt;String::new()&lt;&#x2F;code&gt; is called, Rust creates a vector with zero bytes of capacity. If we then push the character &lt;code&gt;a&lt;&#x2F;code&gt; onto the string buffer, like &lt;code&gt;input.push(&#x27;a&#x27;)&lt;&#x2F;code&gt; , Rust has to increase the capacity of the vector. In this case, it will allocate 2 bytes of memory. As we push more characters and exceed the capacity, Rust will double the size of the string by re-allocating memory. It will continue to double the size each time the capacity is exceeded. The sequence of memory allocation is &lt;code&gt;0, 2, 4, 8, 16, 32 ... 2^n&lt;&#x2F;code&gt; where n is the number of times Rust detected that capacity was exceeded. Re-allocating memory is really slow (edit: kmc_v3 &lt;a href=&quot;http:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;37q8sr&#x2F;creating_a_rust_function_that_returns_a_str_or&#x2F;croylbu&quot;&gt;explained&lt;&#x2F;a&gt; that it might not be as slow as I thought). Not only does Rust have to ask the kernel for new memory, it must also copy the contents of the vector from the old memory space to the new memory space. Check out the source code for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;720735b9430f7ff61761f54587b82dab45317938&#x2F;src&#x2F;libcollections&#x2F;vec.rs#L628&quot;&gt;Vec::push&lt;&#x2F;a&gt; to see the resizing logic first-hand.&lt;&#x2F;p&gt;
&lt;p&gt;In general, we want to allocate new memory only when we need it and only allocate as much as we need. For small strings, like &lt;code&gt;remove_spaces(&quot;Herman Radtke&quot;)&lt;&#x2F;code&gt;, the overheard of re-allocating memory is not a big deal. What if I wanted to remove all of the spaces in each JavaScript file for my website? The overhead of re-allocating memory for a buffer is much higher. When pushing data onto a vector (String or otherwise) it can be a good idea to specify a capacity to start with. The best situation is when you already know the length and the capacity can be exactly set. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;720735b9430f7ff61761f54587b82dab45317938&#x2F;src&#x2F;libcollections&#x2F;vec.rs#L147-152&quot;&gt;code comments&lt;&#x2F;a&gt; for &lt;code&gt;Vec&lt;&#x2F;code&gt; give a similar warning.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;related&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#related&quot; aria-label=&quot;Anchor link for: related&quot;&gt;Related&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hermanradtke.com&#x2F;2015&#x2F;05&#x2F;03&#x2F;string-vs-str-in-rust-functions.html&quot;&gt;String vs &amp;amp;str in Rust functions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hermanradtke.com&#x2F;2015&#x2F;05&#x2F;06&#x2F;creating-a-rust-function-that-accepts-string-or-str.html&quot;&gt;Creating a Rust function that accepts String or &amp;amp;str&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Creating a Rust function that accepts String or &amp;str</title>
        <published>2015-05-06T00:00:00+00:00</published>
        <updated>2015-05-06T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/05/06/creating-a-rust-function-that-accepts-string-or-str.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/05/06/creating-a-rust-function-that-accepts-string-or-str.html/</id>
        
        <content type="html">&lt;link rel=&quot;alternate&quot; href=&quot;http:&#x2F;&#x2F;habrahabr.ru&#x2F;post&#x2F;274455&#x2F;&quot; hreflang=&quot;ru&quot; &#x2F;&gt;
&lt;link rel=&quot;alternate&quot; href=&quot;&#x2F;2015&#x2F;05&#x2F;06&#x2F;creating-a-rust-function-that-accepts-string-or-str.html&quot; hreflang=&quot;en&quot; &#x2F;&gt;
&lt;link rel=&quot;alternate&quot; href=&quot;&#x2F;2015&#x2F;05&#x2F;06&#x2F;creating-a-rust-function-that-accepts-string-or-str.html&quot; hreflang=&quot;x-default&quot; &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;habrahabr.ru&#x2F;post&#x2F;274455&#x2F;&quot;&gt;Russian Translation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In my &lt;a href=&quot;&#x2F;2015&#x2F;05&#x2F;03&#x2F;string-vs-str-in-rust-functions.html&quot;&gt;last post&lt;&#x2F;a&gt; we talked a lot about using &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; as the preferred type for functions accepting a string argument. Towards the end of that post there was some discussion about when to use &lt;code&gt;String&lt;&#x2F;code&gt; vs &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; in a &lt;code&gt;struct&lt;&#x2F;code&gt;. I think this advice is good, but there are cases where using &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; instead of &lt;code&gt;String&lt;&#x2F;code&gt; is not optimal. We need another strategy for these use cases.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-struct-containing-strings&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-struct-containing-strings&quot; aria-label=&quot;Anchor link for: a-struct-containing-strings&quot;&gt;A struct Containing Strings&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Consider the &lt;code&gt;Person&lt;&#x2F;code&gt; struct below. For the sake of discussion, let&#x27;s say &lt;code&gt;Person&lt;&#x2F;code&gt; has a real need to own the &lt;code&gt;name&lt;&#x2F;code&gt; variable. We choose to use the &lt;code&gt;String&lt;&#x2F;code&gt; type instead of &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we need to implement a &lt;code&gt;new()&lt;&#x2F;code&gt; function. Based on my last blog post, we prefer a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Person {
&lt;&#x2F;span&gt;&lt;span&gt;        Person { name: name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;() }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This works as long as we remember to call &lt;code&gt;.to_string()&lt;&#x2F;code&gt; inside of the &lt;code&gt;new()&lt;&#x2F;code&gt; function. However, the ergonomics of this function are less than desired. If we use a string literal, then we can make a new &lt;code&gt;Person&lt;&#x2F;code&gt; like &lt;code&gt;Person.new(&quot;Herman&quot;)&lt;&#x2F;code&gt;. If we already have a &lt;code&gt;String&lt;&#x2F;code&gt; though, we need to ask for a reference to the &lt;code&gt;String&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; person = Person::new(name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It feels like we are going in circles though. We had a &lt;code&gt;String&lt;&#x2F;code&gt;, then we called &lt;code&gt;as_ref()&lt;&#x2F;code&gt; to turn it into a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; only to then turn it back into a &lt;code&gt;String&lt;&#x2F;code&gt; inside of the &lt;code&gt;new()&lt;&#x2F;code&gt; function. We could go back to using a &lt;code&gt;String&lt;&#x2F;code&gt; like &lt;code&gt;fn new(name: String) -&amp;gt; Person {&lt;&#x2F;code&gt;, but that means we need to force the caller to use &lt;code&gt;.to_string()&lt;&#x2F;code&gt; whenever there is a string literal.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;into-conversions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#into-conversions&quot; aria-label=&quot;Anchor link for: into-conversions&quot;&gt;Into&lt;T&gt; conversions&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We can make our function easier for the caller to work with by using the &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;core&#x2F;convert&#x2F;trait.Into.html&quot;&gt;Into trait&lt;&#x2F;a&gt;. This trait will can automatically convert a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; into a &lt;code&gt;String&lt;&#x2F;code&gt;. If we already have a &lt;code&gt;String&lt;&#x2F;code&gt;, then no conversion happens.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;S: Into&amp;lt;String&amp;gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: S) -&amp;gt; Person {
&lt;&#x2F;span&gt;&lt;span&gt;        Person { name: name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;() }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; person = Person::new(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; person = Person::new(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This syntax for &lt;code&gt;new()&lt;&#x2F;code&gt; looks a little different. We are using &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;book&#x2F;generics.html&quot;&gt;Generics&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;book&#x2F;traits.html&quot;&gt;Traits&lt;&#x2F;a&gt; to tell Rust that some type &lt;code&gt;S&lt;&#x2F;code&gt; must implement the trait &lt;code&gt;Into&lt;&#x2F;code&gt; for type &lt;code&gt;String&lt;&#x2F;code&gt;. The &lt;code&gt;String&lt;&#x2F;code&gt; type implements &lt;code&gt;Into&amp;lt;String&amp;gt;&lt;&#x2F;code&gt; as noop because we already have a &lt;code&gt;String&lt;&#x2F;code&gt;. The &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; type implements &lt;code&gt;Into&amp;lt;String&amp;gt;&lt;&#x2F;code&gt; by using the same &lt;code&gt;.to_string()&lt;&#x2F;code&gt; method we were originally doing in the &lt;code&gt;new()&lt;&#x2F;code&gt; function. So we aren&#x27;t side-stepping the need for the &lt;code&gt;.to_string()&lt;&#x2F;code&gt; call, but we are taking away the need for the caller to do it. You might wonder if using &lt;code&gt;Into&amp;lt;String&amp;gt;&lt;&#x2F;code&gt; hurts performance and the answer is no. Rust uses &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;book&#x2F;trait-objects.html#static-dispatch&quot;&gt;static dispatch&lt;&#x2F;a&gt; and the concept of &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;14198060&#x2F;775246&quot;&gt;monomorphization&lt;&#x2F;a&gt; to handle all this during the compiler phase.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t worry if things like &lt;em&gt;static dispatch&lt;&#x2F;em&gt; and &lt;em&gt;monomorphization&lt;&#x2F;em&gt; are confusing. You just need to know that using the syntax above you can create functions that accept both &lt;code&gt;String&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;. If you are thinking that &lt;code&gt;fn new&amp;lt;S: Into&amp;lt;String&amp;gt;&amp;gt;(name: S) -&amp;gt; Person {&lt;&#x2F;code&gt; is a lot of syntax, it is. It is important to point out though that there is nothing special about &lt;code&gt;Into&amp;lt;String&amp;gt;&lt;&#x2F;code&gt;. It is just a trait that is part of the Rust standard library. You could implement this trait yourself if you wanted to. You can implement similar traits you find useful and publish them on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;&quot;&gt;crates.io&lt;&#x2F;a&gt;. All this userland power is what makes Rust an awesome language.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;another-way-to-write-person-new&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#another-way-to-write-person-new&quot; aria-label=&quot;Anchor link for: another-way-to-write-person-new&quot;&gt;Another Way To Write Person::new()&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;em&gt;where&lt;&#x2F;em&gt; syntax also works and may be easier to read, especially if the function signature becomes more complex:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;S&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: S) -&amp;gt; Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; S: Into&amp;lt;String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        Person { name: name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;() }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;related&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#related&quot; aria-label=&quot;Anchor link for: related&quot;&gt;Related&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hermanradtke.com&#x2F;2015&#x2F;05&#x2F;03&#x2F;string-vs-str-in-rust-functions.html&quot;&gt;String vs &amp;amp;str in Rust functions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hermanradtke.com&#x2F;2015&#x2F;05&#x2F;29&#x2F;creating-a-rust-function-that-returns-string-or-str.html&quot;&gt;Creating a Rust function that returns a &amp;amp;str or String&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>String vs &amp;str in Rust functions</title>
        <published>2015-05-03T00:00:00+00:00</published>
        <updated>2015-05-03T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/05/03/string-vs-str-in-rust-functions.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/05/03/string-vs-str-in-rust-functions.html/</id>
        
        <content type="html">&lt;link rel=&quot;alternate&quot; href=&quot;http:&#x2F;&#x2F;habrahabr.ru&#x2F;post&#x2F;274585&#x2F;&quot; hreflang=&quot;ru&quot; &#x2F;&gt;
&lt;link rel=&quot;alternate&quot; href=&quot;&#x2F;2015&#x2F;05&#x2F;03&#x2F;string-vs-str-in-rust-functions.html&quot; hreflang=&quot;en&quot; &#x2F;&gt;
&lt;link rel=&quot;alternate&quot; href=&quot;&#x2F;2015&#x2F;05&#x2F;03&#x2F;string-vs-str-in-rust-functions.html&quot; hreflang=&quot;x-default&quot; &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;habrahabr.ru&#x2F;post&#x2F;274485&#x2F;&quot;&gt;Russian Translation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For all the people frustrated by having to use &lt;code&gt;to_string()&lt;&#x2F;code&gt; to get programs to compile this post is for you. For those not quite understanding why Rust has two string types &lt;code&gt;String&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;, I hope to shed a little light on the matter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;functions-that-accept-a-string&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#functions-that-accept-a-string&quot; aria-label=&quot;Anchor link for: functions-that-accept-a-string&quot;&gt;Functions That Accept A String&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I want to discuss how to build interfaces that accept strings. I am an avid hypermedia fan and am obsessed about designing interfaces that are easy to use. Let&#x27;s start with a method that accepts a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;string&#x2F;struct.String.html?search=String&quot;&gt;String&lt;&#x2F;a&gt;. Our search hints that &lt;code&gt;std::string::String&lt;&#x2F;code&gt; is a good choice here.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;print_me&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;: String) {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;the message is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, msg);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; msg = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print_me&lt;&#x2F;span&gt;&lt;span&gt;(msg);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This gives a compiler error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;expected `collections::string::String`,
&lt;&#x2F;span&gt;&lt;span&gt;    found `&amp;amp;&amp;#39;static str`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So a string literal is of type &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; and does not appear compatible with the type &lt;code&gt;String&lt;&#x2F;code&gt;. We can change the &lt;code&gt;message&lt;&#x2F;code&gt; type to a &lt;code&gt;String&lt;&#x2F;code&gt; and compile succesfully: &lt;code&gt;let message = &quot;hello world&quot;.to_string();&lt;&#x2F;code&gt;. This works, but it is analogous to using &lt;code&gt;clone()&lt;&#x2F;code&gt; to get around ownership&#x2F;borrowing errors. Here are three reasons to change &lt;code&gt;print_me&lt;&#x2F;code&gt; to accept a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; instead:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; symbol is a reference type and means we are &lt;em&gt;borrowing&lt;&#x2F;em&gt; the variable. When &lt;code&gt;print_me&lt;&#x2F;code&gt; is done with the variable, ownership will return to the original owner. Unless we have good reason to &lt;em&gt;move&lt;&#x2F;em&gt; ownership of the &lt;code&gt;message&lt;&#x2F;code&gt; variable into our function, we should elect to borrow.&lt;&#x2F;li&gt;
&lt;li&gt;Using a reference is more efficient. Using &lt;code&gt;String&lt;&#x2F;code&gt; for &lt;code&gt;message&lt;&#x2F;code&gt; means the program must &lt;em&gt;copy&lt;&#x2F;em&gt; the value. When using a reference, such as &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;, no copy is made.&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;code&gt;String&lt;&#x2F;code&gt; type can be magically turned into a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; type using the &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;std&#x2F;ops&#x2F;trait.Deref.html&quot;&gt;Deref&lt;&#x2F;a&gt; trait and type coercion. This will make more sense with an example.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;example-of-deref-coercion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-of-deref-coercion&quot; aria-label=&quot;Anchor link for: example-of-deref-coercion&quot;&gt;Example of Deref Coercion&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This example creates strings in four different ways that all work with the &lt;code&gt;print_me&lt;&#x2F;code&gt; function. The key to making this all work is passing values by reference. Rather than passing &lt;code&gt;owned_string&lt;&#x2F;code&gt; as a &lt;code&gt;String&lt;&#x2F;code&gt; to &lt;code&gt;print_me&lt;&#x2F;code&gt;, we instead pass it as &lt;code&gt;&amp;amp;String&lt;&#x2F;code&gt;. When the compiler sees a &lt;code&gt;&amp;amp;String&lt;&#x2F;code&gt; being passed to a function that takes &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;, it coerces the &lt;code&gt;&amp;amp;String&lt;&#x2F;code&gt; into a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;. This same coercion takes places for the reference counted and atomically referenced counted strings. The &lt;code&gt;string&lt;&#x2F;code&gt; variable is already a reference, so no need to use a &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; when calling &lt;code&gt;print_me(string)&lt;&#x2F;code&gt;. Knowing this, we no longer need to have &lt;code&gt;.to_string()&lt;&#x2F;code&gt; calls littering our code.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;print_me&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) { println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;msg = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, msg); }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; string = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print_me&lt;&#x2F;span&gt;&lt;span&gt;(string);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; owned_string = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; or String::from_str(&amp;quot;hello world&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print_me&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;owned_string);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counted_string = std::rc::Rc::new(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print_me&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;counted_string);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; atomically_counted_string = std::sync::Arc::new(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print_me&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;atomically_counted_string);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also use Deref coercion with other types, such as a &lt;code&gt;Vector&lt;&#x2F;code&gt;. After all, a &lt;code&gt;String&lt;&#x2F;code&gt; is just a vector of 8-byte &lt;code&gt;chars&lt;&#x2F;code&gt;. Read more about &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;book&#x2F;deref-coercions.html&quot;&gt;Deref coercions&lt;&#x2F;a&gt; in the Rust lang book.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introducing-struct&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#introducing-struct&quot; aria-label=&quot;Anchor link for: introducing-struct&quot;&gt;Introducing struct&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;At this point we should be free of extraneous &lt;code&gt;to_string()&lt;&#x2F;code&gt; calls for our functions. However, we run into some problems when we try to introduce a struct. Using what we just learned, we might make a struct like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _person = Person { name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We get the error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;anon&amp;gt;:2:11: 2:15 error: missing lifetime specifier [E0106]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;anon&amp;gt;:2     name: &amp;amp;str,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rust is trying to ensure that &lt;code&gt;Person&lt;&#x2F;code&gt; does not outlive the reference to &lt;code&gt;name&lt;&#x2F;code&gt;. If &lt;code&gt;Person&lt;&#x2F;code&gt; did manage to outlive &lt;code&gt;name&lt;&#x2F;code&gt;, then we risk our program crashing. The whole point of Rust is to prevent this. So let&#x27;s start trying to get this code to compile. We need to specify a &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;book&#x2F;ownership.html#lifetimes&quot;&gt;lifetime&lt;&#x2F;a&gt;, or scope, so Rust can keep us safe. The conventional lifetime specifier is &lt;code&gt;&#x27;a&lt;&#x2F;code&gt;. I do not know why that was picked, but let&#x27;s go with that.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _person = Person { name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compile again and we get another error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;anon&amp;gt;:2:12: 2:14 error: use of undeclared lifetime name `&amp;#39;a` [E0261]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;anon&amp;gt;:2     name: &amp;amp;&amp;#39;a str,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s think about this. We know we want to hint to the Rust compiler that our struct &lt;code&gt;Person&lt;&#x2F;code&gt; should not outlive &lt;code&gt;name&lt;&#x2F;code&gt;. So, we need to delcare our lifetime on the &lt;code&gt;Person&lt;&#x2F;code&gt; struct. Some searching will point us to &lt;code&gt;&amp;lt;&#x27;a&amp;gt;&lt;&#x2F;code&gt; being the syntax to declare lifetimes.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Person&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _person = Person { name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This compiles! We normally implement methods on our structs though. Let&#x27;s add a &lt;code&gt;greet&lt;&#x2F;code&gt; function to our &lt;code&gt;Person&lt;&#x2F;code&gt; class.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Person&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, my name is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; person = Person { name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; };
&lt;&#x2F;span&gt;&lt;span&gt;    person.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We now get the error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;anon&amp;gt;:5:6: 5:12 error: wrong number of lifetime parameters: expected 1, found 0 [E0107]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;anon&amp;gt;:5 impl Person {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;code&gt;Person&lt;&#x2F;code&gt; struct has a lifetime paremeter so our implementation should have it too. Let&#x27;s declare our &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; lifetime to the implementation of &lt;code&gt;Person&lt;&#x2F;code&gt; like &lt;code&gt;impl Person&amp;lt;&#x27;a&amp;gt; {&lt;&#x2F;code&gt;. Unfortunately, this gives us a confusing error when we compile:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;anon&amp;gt;:5:13: 5:15 error: use of undeclared lifetime name `&amp;#39;a` [E0261]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;anon&amp;gt;:5 impl Person&amp;lt;&amp;#39;a&amp;gt; {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order for us to &lt;em&gt;declare&lt;&#x2F;em&gt; the lifetime, we need to specify the lifetime right after the &lt;code&gt;impl&lt;&#x2F;code&gt; like &lt;code&gt;impl&amp;lt;&#x27;a&amp;gt; Person {&lt;&#x2F;code&gt;. Compile again and we get the error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;anon&amp;gt;:5:10: 5:16 error: wrong number of lifetime parameters: expected 1, found 0 [E0107]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;anon&amp;gt;:5 impl&amp;lt;&amp;#39;a&amp;gt; Person {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we are back on track. Let&#x27;s add back our lifetime parameter back to the implementation of &lt;code&gt;Person&lt;&#x2F;code&gt; like &lt;code&gt;impl&amp;lt;&#x27;a&amp;gt; Person&amp;lt;&#x27;a&amp;gt; {&lt;&#x2F;code&gt;. Now our program compiles. Here is the complete working code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Person&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Person&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, my name is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; person = Person { name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; };
&lt;&#x2F;span&gt;&lt;span&gt;    person.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;string-or-str-in-struct&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#string-or-str-in-struct&quot; aria-label=&quot;Anchor link for: string-or-str-in-struct&quot;&gt;String or &amp;amp;str In struct&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The question is now whether to use a String or a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; in your struct. In other words when should we use a reference to another type in a struct? We should use a reference if our struct does not need ownership of the variable. This concept might be a little vague, but there are some rules I use to get at an answer.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Do I need to use the variable outside of my struct? Here is a contrived example:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, my name is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = String::from_str(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; person = Person { name: name };
&lt;&#x2F;span&gt;&lt;span&gt;    person.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;My name is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, name); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; move error
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I should use a reference here since I need to use the variable later. Here is a real-world example in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rustc-serialize&#x2F;blob&#x2F;master&#x2F;src&#x2F;json.rs#L552&quot;&gt;rustc_serialize&lt;&#x2F;a&gt;. The &lt;code&gt;Encoder&lt;&#x2F;code&gt; struct does not need to own the &lt;code&gt;writer&lt;&#x2F;code&gt; variable that implements &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;std&#x2F;fmt&#x2F;trait.Write.html&quot;&gt;std::fmt::Write&lt;&#x2F;a&gt;, just use (borrow) it for a little while. In fact, &lt;code&gt;String&lt;&#x2F;code&gt; implements &lt;code&gt;Write&lt;&#x2F;code&gt;. In this example using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rustc-serialize&#x2F;blob&#x2F;master&#x2F;src&#x2F;json.rs#L372&quot;&gt;encode&lt;&#x2F;a&gt; function, the variable of type &lt;code&gt;String&lt;&#x2F;code&gt; is passed to the Encoder and then returned to the caller of &lt;code&gt;encode&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Is my type large? If the type is large, then passing it by reference will save unncessary memory usage. Remember, passing by reference does not cause a copy of the variable. Consider a String buffer that contains a large amount of data. Copying that around will cause the program to be much slower.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We should now be able to create functions that accept strings whether they are &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;, &lt;code&gt;String&lt;&#x2F;code&gt; or event reference counted. We are also able to create &lt;code&gt;struct&lt;&#x2F;code&gt;s that are able to have variables that are references. The lifetime of the &lt;code&gt;struct&lt;&#x2F;code&gt; is linked to those referenced variables to make sure that the &lt;code&gt;struct&lt;&#x2F;code&gt; does not outlive the referenced variable and caused bad things to happen in our program. We also have a initial understanding of whether or not the varibles in our &lt;code&gt;struct&lt;&#x2F;code&gt; should be types or references to types.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-about-static&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-about-static&quot; aria-label=&quot;Anchor link for: what-about-static&quot;&gt;What about &#x27;static&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Random aside, but I thought it worth mentioning. We can use a &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; lifetime to get our original example to compile, but I caution against it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, my name is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; person = Person { name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; };
&lt;&#x2F;span&gt;&lt;span&gt;    person.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; lifetime is valid for the entire program. You may not need &lt;code&gt;Person&lt;&#x2F;code&gt; or &lt;code&gt;name&lt;&#x2F;code&gt; to live that long.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;related&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#related&quot; aria-label=&quot;Anchor link for: related&quot;&gt;Related&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;2015&#x2F;05&#x2F;06&#x2F;creating-a-rust-function-that-accepts-string-or-str.html&quot;&gt;Creating a Rust function that accepts String or &amp;amp;str&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Replace Dicts With Rust Enums</title>
        <published>2015-04-18T00:00:00+00:00</published>
        <updated>2015-04-18T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/04/18/replace-dicts-with-rust-enums.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/04/18/replace-dicts-with-rust-enums.html/</id>
        
        <content type="html">&lt;p&gt;I listened to the &lt;a href=&quot;https:&#x2F;&#x2F;thechangelog.com&#x2F;151&#x2F;&quot;&gt;Changelog podcast on Rust&lt;&#x2F;a&gt; recently and loved the remark about enabling web developers to get into systems programming. I have been thinking about the way we design code in the web world versus the way we design code in Rust. In the web world, we often use a hash&#x2F;dict&#x2F;map to hide hard-coded values behind a nicer interface. Consider an example where you would want to write a function to create the escape sequence for colors in a TTY terminal. You might write something like this in Ruby:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fg&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bg&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:default&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    fg_codes = {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:black &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:red &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:green &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yellow &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:blue &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:magenta &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;35&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:cyan &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:white &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;37&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:default &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    bg_codes = {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:black &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:red &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;41&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:green &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yellow &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;43&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:blue &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;44&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:magenta &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;45&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:cyan &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:white &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;47&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:default &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;49&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    fg_code = fg_codes.fetch(fg)
&lt;&#x2F;span&gt;&lt;span&gt;    bg_code = bg_codes.fetch(bg)
&lt;&#x2F;span&gt;&lt;span&gt;    escape &amp;quot;#{fg_code}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;#{bg_code}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The foreground and the background color codes are accessed by passing in the names of the color as a symbol via &lt;code&gt;color(:black, :white)&lt;&#x2F;code&gt;. If you tried to port this code directly into Rust, you would run into a few problems. First, there are no symbols in Rust. You might think to work around this by using strings instead of symbols. Then you start looking at the &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;collections&#x2F;struct.HashMap.html&quot;&gt;documentation for a HashMap&lt;&#x2F;a&gt; and realize maps are quite a bit more involved than in Ruby. After fighting with the syntax for a while, you may come to the conclusion that Rust is too difficult of a language for you to figure out. There is a better way.&lt;&#x2F;p&gt;
&lt;p&gt;Rust has a really powerful feature called &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;compound-data-types.html#enums&quot;&gt;enums&lt;&#x2F;a&gt;. Here is that same code using an enum:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;ANSIColor {
&lt;&#x2F;span&gt;&lt;span&gt;    black,
&lt;&#x2F;span&gt;&lt;span&gt;    red,
&lt;&#x2F;span&gt;&lt;span&gt;    green,
&lt;&#x2F;span&gt;&lt;span&gt;    yellow,
&lt;&#x2F;span&gt;&lt;span&gt;    blue,
&lt;&#x2F;span&gt;&lt;span&gt;    magenta,
&lt;&#x2F;span&gt;&lt;span&gt;    cyan,
&lt;&#x2F;span&gt;&lt;span&gt;    white,
&lt;&#x2F;span&gt;&lt;span&gt;    default
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fg&lt;&#x2F;span&gt;&lt;span&gt;: ANSIColor, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bg&lt;&#x2F;span&gt;&lt;span&gt;: ANSIColor) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;ANSIColor::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fg_code = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; fg {
&lt;&#x2F;span&gt;&lt;span&gt;        black =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        red =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        green =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        yellow =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        blue =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        magenta =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;35&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        cyan =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        white =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;37&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        default =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bg_code = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; bg {
&lt;&#x2F;span&gt;&lt;span&gt;        black =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        red =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;41&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        green =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        yellow =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;44&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        blue =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;44&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        magenta =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;45&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        cyan =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        white =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;47&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        default =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;49&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; seq = format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, fg_code, bg_code);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;escape&lt;&#x2F;span&gt;&lt;span&gt;(seq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can call the color method via &lt;code&gt;color(ANSIColor::black, ANSIColor::white);&lt;&#x2F;code&gt;. There is a complete, working example on &lt;a href=&quot;http:&#x2F;&#x2F;is.gd&#x2F;OIRlyR&quot;&gt;playpen&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I think the use of enums in that code is really expressive. Even more so than ruby: &lt;code&gt;color(:black, :white)&lt;&#x2F;code&gt;. The Rust enum provides the context of what &lt;code&gt;black&lt;&#x2F;code&gt; or &lt;code&gt;white&lt;&#x2F;code&gt; mean to the &lt;code&gt;color&lt;&#x2F;code&gt; function.  This also has the benefit of being type-checked by the compiler. If you or anyone else tries to specify a color like &lt;code&gt;ANSIColor::pink&lt;&#x2F;code&gt; the compiler would generate an error for you. This removes the pain of checking for valid colors at runtime, handling those errors at runtime and writing tests around those use-cases. This compile-time checking is what makes Rust such a powerful language.&lt;&#x2F;p&gt;
&lt;p&gt;There are plenty of cases for using dicts&#x2F;hashes&#x2F;maps in Rust. However, if you find yourself writing a function that accepts a finite set of options, then I suggest trying to use a Rust enum before resorting to a HashMap.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Getter Functions In Rust</title>
        <published>2015-01-14T00:00:00+00:00</published>
        <updated>2015-01-14T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/01/14/getters-functions-in-rust.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/01/14/getters-functions-in-rust.html/</id>
        
        <content type="html">&lt;p&gt;As soon as I started writing implementations for structs in Rust I started fighting with the compiler. Writing what seemed like a simple getter function caused me a lot of frustration. The &lt;code&gt;self&lt;&#x2F;code&gt; parameter can really throw me off in Rust. I reflexively treat it like &lt;code&gt;this&lt;&#x2F;code&gt; in C++, which has no concept of &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; or &lt;code&gt;&amp;amp;mut&lt;&#x2F;code&gt;. I do this because I think of &lt;code&gt;impl Person&lt;&#x2F;code&gt; as defining methods on a &lt;em&gt;class&lt;&#x2F;em&gt; as I would do in C++. This can be really misleading.&lt;&#x2F;p&gt;
&lt;p&gt;Consider this Ruby code that we want to port to Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Person
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr_reader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;initialize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In Rust this would look something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; Person {
&lt;&#x2F;span&gt;&lt;span&gt;      Person { name: name }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_name&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_get_person&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p = Person::new(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_name&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_slice&lt;&#x2F;span&gt;&lt;span&gt;() == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I run &lt;code&gt;rustc --test person.rs&lt;&#x2F;code&gt;, everything compiles and things are looking good. Even the test passes. What happens if I want to use &lt;code&gt;p&lt;&#x2F;code&gt; again though? If I modify my test to call &lt;code&gt;.get_name()&lt;&#x2F;code&gt; again I receive a cryptic error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_get_person&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p = Person::new(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_name&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_slice&lt;&#x2F;span&gt;&lt;span&gt;() == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_name&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_slice&lt;&#x2F;span&gt;&lt;span&gt;() == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; rustc person.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;person.rs:21:13:&lt;&#x2F;span&gt;&lt;span&gt; 21:14 error: use of moved value: `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;person.rs:21&lt;&#x2F;span&gt;&lt;span&gt;     assert!(p.get_name().as_slice() =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;^
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;std &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macros&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;:1:1: 5:46 note: in expansion of assert!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;person.rs:21:5:&lt;&#x2F;span&gt;&lt;span&gt; 21:50 note: expansion site
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;person.rs:20:13:&lt;&#x2F;span&gt;&lt;span&gt; 20:14 note: `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;` moved here because it has type `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span&gt;`, which is non-copyable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;person.rs:20&lt;&#x2F;span&gt;&lt;span&gt;     assert!(p.get_name().as_slice() =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;^
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;std &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macros&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;:1:1: 5:46 note: in expansion of assert!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;person.rs:20:5:&lt;&#x2F;span&gt;&lt;span&gt; 20:50 note: expansion site
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span&gt; aborting due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I read about &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ownership.html&quot;&gt;ownership in the Rust Book&lt;&#x2F;a&gt; and recall some of what &lt;em&gt;moved&lt;&#x2F;em&gt; means, but it is not clear where to go from here. What many people new to Rust do is resort to using &lt;code&gt;.clone()&lt;&#x2F;code&gt;, but even that will not satisfy the compiler. Thinking back to C++, using a reference makes sense! Let&#x27;s changing the first parameter to &lt;code&gt;.get_name()&lt;&#x2F;code&gt; from &lt;code&gt;self&lt;&#x2F;code&gt; to &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; rustc person.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;person.rs:13:7:&lt;&#x2F;span&gt;&lt;span&gt; 13:11 error: cannot move out of borrowed content
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;person.rs:13&lt;&#x2F;span&gt;&lt;span&gt;       self.name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whenever I see the word &lt;em&gt;borrowed&lt;&#x2F;em&gt; I know the compiler is referring to someething that is being passed by reference. In this case &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt; is being passed by reference. The compiler is trying to tell me that it cannot move ownership of &lt;code&gt;name&lt;&#x2F;code&gt; from my borrowed &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt;. I do not want to give up ownership of &lt;code&gt;name&lt;&#x2F;code&gt; though. I simply want my test to have access to the value for a little while. So, the next step is to return a reference to a String, via &lt;code&gt;&amp;amp;String&lt;&#x2F;code&gt;, so ownership doesn&#x27;t change. Compiling that shows me:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; rustc person.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;person.rs:13:7:&lt;&#x2F;span&gt;&lt;span&gt; 13:16 error: mismatched types: expected `&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;collections::string::String&lt;&#x2F;span&gt;&lt;span&gt;`, found `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;collections::string::String&lt;&#x2F;span&gt;&lt;span&gt;` (expected &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-ptr,&lt;&#x2F;span&gt;&lt;span&gt; found struct collections::string::String)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;person.rs:13&lt;&#x2F;span&gt;&lt;span&gt;       self.name
&lt;&#x2F;span&gt;&lt;span&gt;                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;^~~~~~~~~
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span&gt; aborting due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This sort of error is very familar in Rust. Turning &lt;code&gt;self.name&lt;&#x2F;code&gt; into a reference via &lt;code&gt;&amp;amp;self.name&lt;&#x2F;code&gt; makes everything compile and leaves us with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Person {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; Person {
&lt;&#x2F;span&gt;&lt;span&gt;      Person { name: name }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_name&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &amp;amp;String {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_get_person&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p = Person::new(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_name&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_slice&lt;&#x2F;span&gt;&lt;span&gt;() == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_name&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_slice&lt;&#x2F;span&gt;&lt;span&gt;() == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Herman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;comparison-to-c&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#comparison-to-c&quot; aria-label=&quot;Anchor link for: comparison-to-c&quot;&gt;Comparison to C++&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;What made things really click for me is to think about &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Reference_%28C%2B%2B%29#Uses_of_references&quot;&gt;how references work in C++&lt;&#x2F;a&gt;. I also see the &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;method-syntax.html&quot;&gt;Rust Book&lt;&#x2F;a&gt; now includes the language &lt;em&gt;We should default to using &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt;, as it&#x27;s the most common.&lt;&#x2F;em&gt; within the context of Rust&#x27;s methods.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Terminal Window Size With Rust FFI</title>
        <published>2015-01-12T00:00:00+00:00</published>
        <updated>2015-01-12T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/01/12/terminal-window-size-with-rust-ffi.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/01/12/terminal-window-size-with-rust-ffi.html/</id>
        
        <content type="html">&lt;p&gt;I  was writing some code in Rust and wanted to get the size of my terminal. This is currently &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;470118f3e915cdc8f936aca0640b28a7a3d8dc6c&#x2F;src&#x2F;libstd&#x2F;sys&#x2F;unix&#x2F;tty.rs#L44-46&quot;&gt;not implemented&lt;&#x2F;a&gt; in Rust though. I decided to read up on &lt;a href=&quot;http:&#x2F;&#x2F;static.rust-lang.org&#x2F;doc&#x2F;master&#x2F;book&#x2F;ffi.html&quot;&gt;The Foreign Function Interface Guide&lt;&#x2F;a&gt; to figure out how to do it myself. The Foreign Function Interface (FFI) is how Rust code interfaces with native C code. I also found a great &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;1022961&#x2F;775246&quot;&gt;Stack Overflow post&lt;&#x2F;a&gt; that showed me how to write native C to get the terminal size. Based on my research, I needed to do three things in order to get my terminal size:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;winsize&lt;&#x2F;code&gt; struct in Rust.&lt;&#x2F;li&gt;
&lt;li&gt;Use or externalize the &lt;code&gt;ioctl&lt;&#x2F;code&gt; C function.&lt;&#x2F;li&gt;
&lt;li&gt;Use or externalize the &lt;code&gt;STDOUT_FILENO&lt;&#x2F;code&gt; and &lt;code&gt;TIOCGWINSZ&lt;&#x2F;code&gt; constants.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;winsize-struct&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#winsize-struct&quot; aria-label=&quot;Anchor link for: winsize-struct&quot;&gt;Winsize Struct&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Creating the &lt;code&gt;winsize&lt;&#x2F;code&gt; struct in Rust is pretty straight forward as Rust has structs too. I first needed to find the definition of &lt;code&gt;winsize&lt;&#x2F;code&gt; in C, so I did some googling and found the &lt;a href=&quot;http:&#x2F;&#x2F;unix.superglobalmegacorp.com&#x2F;Net2&#x2F;newsrc&#x2F;sys&#x2F;ioctl.h.html&quot;&gt;sys&#x2F;ioctl.h source&lt;&#x2F;a&gt;. When defining the struct, we must tell Rust to represent the struct as a C struct using &lt;code&gt;#[repr(C)]&lt;&#x2F;code&gt;. If you read the FFI Guide, then you may be wondering about &lt;code&gt;#[repr(C, packed)]&lt;&#x2F;code&gt;. I talk about packing in more detail at the end of the &lt;a href=&quot;https:&#x2F;&#x2F;hermanradtke.com&#x2F;2015&#x2F;01&#x2F;12&#x2F;terminal-window-size-with-rust-ffi.html&#x2F;#to-pack-or-not&quot;&gt;post&lt;&#x2F;a&gt;. The struct members within &lt;code&gt;winsize&lt;&#x2F;code&gt; are all &lt;code&gt;unsigned short&lt;&#x2F;code&gt;. The C &lt;code&gt;unsigned short&lt;&#x2F;code&gt; is represented in Rust as &lt;code&gt;c_ushort&lt;&#x2F;code&gt; in the &lt;code&gt;libc&lt;&#x2F;code&gt; Rust module. We now have:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;libc::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;c_ushort&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;winsize {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws_row&lt;&#x2F;span&gt;&lt;span&gt;: c_ushort, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* rows, in characters *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws_col&lt;&#x2F;span&gt;&lt;span&gt;: c_ushort, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* columns, in characters *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws_xpixel&lt;&#x2F;span&gt;&lt;span&gt;: c_ushort, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* horizontal size, pixels *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws_ypixel&lt;&#x2F;span&gt;&lt;span&gt;: c_ushort &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* vertical size, pixels *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ioctl&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ioctl&quot; aria-label=&quot;Anchor link for: ioctl&quot;&gt;ioctl&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now I need to figure out what to do about the &lt;code&gt;ioctl&lt;&#x2F;code&gt; function. Checking out the Rust docs leads me to the &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;libc&#x2F;funcs&#x2F;bsd44&#x2F;fn.ioctl.html&quot;&gt;ioctl function signature&lt;&#x2F;a&gt; but I notice that this signature does not look like a variadic function (no varargs). I guess I have to externalize it in my code as a variadic function. I decided to check the Rust source to see if I could find an example of a variadic function and I stumbled in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;5b3cd3900ceda838f5798c30ab96ceb41f962534&#x2F;src&#x2F;libstd&#x2F;sys&#x2F;unix&#x2F;c.rs#L78&quot;&gt;definition of ioctl&lt;&#x2F;a&gt;. This definition is variadic, so I guess rustdoc does not show this. Strange.&lt;&#x2F;p&gt;
&lt;p&gt;I have read that &lt;code&gt;ws_xpixel&lt;&#x2F;code&gt; and &lt;code&gt;ws_ypixel&lt;&#x2F;code&gt; are not used. I also have no use for them. I still opted to include them in my struct definition as I have no idea what &lt;code&gt;ioctl&lt;&#x2F;code&gt; is doing to that struct.&lt;&#x2F;p&gt;
&lt;p&gt;I have used this word &lt;em&gt;externalized&lt;&#x2F;em&gt; a few times already, so maybe I should now define it. To &lt;em&gt;externalize&lt;&#x2F;em&gt; something is to make that somethings C representation accessible to Rust code. You normally do this with function signatures, constants and global variables. Note that we did not externalize &lt;code&gt;winsize&lt;&#x2F;code&gt;, but instead copied the definition from C to Rust. We cannot externalize &lt;code&gt;winsize&lt;&#x2F;code&gt; as Rust needs to directly manage the definition and memory related to that struct.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-constants&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-constants&quot; aria-label=&quot;Anchor link for: the-constants&quot;&gt;The Constants&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Finally, I need to deal with my constants. I was pretty sure &lt;code&gt;STDOUT_FILENO&lt;&#x2F;code&gt; would already be in Rust. Sure enough, &lt;code&gt;libc::STDOUT_FILENO&lt;&#x2F;code&gt; exists. I was not so lucky with &lt;code&gt;TIOCGWINSZ&lt;&#x2F;code&gt;. The &lt;code&gt;TIOCGWINSZ&lt;&#x2F;code&gt; constant acts as a command to &lt;code&gt;ioctl&lt;&#x2F;code&gt;. If you read the source of &lt;code&gt;sys&#x2F;ioctl.h&lt;&#x2F;code&gt;, you will notice the value of the commands is based on some rules that encode information to &lt;code&gt;ioctl&lt;&#x2F;code&gt;. There is a fair amount of bit twiddling going on to generate these values. Even if we do the bitwise math by hand, we should still check our work. To do that, I wrote a simple C program that would tell us the proper hex value of &lt;code&gt;TIOCGWINSZ&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;ioctl.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unistd.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, TIOCGWINSZ);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this value I can create the same constant in Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TIOCGWINSZ&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;c_ulong &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x40087468&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;putting-it-all-together&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#putting-it-all-together&quot; aria-label=&quot;Anchor link for: putting-it-all-together&quot;&gt;Putting It All Together&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My function for &lt;code&gt;get_winsize&lt;&#x2F;code&gt; now looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_winsize&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; IoResult&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; w = winsize { ws_row: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, ws_col: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, ws_xpixel: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, ws_ypixel: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ioctl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;STDOUT_FILENO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TIOCGWINSZ&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;w) };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; r {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; Ok((w.ws_col as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;, w.ws_row as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;        _ =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Err(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;standard_error&lt;&#x2F;span&gt;&lt;span&gt;(ResourceUnavailable))
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I initialize my variable containing a &lt;code&gt;winsize&lt;&#x2F;code&gt; struct with values of zero, just like I would &lt;code&gt;memset(w, 0, sizeof(winsize))&lt;&#x2F;code&gt; in C. In order to use the externalized &lt;code&gt;ioctl&lt;&#x2F;code&gt; function, we have to wrap the code in &lt;code&gt;unsafe {}&lt;&#x2F;code&gt; blocks. This informs Rust this code is not to be checked by the compiler for safety. The &lt;code&gt;ioctl&lt;&#x2F;code&gt; function follows the C convention of returning a &lt;code&gt;0&lt;&#x2F;code&gt; for success and a &lt;code&gt;-1&lt;&#x2F;code&gt; for an error. If an error occurs, I decided to throw an existing &lt;code&gt;IoResult&lt;&#x2F;code&gt; error already in Rust. I need to spend a little more time to externalize the &lt;code&gt;errno&lt;&#x2F;code&gt; global variable in C so I can get the exact error. If the function is successful, I return the width and height as a tuple.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;hjr3&#x2F;0cbe1ac2f10e6e3df96a&quot;&gt;gist&lt;&#x2F;a&gt; of the complete program, including a simple test. This puts all the peices discussed above together and will properly calculate the terminal window size when executed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;to-pack-or-not&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#to-pack-or-not&quot; aria-label=&quot;Anchor link for: to-pack-or-not&quot;&gt;To Pack Or Not&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you see a struct defined with &lt;code&gt;__attribute__((__packed__))&lt;&#x2F;code&gt; then you need to use &lt;code&gt;#[repr(C, packed)]&lt;&#x2F;code&gt;. Example:&lt;&#x2F;p&gt;
&lt;p&gt;```c`
struct &lt;strong&gt;attribute&lt;&#x2F;strong&gt;((&lt;strong&gt;packed&lt;&#x2F;strong&gt;)) foo {
char first;
int second;
};&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;A packed C struct, usually only found in kernel development, is not _padded_. If you are not familiar with _padding_ in C, then you may not understand what `#[repr(C, packed)]` does. When defining a struct in C, the struct members are aligned to _word boundaries_. A _word_ is the natural address boundary for a given architecture. For example, on a 32-bit machine a word is 4 bytes. If a struct member does not align to a word boundary, the compiler will insert padding after the variable. A struct like
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;```c
&lt;&#x2F;span&gt;&lt;span&gt;struct foo {
&lt;&#x2F;span&gt;&lt;span&gt;    char first; &#x2F;&#x2F; 1 byte
&lt;&#x2F;span&gt;&lt;span&gt;    int second; &#x2F;&#x2F; 4 bytes
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;is not 5 bytes in size, but 8 bytes due to padding. Here is how the same struct looks after the compiler has added padding:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;foo {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; first; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 1 byte
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; padding[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 3 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; second; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 4 bytes
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I found a &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;4306269&#x2F;775246&quot;&gt;Stack Overflow post&lt;&#x2F;a&gt; the explains it in even greater detail. Also, check out the &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Data_structure_alignment&quot;&gt;Data Structure Alignment&lt;&#x2F;a&gt; article on Wikipedia.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Using the Nickel.rs Router Macro</title>
        <published>2015-01-05T00:00:00+00:00</published>
        <updated>2015-01-05T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2015/01/05/hypermedia-api-using-rustlang-nickel.html/" type="text/html"/>
        <id>https://hermanradtke.com/2015/01/05/hypermedia-api-using-rustlang-nickel.html/</id>
        
        <content type="html">&lt;p&gt;The &lt;a href=&quot;http:&#x2F;&#x2F;nickel.rs&#x2F;&quot;&gt;nickel.rs Web Application Framework for Rust&lt;&#x2F;a&gt; is inspired by the popular &lt;a href=&quot;http:&#x2F;&#x2F;expressjs.com&#x2F;&quot;&gt;node.js express&lt;&#x2F;a&gt; framework. The stated goal of the nickel.rs framework is to show people that it can be easy to write web servers using a sytems language like Rust. I have been using the framework to create hypermredia examples using my hal-rs library.&lt;&#x2F;p&gt;
&lt;p&gt;One of the downsides to a systems language like Rust is the verbosity of the syntax. Someone used to writing in Python or Ruby may be in for quite a shock. I started really feeling this when writing route handlers used by nickel. Here is the simple example from the docs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;a_handler &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_request&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Request, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Response) {
&lt;&#x2F;span&gt;&lt;span&gt;    response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, a_handler);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice the &lt;code&gt;_request&lt;&#x2F;code&gt; variable has a leading underscore. This tells the compiler not to throw a warning if this variable is unused. If you do decided to use &lt;code&gt;_request&lt;&#x2F;code&gt; later on, then you need to remember to change the variable name to &lt;code&gt;request&lt;&#x2F;code&gt;. You also need to make a name for the function so it can be referenced in the call to &lt;code&gt;server.get&lt;&#x2F;code&gt;. This sort of boilerplate stuff is not what I want to spend time worrying about. What I really want is a nice looking DSL to describe my routes.&lt;&#x2F;p&gt;
&lt;p&gt;After some perusing of the provided &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nickel-org&#x2F;nickel.rs&#x2F;tree&#x2F;master&#x2F;examples&quot;&gt;examples&lt;&#x2F;a&gt; in nickel.rs, I discovered the &lt;code&gt;router!&lt;&#x2F;code&gt; macro. We can use the &lt;code&gt;router!&lt;&#x2F;code&gt; macro to get a DSL-like syntax for routing. Here is the same example above using the &lt;code&gt;router!&lt;&#x2F;code&gt; macro:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;router! {
&lt;&#x2F;span&gt;&lt;span&gt;    get &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we use the &lt;code&gt;router!&lt;&#x2F;code&gt; macro, it expands into the same Rust code as in our first example. We don&#x27;t have to think of a name for the function, worry about type of request or response or or type out the &lt;code&gt;server.get&lt;&#x2F;code&gt; line. If you want to see the &lt;code&gt;router!&lt;&#x2F;code&gt; macro used in a real world example, check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;hal-rs-demo&#x2F;blob&#x2F;4d0a0ab7a1f69708f0c8a5fa2d6669bed223c67f&#x2F;src&#x2F;main.rs#L138-168&quot;&gt;index response&lt;&#x2F;a&gt; from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;hal-rs-demo&#x2F;&quot;&gt;hal-rs-demo&lt;&#x2F;a&gt; web server. The code for the &lt;code&gt;router!&lt;&#x2F;code&gt; macro is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nickel-org&#x2F;nickel.rs&#x2F;blob&#x2F;b8bb31d0efe47f105f6701f73efe0ecd4a6c83de&#x2F;nickel_macros&#x2F;src&#x2F;macro.rs&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The jury is still out on whether or not nickel.rs, or even Rust itself, will be suitable for creating web servers that serve up API responses and HTML to clients. I like many things about Rust though, so I will continue to find out.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Emberconf 2014</title>
        <published>2014-03-27T00:00:00+00:00</published>
        <updated>2014-03-27T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2014/03/27/emberconf-2014.html/" type="text/html"/>
        <id>https://hermanradtke.com/2014/03/27/emberconf-2014.html/</id>
        
        <content type="html">&lt;p&gt;My notes from &lt;a href=&quot;http:&#x2F;&#x2F;emberconf.com&#x2F;&quot;&gt;Emberconf&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;opening-keynote&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#opening-keynote&quot; aria-label=&quot;Anchor link for: opening-keynote&quot;&gt;Opening Keynote&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Open source communities value contributions that are not just code.&lt;&#x2F;em&gt; --- Yehuda Katz&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Robert Jackson contributed a lot of works to making the 6 week release process much more automated.&lt;&#x2F;li&gt;
&lt;li&gt;A number of people worked to create ember-cli tooling.&lt;&#x2F;li&gt;
&lt;li&gt;Jo Liss created Broccoli.&lt;&#x2F;li&gt;
&lt;li&gt;Leah Silber organized Emberconf.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I believe a successful team requires more than just someone who writes the primary code. It requires meta-contributions that make the environment and culture excellent. This is my vision for the HauteLook team and embraces concepts, such as DevOps, as first class citizens of the process.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;emphasis-on-screens-and-flows&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#emphasis-on-screens-and-flows&quot; aria-label=&quot;Anchor link for: emphasis-on-screens-and-flows&quot;&gt;Emphasis on screens and flows&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Yehuda referenced a Basecamp blog post &lt;a href=&quot;http:&#x2F;&#x2F;signalvnoise.com&#x2F;posts&#x2F;1926-a-shorthand-for-designing-ui-flows&quot;&gt;A shorthand for designing UI flows&lt;&#x2F;a&gt; to emphasize the need to focusing on flows now that Ember has first-class URL support.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This was a call to action to start thinking differently about building web applications. The github website was used to demonstrate the complexity of web applications. The github website puts a lot of information on a single screen and uses flows within that screen to organize the experience. There are often flows within flows and we need to start documenting all the states to manage the complexity.&lt;&#x2F;p&gt;
&lt;p&gt;A later talk, given by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nathanhammond&quot;&gt;Nathan Hammond&lt;&#x2F;a&gt; introduced &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nathanhammond&#x2F;ember-flows&quot;&gt;ember-flow&lt;&#x2F;a&gt; which used a digraph to manage state transitions within an application. Nathan argued that it is our responsibility as application developers not to pollute the browser history with unnecessary transitions of state. To prevent this, he recommended the use of &lt;a href=&quot;http:&#x2F;&#x2F;ember-doc.com&#x2F;classes&#x2F;Ember.Route.html#method_replaceWith&quot;&gt;replaceWith&lt;&#x2F;a&gt; instead of &lt;a href=&quot;http:&#x2F;&#x2F;ember-doc.com&#x2F;classes&#x2F;Ember.Route.html#method_transitionTo&quot;&gt;transitionTo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ember-components&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ember-components&quot; aria-label=&quot;Anchor link for: ember-components&quot;&gt;Ember Components&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rpflorence&quot;&gt;Ryan Florence&lt;&#x2F;a&gt; gave an inspiring talk about Ember Components. He demonstrateded a number of &lt;a href=&quot;http:&#x2F;&#x2F;instructure.github.io&#x2F;ic-ember&#x2F;&quot;&gt;components&lt;&#x2F;a&gt; that he has built for &lt;a href=&quot;https:&#x2F;&#x2F;hermanradtke.com&#x2F;2014&#x2F;03&#x2F;27&#x2F;emberconf-2014.html&#x2F;instructure.github.io&quot;&gt;instructure&lt;&#x2F;a&gt;. Ryan provided some sage wisdom for component design:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Good components usually do not have a template. If your component does have a template, consider breaking it down into multiple components. Ryan used &lt;code&gt;&amp;lt;select&amp;gt;&amp;lt;option &#x2F;&amp;gt;&amp;lt;&#x2F;select&amp;gt;&lt;&#x2F;code&gt; as an example of good component design. The &lt;code&gt;select&lt;&#x2F;code&gt; and &lt;code&gt;option&lt;&#x2F;code&gt; tags are separate components that are related to each other. The &lt;code&gt;select&lt;&#x2F;code&gt; tag may be aware of which &lt;code&gt;option&lt;&#x2F;code&gt; tag is currently selected.&lt;&#x2F;li&gt;
&lt;li&gt;Create a component that groups small components together. Ryan&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;instructure&#x2F;ic-tabs#usage&quot;&gt;ic-tabs&lt;&#x2F;a&gt; component groups together many small components together to make it easier for others to use.&lt;&#x2F;li&gt;
&lt;li&gt;The child should inform the parent when it is present. Do &lt;em&gt;not&lt;&#x2F;em&gt; make the parent poll for children components. Ryan used the &lt;code&gt;&amp;lt;form&amp;gt;&lt;&#x2F;code&gt; tag as an example of how this should work. A form can exist on its own. When adding a &lt;code&gt;&amp;lt;button type=&quot;submit&quot;&amp;gt;&lt;&#x2F;code&gt; tag to the form, the button informs form.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;distributed-computing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#distributed-computing&quot; aria-label=&quot;Anchor link for: distributed-computing&quot;&gt;Distributed Computing&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cmeiklejohn&#x2F;&quot;&gt;Christopher Meiklejohn&lt;&#x2F;a&gt; from &lt;a href=&quot;http:&#x2F;&#x2F;basho.com&#x2F;&quot;&gt;Basho&lt;&#x2F;a&gt; gave a very dense, but inspiring talk on distributed computing. The main take-away was that &lt;code&gt;ember-data&lt;&#x2F;code&gt; is trying to solve a problem of distrbuted computing.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;thinkdistributed.io - Christopher hosts a podcast that is a great introduction to the concepts of distributed computing.&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;syncfree.lip6.fr - Christopher is part of an EU project that is trying to solve &quot;Large-scale computation without synchronisation&quot;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ember-performance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ember-performance&quot; aria-label=&quot;Anchor link for: ember-performance&quot;&gt;Ember Performance&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mixonic&quot;&gt;Matthew Beale&lt;&#x2F;a&gt; discussed Ember performance. His book &lt;a href=&quot;http:&#x2F;&#x2F;bleedingedgepress.com&#x2F;our-books&#x2F;developing-an-ember-edge&#x2F;&quot;&gt;Developing an Ember Edge&lt;&#x2F;a&gt; takes a deeper look into creating performant Ember applications. The main take-away was that a lot of the performance issues may not be related to JavaScript. Look at how the network and the browser painting (animations, rendering) are affecting performance. Ready &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;High-Performance-Browser-Networking-performance-ebook&#x2F;dp&#x2F;B00FM0OC4S&quot;&gt;High Performance Browser Networking&lt;&#x2F;a&gt; for more insight into how to diagnose and resolve network issues.&lt;&#x2F;p&gt;
&lt;p&gt;Matthew did point out that &lt;a href=&quot;http:&#x2F;&#x2F;emberjs.com&#x2F;guides&#x2F;object-model&#x2F;observers&#x2F;&quot;&gt;observers&lt;&#x2F;a&gt; are actually a synchronous operation. Expensive functions that are observing a property should be handled with care. He suggested the use of &lt;code&gt;setProperties&lt;&#x2F;code&gt;, &lt;code&gt;Ember.run.once&lt;&#x2F;code&gt; and &lt;code&gt;pushObjects&lt;&#x2F;code&gt; to work around performance issues. Yehuda commented that the core team considers the synchronous nature of observers a bug, but it is hard to fix without breaking existing Ember 1.0 compatibility.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-links-related-to-talks&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#other-links-related-to-talks&quot; aria-label=&quot;Anchor link for: other-links-related-to-talks&quot;&gt;Other Links Related To Talks&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.solitr.com&#x2F;blog&#x2F;2014&#x2F;02&#x2F;broccoli-first-release&#x2F;&quot;&gt;Broccoli: First Beta Release&lt;&#x2F;a&gt; - Broccoli is an awesome build tool created by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;joliss&quot;&gt;Jo Liss&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;extensiblewebmanifesto.org&#x2F;&quot;&gt;The Extensible Web Manifesto&lt;&#x2F;a&gt; was part of the closing keynote given by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dherman&quot;&gt;David Herman&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;sketches-of-talks&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sketches-of-talks&quot; aria-label=&quot;Anchor link for: sketches-of-talks&quot;&gt;Sketches of Talks&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&quot;&gt;Michael Chan&lt;&#x2F;a&gt; sketched notes from each talk. Links to his Sketch for each talk are below:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448517744900976641&quot;&gt;Opening Keynote&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448551975949721600&quot;&gt;Using Ember To Make The Impossible Possible&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448552274043080704&quot;&gt;Contributing To Ember&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448579736629809152&quot;&gt;Ember Data And The Way Forward&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448591731869511680&quot;&gt;Broccoli&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448592076557406208&quot;&gt;Animations And Transitions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448640475071668224&quot;&gt;Angular Directives&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448640855876710400&quot;&gt;Modeling The App Store&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448641160433512448&quot;&gt;HTMLBars - The Next Generation Of Templating&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448877762812444672&quot;&gt;The {{x-foo}} In You&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448890153340137472&quot;&gt;ember-cli&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448901778449244160&quot;&gt;Ember Is For The Children&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448943222685847552&quot;&gt;Query Params In Ember&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448951800725377024&quot;&gt;Ember Testing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448954197459759105&quot;&gt;Covergent&#x2F;Divergent&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448968123509530624&quot;&gt;Controlling Route Traversal With Flows&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;448979625612304384&quot;&gt;Snappy Means Happy: Performance In Ember Apps&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chantastic&#x2F;status&#x2F;449004904363732992&quot;&gt;Closing Keynote&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Testing Repeated Elements With Behat+Mink</title>
        <published>2014-03-21T00:00:00+00:00</published>
        <updated>2014-03-21T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2014/03/21/testing-repeated-elements-with-behat-mink.html/" type="text/html"/>
        <id>https://hermanradtke.com/2014/03/21/testing-repeated-elements-with-behat-mink.html/</id>
        
        <content type="html">&lt;p&gt;The Mink extension to behat makes it really easy to test the contents of a page. I can use the &lt;code&gt;assertElementContainsText&lt;&#x2F;code&gt; feature to assert that some text exists within a certain element:&lt;&#x2F;p&gt;
&lt;p&gt;{% highlight gherkin %}
Then I should see &quot;My Page Title&quot; in the &quot;h1&quot; element.
{% endhighlight %}&lt;&#x2F;p&gt;
&lt;p&gt;If there is more than one &lt;code&gt;h1&lt;&#x2F;code&gt; element on the page, I can use a css selector to increase specificity:&lt;&#x2F;p&gt;
&lt;p&gt;{% highlight gherkin %}
Then I should see &quot;My Page Title&quot; in the &quot;h1.page-title&quot; element.
{% endhighlight %}&lt;&#x2F;p&gt;
&lt;p&gt;This is really powerful and css selectors make it pretty easy to identify most elements on a page. However, given the block of html below, how do I test the text in a repeated element?&lt;&#x2F;p&gt;
&lt;p&gt;{% highlight html %}&lt;&#x2F;p&gt;
&lt;div class=&quot;items&quot;&gt;
    &lt;div class=&quot;item-row&quot;&gt;
        &lt;p class=&quot;item-row-name&quot;&gt;Item 1&lt;&#x2F;p&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;item-row&quot;&gt;
        &lt;p class=&quot;item-row-name&quot;&gt;Item 2&lt;&#x2F;p&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;item-row&quot;&gt;
        &lt;p class=&quot;item-row-name&quot;&gt;Item 3&lt;&#x2F;p&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
{% endhighlight %}
&lt;p&gt;My initial attempt was to use a more advanced css selector:&lt;&#x2F;p&gt;
&lt;p&gt;{% highlight gherkin %}
Then I should see &quot;Item 1&quot; in the &quot;div.item-row:nth(0)&quot; element.
{% endhighlight %}&lt;&#x2F;p&gt;
&lt;p&gt;Unfortuntely, the Symfony 2 web driver does not support this syntax. After talking with a few colleagues, I decided to create a feature that allowed me to do this. Here is an example of my feature syntax:&lt;&#x2F;p&gt;
&lt;p&gt;{% highlight gherkin %}
Then I should see the following in the repeated &quot;div.item-row-name&quot; element within the context of the &quot;div.items&quot; element:
| text   |
| Item 1 |
| Item 2 |
| Item 3 |
{% endhighlight %}&lt;&#x2F;p&gt;
&lt;p&gt;Here is what the code looks like:&lt;&#x2F;p&gt;
&lt;p&gt;{% highlight php %}&lt;&#x2F;p&gt;
&lt;?php
&#x2F;**
* @Then &#x2F;^(?:|I )should see the following in the repeated &quot;(?P&lt;element&gt;[^&quot;]*)&quot; element within the context of the &quot;(?P&lt;parentElement&gt;[^&quot;]*)&quot; element
*&#x2F;
public function assertRepeatedElementContainsText(TableNode $table, $element, $parentElement)
{
    $parent = $this-&gt;getSession()-&gt;getPage()-&gt;findAll(&#x27;css&#x27;, $parentElement);

    foreach ($table-&gt;getHash() as $n =&gt; $repeatedElement) {
        $child = $parent[$n];

        \PHPUnit_Framework_Assert::assertEquals(
            $child-&gt;find(&#x27;css&#x27;, $element)-&gt;getText(),
            $repeatedElement[&#x27;text&#x27;]
        );
    }
}
{% endhighlight %}

I take advantage of the fact that the repeated elements have a common parent `div.items`. I find all children of the `div.items` element using the Mink `find` API. I can loop over the children and take advantage of the fact that the children are of type `NodeElement`. The `NodeElement` class shares the same base class as `DocumentElement` object returned from `$this-&gt;getSession()-&gt;getPage()` call. When I use the `find` method on the `$child` object, I will only search for elements that are within the context of the current child. Here is what that context looks like on the first iteration:

{% highlight html %}
&lt;div class=&quot;item-row&quot;&gt;
    &lt;p class=&quot;item-row-name&quot;&gt;Item 1&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
{% endhighlight %}

Now when I search for the element matching `div.item-row-name`, I only get back the _one_ element within this context. I can then assert that this text within this element matches the corresponding item in my table.

Notice that I use a PHPUnit assertion within this feature. I would have preferred to re-use an existing Mink web assertion, but all of the assertions assume a global context. Look at the [elementTextContains]() code to see what I mean.

Happy Hacking!
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Hypermedia Services and MVC</title>
        <published>2014-01-04T00:00:00+00:00</published>
        <updated>2014-01-04T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2014/01/04/hypermedia-services-and-mvc.html/" type="text/html"/>
        <id>https://hermanradtke.com/2014/01/04/hypermedia-services-and-mvc.html/</id>
        
        <content type="html">&lt;p&gt;This blog post is in response to the discussion started by the &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;nateabele&#x2F;statuses&#x2F;418965626410270720&quot;&gt;tweet&lt;&#x2F;a&gt; below:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot; align=&quot;center&quot;&gt;&lt;p&gt;Incidentally, MVC is a REALLY poor fit for designing hypermedia services. So that&#x27;s fun, everyone who thought you knew what you were doing.&lt;&#x2F;p&gt;&amp;mdash; Nate Abele (@nateabele) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;nateabele&#x2F;statuses&#x2F;418965626410270720&quot;&gt;January 3, 2014&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt;
&lt;script async=&quot;async&quot; src=&quot;&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;This post is not intended to present the best way to design and build hypermedia services. My goal is present a high level description of how we have built and designed a hypermedia API at HauteLook within the context of the MVC Architectual Pattern. That being said, I am always looking for ways to improve.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start with the controller. According to the &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Design-Patterns-Elements-Reusable-Object-Oriented&#x2F;dp&#x2F;0201633612&quot;&gt;Gang of Four&lt;&#x2F;a&gt;, the controller &quot;defines the way the user interface reacts to user input&quot;. In the context of a hypermedia service, &lt;em&gt;user input&lt;&#x2F;em&gt; comes in the form of a request. The request is most commonly sent using HTTP, but could use another protocol such as FTP. We will be assuming HTTP for the rest of this post. The &lt;em&gt;user interface&lt;&#x2F;em&gt; is the API response the server sends back to the client. In a hypermedia API, the response is based on which resources the client (user) is requesting and what media type the client prefers.&lt;&#x2F;p&gt;
&lt;p&gt;Let us use the example below. We can assume that the client is knowledgeable of the &lt;code&gt;&#x2F;users&#x2F;42&lt;&#x2F;code&gt; URL because it made a HTTP GET request to &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; and received a list of user relations it can then request.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;GET &#x2F;users&#x2F;42 HTTP\1.1
&lt;&#x2F;span&gt;&lt;span&gt;Host: example.com
&lt;&#x2F;span&gt;&lt;span&gt;Accept: application&#x2F;hal+json
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The controller will first fetch the user resource. If successful, the controller will specify a 200 response code, any necessary headers and then pass that resource to the view along with the desired client&#x27;s desired media type. However, there are many reasons why the request may not be successful. The resource &lt;code&gt;&#x2F;users&#x2F;42&lt;&#x2F;code&gt; may not exist, the client may not be authorized to make the request, pre-conditions of the request may not be satisifed or any other number of problems. In any of those error cases, the controller will issue the proper response code, headers and any body necessary to represent the current state to the client.&lt;&#x2F;p&gt;
&lt;p&gt;The resources in our hypermedia API are models. We have some code samples of models for address and user resources below. I chose ruby as it makes the code very concise. How exactly these models are populated is an exercise left up to the reader. What we do &lt;strong&gt;not&lt;&#x2F;strong&gt; want to do is simply transfer the data in our persistence layer (i.e. database) directly to the client. If we are using something like a relational database, there may be many tables required to accurately represent one resource. Take a look at the &lt;code&gt;Address&lt;&#x2F;code&gt; model below. We may need to execute a SQL statement that joins some hypothetical &lt;code&gt;addresses&lt;&#x2F;code&gt;, &lt;code&gt;states&lt;&#x2F;code&gt; and &lt;code&gt;countries&lt;&#x2F;code&gt; tables together in order to create address resources. Our goal is to encapsulate the resources you want to represent to the client. If the underlying persistence layer changes, the resource should not change.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Address
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr_accessor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:line1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:line2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:state&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:country&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:postal_code
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr_accessor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:email&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:first_name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:last_name&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:addresses
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;initialize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addresses&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addresses &lt;&#x2F;span&gt;&lt;span&gt;= addresses
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fullName&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;#{first_name} #{last_name}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once we have our resources created, we need to represent them to the client using the view. The view is only concerned with how we are presenting our resource to the client. It is not scalable to explicitly write out every resource&#x2F;media-type combination. We want to &lt;em&gt;describe&lt;&#x2F;em&gt; how to represent a resource in an agnostic way. We then feed those descriptions into a serializer that is aware of HAL, Atom, JSON-API, etc and can generate the output based on the desired media type of the client.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example DSL that describes how to represent a user resource to the client:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;relations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;users&#x2F;:user_id
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;rels&#x2F;orders&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;orders?user_id=:user_id
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;rels&#x2F;addresses&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;users&#x2F;:user_id&#x2F;addresses
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;embed&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;property&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;addresses
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fullName
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The user class is serialized into the correct media type based on the description. The &lt;code&gt;relations&lt;&#x2F;code&gt; section describes how the user relates to other resources in the API. The &lt;code&gt;properties&lt;&#x2F;code&gt; section describes how to show the resource to the client. In this case, we do not show first and last name separate properties but instead show one &lt;code&gt;name&lt;&#x2F;code&gt; property. More importantly, we do not include the user_id in the response. It is probably not important to the client what the user id is, except to create URLs. We have the relations to avoid client-side URL generation though. Also, notice how the addresses are embedded in the representation of a user. The serializer would look up how to represent the address and serialize it accordingly.&lt;&#x2F;p&gt;
&lt;p&gt;The above DSL is loosely based on the &lt;a href=&quot;http:&#x2F;&#x2F;hateoas-php.org&#x2F;&quot;&gt;Symfony 2 HATEOAS bundle&lt;&#x2F;a&gt; that we use at HauteLook. Reading through the documentation you may notice that it uses funky PHP annotations. This is just a preference of the maintainers. There is also built-in support to use separate PHP or XML files to describe the view.&lt;&#x2F;p&gt;
&lt;p&gt;This architecture has made it fairly straight-forward to design and maintain a hypermedia API. The risk of changes at persistent layer leaking into the client representations is low. The models encapsulate the resources and we can make them as resistant to change as we want. The view presents the representation of the resource and how the resource relates to other resources to the client.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Partnerships: Dave Ramsey vs technology startups</title>
        <published>2013-09-01T00:00:00+00:00</published>
        <updated>2013-09-01T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2013/09/01/partnerships-dave-ramsey-vs-startups.html/" type="text/html"/>
        <id>https://hermanradtke.com/2013/09/01/partnerships-dave-ramsey-vs-startups.html/</id>
        
        <content type="html">&lt;p&gt;Dave Ramsey has a famous quote: &quot;The only ship that won&#x27;t sail is a partnership&quot; &lt;a href=&quot;http:&#x2F;&#x2F;www.daveramsey.com&#x2F;index.cfm?event=askdave&#x2F;&amp;amp;intContentItemId=123051&quot;&gt;(source)&lt;&#x2F;a&gt;. I believe the context is in regards to two friends starting a business together. I recently heard this together and wondered how many succesful startups were partnerships.&lt;&#x2F;p&gt;
&lt;p&gt;I did a quick &lt;a href=&quot;http:&#x2F;&#x2F;www.crunchbase.com&#x2F;search&#x2F;advanced&#x2F;companies&#x2F;2039685&quot;&gt;search&lt;&#x2F;a&gt; on CrunchBase for startups that were acquired for over 1 million dollars since January 2010. The results show 12 out of 20 startups were partnerships. I cannot tell how many were friends prior to the forming of the company. This does not show me any startups went IPO either.&lt;&#x2F;p&gt;
&lt;p&gt;List of startups that were partnerships:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Instagram&lt;&#x2F;li&gt;
&lt;li&gt;Rapportive&lt;&#x2F;li&gt;
&lt;li&gt;adGrok&lt;&#x2F;li&gt;
&lt;li&gt;Mobile Theory&lt;&#x2F;li&gt;
&lt;li&gt;Screaming Daily Deals&lt;&#x2F;li&gt;
&lt;li&gt;Socialcam&lt;&#x2F;li&gt;
&lt;li&gt;condaptive&lt;&#x2F;li&gt;
&lt;li&gt;LovingEco&lt;&#x2F;li&gt;
&lt;li&gt;seatme&lt;&#x2F;li&gt;
&lt;li&gt;Pulse&lt;&#x2F;li&gt;
&lt;li&gt;carbyn&lt;&#x2F;li&gt;
&lt;li&gt;Crashlytics&lt;&#x2F;li&gt;
&lt;li&gt;BrightNest&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I would like to look back 10 years, but there is no way to filter the CrunchBase search for partnerships. I may spend some more time compiling a database. I am also curious as to the division of labor amongst the co-founders. I think partnerships have the potential for more problems when two or more of the co-founders have the same skillset.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>DRY and Clean Interfaces</title>
        <published>2013-03-16T00:00:00+00:00</published>
        <updated>2013-03-16T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2013/03/16/dry-and-clean-interfaces.html/" type="text/html"/>
        <id>https://hermanradtke.com/2013/03/16/dry-and-clean-interfaces.html/</id>
        
        <content type="html">&lt;p&gt;The principle of Don&#x27;t Repeat Yourself (DRY) is more than just grouping common code together. When trying to apply the DRY principle, it is easy to start making a mess of a class interface. I recently had to write some code to generate Flickr image URLs from an API response. I needed to generate two types of URLs: a thumbnail and a normal image. Here is one version of code reuse:&lt;&#x2F;p&gt;
&lt;p&gt;{% highlight objective-c %}&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(NSString *)generateFlickrImageUrl:(NSDictionary *)photo withImageType:(NSString *) imageType
{
NSString *imageSize;&lt;&#x2F;p&gt;
&lt;p&gt;if ([imageType isEqualToString:@&quot;thumbnail&quot;]) {
imageSize = @&quot;t&quot;;
} else {
imageSize = @&quot;z&quot;;
}&lt;&#x2F;p&gt;
&lt;p&gt;NSString *farm = [photo valueForKey:@&quot;farm&quot;];
NSString *server = [photo valueForKey:@&quot;server&quot;];
NSString *photoId = [photo valueForKey:@&quot;id&quot;];
NSString *secret = [photo valueForKey:@&quot;secret&quot;];
NSString *url = [NSString stringWithFormat:@&quot;http:&#x2F;&#x2F;farm%@.staticflickr.com&#x2F;%@&#x2F;%@&lt;em&gt;%@&lt;&#x2F;em&gt;%@.jpg&quot;, farm, server, photoId, secret, imageSize];&lt;&#x2F;p&gt;
&lt;p&gt;return url;
}
{% endhighlight %}&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While this does reuse code, it is bad because the code is not accepting of change. If I have to add some other sort of image type, then I have to modify this function. This is a big red flag. When you start using method parameters as an extension of your interface, you may be making the code hard to change. Also, anyone using this class will have to look for the list of available options for the &lt;code&gt;imageType&lt;&#x2F;code&gt; parameter. I think it is better to design a easy to understand interface instead.&lt;&#x2F;p&gt;
&lt;p&gt;{% highlight objective-c %}&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(NSString *)generateFlickrImageUrl:(NSDictionary *)photo withImageSize:(NSString *) imageSize
{
NSString *farm = [photo valueForKey:@&quot;farm&quot;];
NSString *server = [photo valueForKey:@&quot;server&quot;];
NSString *photoId = [photo valueForKey:@&quot;id&quot;];
NSString *secret = [photo valueForKey:@&quot;secret&quot;];
NSString *url = [NSString stringWithFormat:@&quot;http:&#x2F;&#x2F;farm%@.staticflickr.com&#x2F;%@&#x2F;%@&lt;em&gt;%@&lt;&#x2F;em&gt;%@.jpg&quot;, farm, server, photoId, secret, imageSize];&lt;&#x2F;p&gt;
&lt;p&gt;return url;
}&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;(NSString *)generateImageUrlThumbnail:(NSDictionary *)photo
{
return [self generateFlickrImageUrl:photo withImageSize:@&quot;t&quot;];
}&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;(NSString *)generateImageUrl:(NSDictionary *)photo
{
return [self generateFlickrImageUrl:photo withImageSize:@&quot;z&quot;];
}
{% endhighlight %}&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;code&gt;generateFlickrImageUrl&lt;&#x2F;code&gt; is now a protected method of the class while the &lt;code&gt;generateImageUrl&lt;&#x2F;code&gt; and &lt;code&gt;generateImageUrlThumbnail&lt;&#x2F;code&gt; methods define the public interface.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Misunderstanding DRY</title>
        <published>2013-02-06T00:00:00+00:00</published>
        <updated>2013-02-06T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2013/02/06/misunderstanding-dry.html/" type="text/html"/>
        <id>https://hermanradtke.com/2013/02/06/misunderstanding-dry.html/</id>
        
        <content type="html">&lt;p&gt;I think the Object Oriented (OO) principle of Don&#x27;t Repeat Yourself (DRY) is often misunderstood. In particular, the word &quot;repeat&quot; is troublesome. It has nothing to do with minimizing the amount of code you write. It is also not about merging similar methods together into a super-method. The DRY principle is about preserving a single source of truth in a system. When a there are multiple sources of truth in a system we have to write more code to manually keep all the truths in sync with each other. This often leads to unintended consequences to a part of the system when a change is made to a different part of the system. We are left to look through the code looking for these unintended consequences and become increasingly reluctant to change. Properly applying the DRY principle protects us from these unintended consequences and can make our code much more accepting of change.&lt;&#x2F;p&gt;
&lt;p&gt;To those less experienced, DRYing up some parts of the code may not seem like a waste of time in the present. I want to use some code samples in an attempt to prove that fixing even simple DRY violations can be very helpful. The following class is a simple &lt;code&gt;Car&lt;&#x2F;code&gt; class.  It starts out with a single method &lt;code&gt;currentSpeed()&lt;&#x2F;code&gt; which returns the current speed of the &lt;code&gt;Car&lt;&#x2F;code&gt; instance. In a real class, there would be more implementation detail. For now we are just concerned with the speed of the &lt;code&gt;Car&lt;&#x2F;code&gt; class. We will change the &lt;code&gt;Car&lt;&#x2F;code&gt; and use the DRY principles to help us design good code.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;class Car
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    protected $speed;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function currentSpeed() { return $this-&amp;gt;speed; }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this point the class seems pretty reasonable. The &lt;code&gt;$speed&lt;&#x2F;code&gt; member variable stores the speed of the &lt;code&gt;Car&lt;&#x2F;code&gt; instance. The &lt;code&gt;currentSpeed()&lt;&#x2F;code&gt; method simply returns the speed. Now let us pretend that we need to add the logic for cruise control. A basic cruise control system is made up of four operations: toggle, set, cancel and resume. The toggle operation turns the cruise control on and off. The set operation will determine the speed of the &lt;code&gt;Car&lt;&#x2F;code&gt; object and maintain that speed. The cancel operation instructs the cruise control system to stop maintaining the set speed. The resume operation signals the cruise control system to accelerate to the set speed and then maintain that speed. The toggle operation is uninteresting, so let&#x27;s start implementing the set operation. We might do something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;class Car
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    protected $speed;
&lt;&#x2F;span&gt;&lt;span&gt;    protected $cruisingSpeed;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function currentSpeed() { return $this-&amp;gt;speed; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function cruiseControlSet() {
&lt;&#x2F;span&gt;&lt;span&gt;        $this-&amp;gt;cruisingSpeed = $this-&amp;gt;speed;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a simple change, but we actually just violated the DRY principle. The &lt;code&gt;cruiseControlSet()&lt;&#x2F;code&gt; method should not have direct access to the &lt;code&gt;$speed&lt;&#x2F;code&gt; member variable. Good OO design focuses on passing around message (or methods) and not data. The &lt;code&gt;$speed&lt;&#x2F;code&gt; member variable is data. We should use the &lt;code&gt;currentSpeed()&lt;&#x2F;code&gt; method to &lt;em&gt;ask&lt;&#x2F;em&gt; for the speed. I made a special point to use the word &lt;em&gt;ask&lt;&#x2F;em&gt; in the previous sentence. Our current implementation is not asking for anything. It knows &lt;em&gt;how&lt;&#x2F;em&gt; the &lt;code&gt;$speed&lt;&#x2F;code&gt; data is stored within &lt;code&gt;Car&lt;&#x2F;code&gt; class. What is the big deal though, right? It is obvious by looking at this code that two different methods are accessing &lt;code&gt;$speed&lt;&#x2F;code&gt;. If we are going to change how &lt;code&gt;$speed&lt;&#x2F;code&gt; works later on, we can deal with it then. YAGNI bro!&lt;&#x2F;p&gt;
&lt;p&gt;Trying to predict the future is sure way to make your code design overly complex. The principle of You Aren&#x27;t Gonna Need It (YAGNI) addresses this concern. However, we have already established a pattern here. More than one method needs to know the speed of the &lt;code&gt;Car&lt;&#x2F;code&gt; object. There is a good chance that more methods will need to know the speed as well. It is also important to consider the cost of making a change. In this case, the cost of changing &lt;code&gt;cruiseControlSet()&lt;&#x2F;code&gt; to use the &lt;code&gt;currentSpeed()&lt;&#x2F;code&gt; method instead of directly accessing &lt;code&gt;$speed&lt;&#x2F;code&gt; is very low. When the cost is low, err on the side of good OO design in an attempt to make change easy. Do it even if you are sure that &lt;code&gt;$speed&lt;&#x2F;code&gt; will never change.&lt;&#x2F;p&gt;
&lt;p&gt;Something else starts to become apparent as we add more of the cruise control functionality to the &lt;code&gt;Car&lt;&#x2F;code&gt; class. Let&#x27;s add the other methods and see if we can spot it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;class Car
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    protected $speed;
&lt;&#x2F;span&gt;&lt;span&gt;    protected $cruisingSpeed;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function currentSpeed() { return $this-&amp;gt;speed; }
&lt;&#x2F;span&gt;&lt;span&gt;    public function cruisingSpeed() { return $this-&amp;gt;cruisingSpeed; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function cruiseControlToggle() { ... }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function cruiseControlSet() {
&lt;&#x2F;span&gt;&lt;span&gt;        $this-&amp;gt;cruisingSpeed = $this-&amp;gt;currentSpeed();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function cruiseControlCancel() { ... }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function cruiseControlResume() {
&lt;&#x2F;span&gt;&lt;span&gt;        if ($this-&amp;gt;currentSpeed() != $this-&amp;gt;cruisingSpeed()) {
&lt;&#x2F;span&gt;&lt;span&gt;            ...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we are adding the cruise control functionality to the &lt;code&gt;Car&lt;&#x2F;code&gt; class something starts to feel wrong. The class is getting large in a hurry. Also, our tests may be getting harder to setup. This functionality is screaming to be refactored into a separate class. Another hint is that we started using a common method prefix of &lt;code&gt;cruiseControl&lt;&#x2F;code&gt;. Whenever this happens, we should really consider if this functionality is part of this class. Let&#x27;s move all the &lt;code&gt;cruiseControl*()&lt;&#x2F;code&gt; methods and the &lt;code&gt;cruisingSpeed()&lt;&#x2F;code&gt; method into another class. Watch closely how the DRY principle helps us minimize the amount of changes we make in this refactor.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;class Car
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    protected $speed;
&lt;&#x2F;span&gt;&lt;span&gt;    protected $cruisingSpeed;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function currentSpeed() { return $this-&amp;gt;speed; }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;class CruiseControl 
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    public function cruisingSpeed() { return $this-&amp;gt;cruisingSpeed; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function toggle() { ... }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function set() {
&lt;&#x2F;span&gt;&lt;span&gt;        $this-&amp;gt;cruisingSpeed = $this-&amp;gt;currentSpeed();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function cancel() { ... }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function resume() {
&lt;&#x2F;span&gt;&lt;span&gt;        if ($this-&amp;gt;currentSpeed() != $this-&amp;gt;cruisingSpeed()) {
&lt;&#x2F;span&gt;&lt;span&gt;            ...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public function __construct(Car $car)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        $this-&amp;gt;car = $car;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    protected function currentSpeed()
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        return $this-&amp;gt;car-&amp;gt;currentSpeed();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how the methods that implement our cruise control operations are still using the &lt;code&gt;currentSpeed()&lt;&#x2F;code&gt; method. They did not have to change because we just added a protected method to get the current speed of the car. We hide away the knowledge of where the speed is coming from as these methods are not concerned with that specific knowledge. We are able to do this because the cruise control is given access to the public interface of the &lt;code&gt;Car&lt;&#x2F;code&gt; class and can then determine the speed. This forces the cruise control system to &lt;em&gt;ask&lt;&#x2F;em&gt; the &lt;code&gt;Car&lt;&#x2F;code&gt; class to do things. For example, the cruise control system no longer has the potential to change the &lt;code&gt;$speed&lt;&#x2F;code&gt; of the &lt;code&gt;Car&lt;&#x2F;code&gt; class. If it wants to change speeds, it must &lt;em&gt;ask&lt;&#x2F;em&gt; a &lt;code&gt;Car&lt;&#x2F;code&gt; object to accelerate or decelerate.&lt;&#x2F;p&gt;
&lt;p&gt;I hope I have shown the benefits of DRYing up code, even when the DRY violations appear to be harmless. You may still have some reservations about the benefits of the DRY principle. I encourage you to put the those reservations aside for a period of time and adhere to those principles. Chances are you will notice an increase in the quality of design.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>What do MySQL datetime types and scrum have in common?</title>
        <published>2013-01-19T00:00:00+00:00</published>
        <updated>2013-01-19T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2013/01/19/datetime-scrum.html/" type="text/html"/>
        <id>https://hermanradtke.com/2013/01/19/datetime-scrum.html/</id>
        
        <content type="html">&lt;p&gt;I have always wondered why the MySQL datetime type only has second precision. Developers will happily put a datetime type in a unique index though. They justify that decision by telling themselves, &quot;Two rows inserted within the same second will never happen&quot;. That same developer just got done reading the latest MongoDB article that benchmarked a gazillion inserts a second. They tweeted it too. I suggest that we use a bigint and store a timestamp with greater precision if we are to use it as a unique index (or use Postgres). &quot;A bigint takes up too much space!&quot;. Cool guid there, bro. So what does this tangent have to do with scrum? This whole notion of 2-4 week sprints for development is akin to using second precision when a &lt;a href=&quot;http:&#x2F;&#x2F;www.fusionio.com&#x2F;data-sheets&#x2F;iodrive2-duo&#x2F;&quot;&gt;Fusion ioDrive2&lt;&#x2F;a&gt; can rock 500 million write IOPS.&lt;&#x2F;p&gt;
&lt;p&gt;I just have this notion in my head that 2-4 week sprints are not condusive to good business. I may be wrong, but &lt;a href=&quot;http:&#x2F;&#x2F;blog.expensify.com&#x2F;2013&#x2F;01&#x2F;11&#x2F;ceo-friday-startup-best-practices-95-failure-rate&#x2F;&quot;&gt;95% of startups fail&lt;&#x2F;a&gt; anyways so you might as well try something different. I prefer 1-2 day iterations. It may sound crazy to break a 4 month project down into 1-2 day iterations, but I think the end result will be significantly better. It distills a project or feature down to what is most important. With 2 week iterations, going through 4 iterations of a product takes 2 months. That feels like a lifetime to me.  The quarter is nearly over by then. I hope your (educated) guess was right because you have almost no time to try something else. I am not even confining this 1-2 day iteration idea to startups either. I think it is more important for larger businesses because they have more to gain (and lose).&lt;&#x2F;p&gt;
&lt;p&gt;I expect this 1-2 day pace to feel chaotic to most people. Most people want to establish some kind of process so they feel like they have some control. A 2-4 week sprint is great because we now have time to estimate. With estimates we now have visibility into the healthiness of the project through burndown charts and can measure things like team velocity. When did &quot;team velocity&quot; suddenly become more important than growing the business? They would rather sit up in the ivory tower and watch Uncle Bob discuss the best practice for the number of lines of a class method instead.&lt;&#x2F;p&gt;
&lt;p&gt;Grow the business. And stop using MySQL datetime fields in unique indices.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>Do Not Be Afraid Of New Technology</title>
        <published>2012-12-30T00:00:00+00:00</published>
        <updated>2012-12-30T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2012/12/30/do-not-be-afraid-of-new-technology.html/" type="text/html"/>
        <id>https://hermanradtke.com/2012/12/30/do-not-be-afraid-of-new-technology.html/</id>
        
        <content type="html">&lt;p&gt;I think the &lt;a href=&quot;http:&#x2F;&#x2F;lucumr.pocoo.org&#x2F;2012&#x2F;12&#x2F;29&#x2F;sql-is-agile&#x2F;&quot;&gt;SQL is Agile&lt;&#x2F;a&gt; post by Armin Ronacher is a little short sighted. &lt;em&gt;Disclaimer: I rarely use MongoDB or other NoSQL offerings&lt;&#x2F;em&gt;. There are plenty of good reasons to use MongoDB in production. Many people and companies have shown it to be successful. More importantly we should not be afraid of trying out new things, especially for side projects. We should be cautious of trying new things for important projects. By &quot;important&quot;, I mean those projects that need to be reliable or where there is some sort of SLA. This important distinction between types of projects is not made in the article. If we are building some toy application or program, then I see no problem considering MongoDB. For those 1-2% of toy projects that take off and need to scale big, you will have some growing pains with MongoDB. However, you will always have growing pains. Even with SQL there will be growing pains. There are always new ideas coming out about how we can use relational databases to scale. At one point there was no such thing as the idea of sharding or master&#x2F;slave replication. These ideas came about as SQL became more mature. There may be another breakthrough that no one has thought of to scale relational databases. There also may be some breakthroughs with NoSQL datbases that make them scale better than they do now.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Relational_database&quot;&gt;Relational databases&lt;&#x2F;a&gt; have been around since the 1970s and Oracle was started in 1977. There has been a ton of research poured into relational databases. We have the SQL-99 standard and ACID compliance. There are a lot of people using relational databases and they have become very familiar with them over the years. MongoDB was just started a little over &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;MongoDB#History&quot;&gt;5 years ago&lt;&#x2F;a&gt;. Not as many people have as much knowledge or expierence with MongoDB as they do with something like MySQL because it has not been around as long. To say that you will &quot;never&quot; use it again for a project moving forward is the wrong attitude. If you do not feel comfortable with MongoDB, then you should not use it for any sort of serious project. That should not prevent you from using it for toy projects so you can build more experience. Let&#x27;s face it: document databases have a place in the world and they are not going to go away.&lt;&#x2F;p&gt;
&lt;p&gt;I think a lot of the problems Armin has with NoSQL, such as adding a new index, will go away. The fact that indices are hard to add or can change the output is a problem that can be solved. That is not a problem inherit with document databases. That is just a pain point of the implementation. The global lock in MongoDB was a huge pain point and it eventually went away. Maybe saying that you &quot;would never start a project with MongoDB&quot; is just sensationalism. I believe NoSQL can be used for toy projects if you think the technology is interesting but are not ready to use it on something more serious. That is a great way we can be responsible with approaching new technology.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
        <title>PHP: The Good Parts</title>
        <published>2012-07-16T00:00:00+00:00</published>
        <updated>2012-07-16T00:00:00+00:00</updated>
        <author>
          <name>Herman J. Radtke III</name>
 	  <activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>
 	  <uri>https://hermanradtke.com/about/</uri>
        </author>
        <link rel="alternate" href="https://hermanradtke.com/2012/07/16/php-the-good-parts.html/" type="text/html"/>
        <id>https://hermanradtke.com/2012/07/16/php-the-good-parts.html/</id>
        
        <content type="html">&lt;p&gt;This blog post is inspired by Douglas Crockford&#x27;s book &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;JavaScript-Good-Parts-Douglas-Crockford&#x2F;dp&#x2F;0596517742&quot;&gt;JavaScript: The Good Parts&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All programming languages have warts. That is, there were certain decisions made about a language that are less than ideal. Some people are driven to remove these warts from the language in an attempt to make the language better. I think this is done with the best intentions, but can often have negative consequences. JavaScript is a good example of a language that has a lot of warts. Despite all these warts, JavaScript is a very useful language and has seen a huge rise in popularity. I feel PHP is the same way. It has bad parts, but there are so many good parts that we need to celebrate those good parts. Here are a few things off the top of my head:&lt;&#x2F;p&gt;
&lt;h2&gt;Arrays&lt;&#x2F;h2&gt;
I think the array is the single most powerful and useful part of PHP. The PHP array is the Swiss Amry knife in my programming toolkit. I have written applications in a number of other software languages and I have yet to find anything else more useful. The best part about arrays is that they just work. I don&#x27;t have to decide ahead of time between a list or a map. The PHP array is to data structures as NoSQL is to SQL. Better still is that PHP core uses them all over the place. Results from the database: arrays. Parsing a json POST from the client: arrays. They are ubiquitous in PHP in both core and userland. I cannot say enough good things about PHP arrays.
&lt;h2&gt;Web Ready&lt;&#x2F;h2&gt;
PHP is web ready. I do not mean that PHP is easy to integrate into a webserver. PHP is easy to integrate, but I think a lot of languages do a good job of integrating to webservers now. I mean PHP is built for the web. It is so easy to create an HTML template and pass the data to it. I think Mustache and Twig are great. That being said, I do not have to decide on a templating language in order to get up and running. Everyone understands HTML.
&lt;p&gt;I do think this is feature is getting less important as the web develops. I write a lot of API&#x27;s and send almost everything to the client via json. However, they are still tons of websites out there are that are not platforms and need to serve up HTML.&lt;&#x2F;p&gt;
&lt;h2&gt;Streams&lt;&#x2F;h2&gt;
Streams are the best kept secret in PHP. Most people do not even realize they are using streams when they are interacting with file systems or networks. I wrote a &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;1706840&quot;&gt;plugin to push messages&lt;&#x2F;a&gt; to the Phergie IRC bot in less than an hour using streams. They are a really powerful abstraction that is used all over PHP.
&lt;h2&gt;Type Juggling&lt;&#x2F;h2&gt;
For the most part, a web application is just a bunch of strings. HTTP is all strings, most database adapters return strings and all output is strings. PHP handles all of this and removes all kinds of boilerplate code from my applications. I think PHP has the most sensible implementation of juggling too. Yes, they are some problems with large integers that are represented as strings. It is by no means perfect. However, I think the PHP zval has saved me orders of magnitude more hours than pain.
&lt;p&gt;For all the warts, there is plenty of beauty in PHP. I still enjoy writing web applications using PHP and focus my time using the parts of PHP that work really well.&lt;&#x2F;p&gt;
</content>
    </entry>
</feed>
